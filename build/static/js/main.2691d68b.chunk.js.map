{"version":3,"sources":["fonts/quoteFontPairings.js","services/IteratorServices.js","services/TokenServices.js","contexts/GlobalContextManager.js","components/Header/LoginForm.js","components/Loading/LoadingSpinner.js","components/Header/CreateAccountForm.js","components/Header/AccountAccessForms.js","components/Header/UserMenu.js","components/Header/Menu.js","components/LandingPage/HeroImage.js","pages/LandingPage.js","components/QuoteEditorPage/QuoteDisplay.js","components/QuoteEditorPage/QuoteControls.js","components/QuoteEditorPage/QuoteNav.js","pages/QuoteEditorPage.js","components/UserProfilePage/FavoritesListItem.js","components/UserProfilePage/FavoritesList.js","pages/UserProfilePage.js","serviceWorker.js","index.js","router/Router.js","config.js"],"names":["quoteFontPairings","body","author","IteratorServices","createIterator","iterable","this","createIteratorObj","regenerator_default","a","mark","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","return","finish","stop","TokenServices","getTokenByKey","key","window","localStorage","getItem","setToken","data","setItem","updateToken","removeTokenByKey","removeItem","GlobalContext","React","createContext","GlobalContextManager","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomizeQuote","setState","currentQuoteSaved","state","keepBackground","iterateBackgroundUrl","backgroundUrlItObj","keepFonts","iterateFontPairing","fontPairItObj","keepQuote","iterateQuote","quoteItObj","undoRandomizeQuote","currentState","currentQuoteBgImageUrl","prevQuoteBgImageUrl","fontPair","previousFontPair","prevFontPair","currentQuote","prevQuote","saveQuote","userId","getUpdatedSavedQuotes","backgroundImageUrl","quoteId","id","bodyFont","currentQuoteFontPair","authorFont","fetch","concat","API_BASE_URL","method","headers","Content-Type","Authorization","JSON","stringify","then","res","ok","handleCheckboxCheck","e","target","editFavoritesItem","quote","history","background_image_url","push","createAccount","userInfo","preventDefault","username","password","json","resJson","hasOwnProperty","createAccountError","error","loginUser","loading","catch","err","console","signInError","decodedToken","jwt","decode","authToken","userIsLoggedIn","sub","savedQuotes","menuIsOpen","logoutUser","updatedQuotesList","deleteFavoritesItem","savedQuoteId","filter","savedQuote","toggleMenuIsOpen","setCreateAccountError","message","setSignInError","quotes","quoteBackgroundImageUrls","toConsumableArray","prevQuoteFontPair","quoteHistory","keepQuoteBackground","keepQuoteFonts","keepQuoteQuote","initializeApp","localToken","complete","header","payload","_this2","getImages","getBackgroundImages","getQuotes","Promise","all","values","log","_this3","numberOfImages","arguments","length","process","resolve","_this4","_ref","urls","regular","_ref2","_ref3","globalContext","methods","react_default","createElement","Provider","children","Component","LoginForm","errorMessage","context","Consumer","className","onSubmit","handleSubmit","htmlFor","type","onChange","handleTextInput","required","LoadingSpinner","width","height","xmlns","viewBox","preserveAspectRatio","style","shapeRendering","animationPlayState","animationDelay","background","cx","cy","fill","ng-attr-stroke","ng-attr-stroke-width","ng-attr-r","ng-attr-stroke-dasharray","stroke","stroke-width","r","stroke-dasharray","transform","attributeName","calcMode","keyTimes","dur","begin","repeatCount","contextType","CreateAccountForm","passwordConfirm","_this$state","Fragment","AccountAccessForms","setInCreateAccountMode","bool","inCreateAccountMode","onClick","CreateAccountForm_CreateAccountForm","LoginForm_LoginForm","UserMenu","react_router_dom","to","Menu","bind","assertThisInitialized","AccountAccessForms_AccountAccessForms","HeroImage","_useState","useState","_useState2","slicedToArray","LandingPage","class","QuoteDisplay","dynamicBackgroundStyles","backgroundSize","backgroundPosition","backgroundImage","dynamicBodyFont","fontFamily","dynamicAuthorFont","QuoteControls","index_es","icon","faCheckSquare","size","faSquare","QuoteNav","disabled","QuoteEditorPage","QuoteDisplay_QuoteDisplay","FavoritesListItem","quoteFont","bodyfont","authorfont","alt","src","FavoritesList","map","UserProfilePage","Boolean","location","hostname","match","ReactDOM","render","GlobalContextManager_GlobalContextManager","Menu_Menu","react_router","path","exact","component","UserProfilePage_UserProfilePage","assign","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","PORT"],"mappings":"2UAuBeA,EAvBW,CACxB,CACEC,KAAM,0BACNC,OAAQ,+BAEV,CACED,KAAK,yBACLC,OAAO,uBAET,CACED,KAAK,mBACLC,OAAO,sBAET,CACED,KAAK,4BACLC,OAAO,yBAET,CACED,KAAK,sBACLC,OAAO,6CCPIC,EAZU,CACvBC,eADuB,SACRC,GACb,OAAOC,KAAKC,kBAAkBF,IAG/BE,kBALsBC,EAAAC,EAAAC,KAAA,SAAAH,EAKJI,GALI,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAT,GAAA,EAAAC,GAAA,EAAAC,OAAAQ,EAAAH,EAAAC,KAAA,EAAAL,EAMNJ,EANMY,OAAAC,YAAA,UAAAZ,GAAAI,EAAAD,EAAAM,QAAAI,KAAA,CAAAN,EAAAE,KAAA,SAOnB,OADMJ,EANaD,EAAAU,MAAAP,EAAAE,KAAA,EAObJ,EAPa,OAAAL,GAAA,EAAAO,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAAAN,GAAA,EAAAC,EAAAK,EAAAQ,GAAA,QAAAR,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAR,GAAA,MAAAG,EAAAa,QAAAb,EAAAa,SAAA,WAAAT,EAAAC,KAAA,IAAAP,EAAA,CAAAM,EAAAE,KAAA,eAAAP,EAAA,eAAAK,EAAAU,OAAA,mBAAAV,EAAAU,OAAA,6BAAAV,EAAAW,SAAAvB,EAAA,oCCeVwB,EAfO,CACpBC,cADoB,SACNC,GACZ,OAAOC,OAAOC,aAAaC,QAAQH,IAErCI,SAJoB,SAIXJ,EAAKK,GACZJ,OAAOC,aAAaI,QAAQN,EAAKK,IAEnCE,YAPoB,SAORP,EAAKK,GACfJ,OAAOC,aAAaI,QAAQN,EAAKK,IAEnCG,iBAVoB,SAUHR,GACfC,OAAOC,aAAaO,WAAWT,8BCJ7BU,EAAgBC,IAAMC,gBAEtBC,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3C,KAAAwC,IACjBE,EAAAC,OAAAE,EAAA,EAAAF,CAAA3C,KAAA2C,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAA/C,KAAMyC,KAkERO,eAAiB,WACfN,EAAKO,SAAS,CACZC,mBAAmB,IAEjBR,EAAKS,MAAMC,gBACbV,EAAKW,qBAAqBX,EAAKY,mBAAmBvC,QAEhD2B,EAAKS,MAAMI,WACbb,EAAKc,mBAAmBd,EAAKe,cAAc1C,QAEzC2B,EAAKS,MAAMO,WACbhB,EAAKiB,aAAajB,EAAKkB,WAAW7C,SA9EnB2B,EAkFnBmB,mBAAqB,WACfnB,EAAKS,MAAMC,gBACbV,EAAKO,SAAS,SAACa,GACb,MAAO,CACLC,uBAAwBD,EAAaE,oBACrCA,oBAAqBF,EAAaC,0BAKpCrB,EAAKS,MAAMI,WACbb,EAAKO,SAAS,SAACa,GACb,MAAO,CACLG,SAAUH,EAAaI,iBACvBC,aAAcL,EAAaG,YAK7BvB,EAAKS,MAAMO,WACbhB,EAAKO,SAAS,SAACa,GACb,MAAO,CACLM,aAAcN,EAAaO,UAC3BA,UAAWP,EAAaM,iBAzGb1B,EA+GnB4B,UAAY,SAACC,EAAQC,GAGnB,GAAc,IAAXD,EAAH,CAIA,IAAMvC,EAAO,CACXyC,mBAAoB/B,EAAKS,MAAMY,uBAC/BW,QAAShC,EAAKS,MAAMiB,aAAaO,GACjCC,SAAUlC,EAAKS,MAAM0B,qBAAqBlF,KAC1CmF,WAAYpC,EAAKS,MAAM0B,qBAAqBjF,OAC5C2E,OAAQA,GAGVQ,MAAK,GAAAC,OAAIC,eAAJ,gBAAgC,CACnCC,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,cAAA,UAAAL,OAA2BvD,EAAcC,cAAc,gBAEzD/B,KAAM2F,KAAKC,UAAUvD,KAEtBwD,KAAK,SAAAC,GACDA,EAAIC,KACLlB,EAAsBD,GACtB7B,EAAKO,SAAS,CAACC,mBAAmB,SAzIrBR,EA+InBiD,oBAAsB,SAACC,GACrB,OAAOA,EAAEC,OAAOlB,IACd,IAAK,sBACHjC,EAAKO,SAAS,SAACa,GACb,MAAO,CACLJ,WAAYI,EAAaJ,aAG7B,MACF,IAAK,sBACHhB,EAAKO,SAAS,SAACa,GACb,MAAO,CACLP,WAAYO,EAAaP,aAG7B,MACF,IAAK,2BACHb,EAAKO,SAAS,SAACa,GACb,MAAO,CACLV,gBAAiBU,EAAaV,oBAlKrBV,EA0KnBoD,kBAAoB,SAACC,EAAOC,GAC1BtD,EAAKO,SAAS,CACZmB,aAAc2B,EACdhC,uBAAwBgC,EAAME,qBAC9B7C,gBAAgB,EAChBG,WAAW,EACXG,WAAW,GACV,WACDsC,EAAQE,KAAK,cAlLExD,EAyLnByD,cAAgB,SAACP,EAAGQ,EAAUD,GAC5BP,EAAES,iBACF,IAAMrE,EAAO,CACXsE,SAAUF,EAASE,SACnBC,SAAUH,EAASG,UAGrBxB,MAAK,GAAAC,OAAIC,eAAJ,UAA0B,CAC7BC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBzF,KAAM2F,KAAKC,UAAUvD,KAEtBwD,KAAK,SAAAC,GAAG,OAAIA,EAAIe,SAChBhB,KAAK,SAAAiB,GACDA,EAAQC,eAAe,UACxBhE,EAAKO,SAAS,CACZ0D,mBAAoBF,EAAQG,QAGhClE,EAAKmE,UAAU,KAAM7E,GAClBwD,KAAK,WACJW,EAAclD,SAAS,CACrB6D,SAAS,QAIhBC,MAAM,SAAAC,GACLC,QAAQL,MAAMI,MAtNCtE,EA0NnBmE,UAAY,SAACjB,EAAGQ,GACXR,GAAGA,EAAES,iBACR,IAAMrE,EAAO,CACXsE,SAAUF,EAASE,SACnBC,SAAUH,EAASG,UAGrB,OAAOxB,MAAK,GAAAC,OAAIC,eAAJ,UAA0B,CACpCC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBzF,KAAM2F,KAAKC,UAAUvD,KAEtBwD,KAAK,SAAAC,GAAG,OAAIA,EAAIe,SAChBhB,KAAK,SAAAC,GACJ,GAAGA,EAAImB,MACLlE,EAAKO,SAAS,CACZiE,YAAazB,EAAImB,YAFrB,CAMA,IAAIO,EAAeC,IAAIC,OAAO5B,EAAI6B,WAClC7F,EAAcM,SAAS,aAAc0D,EAAI6B,WACvC5E,EAAKO,SAAS,CACdsE,gBAAgB,EAChBjB,SAAUa,EAAaK,IACvBjD,OAAQ4C,EAAa5C,OACrBkD,YAAahC,EAAIgC,YACjBC,YAAY,QAvPChF,EA4PnBiF,WAAa,WACXlG,EAAcU,iBAAiB,cAC/BO,EAAKO,SAAS,CACZsE,gBAAgB,EAChBhD,OAAQ,EACR+B,SAAU,GACVmB,YAAa,GACbC,YAAY,KAnQGhF,EAuQnB8B,sBAAwB,SAAC8B,GACvBvB,MAAK,GAAAC,OAAIC,eAAJ,iBAAAD,OAAgCsB,GAAY,CAC/CnB,QAAS,CACPE,cAAA,UAAAL,OAA2BvD,EAAcC,cAAc,kBAGxD8D,KAAK,SAAAC,GAAG,OAAIA,EAAIe,SAChBhB,KAAK,SAAAoC,GACJlF,EAAKO,SAAS,CACZwE,YAAaG,OAhRFlF,EAqRnBmF,oBAAsB,SAACC,GACrB,IAAM9F,EAAO,CAAE8F,gBACf/C,MAAK,GAAAC,OAAIC,eAAJ,iBAAiC,CACpCC,OAAQ,SACRC,QAAS,CACPC,eAAgB,mBAChBC,cAAA,UAAAL,OAA2BvD,EAAcC,cAAc,gBAEzD/B,KAAM2F,KAAKC,UAAUvD,KAEtBwD,KAAK,SAAAC,GACDA,EAAIC,IACLhD,EAAKO,SAAS,SAACa,GASb,MAAO,CACL2D,YATmB3D,EAAa2D,YAAYM,OAAO,SAACC,GACpD,OAAGA,EAAWrD,KAAOmD,GAIZE,UAvSAtF,EAmTnBuF,iBAAmB,WACjBvF,EAAKO,SAAS,SAACa,GACb,MAAO,CACL4D,YAAa5D,EAAa4D,eAtTbhF,EAgZnBwF,sBAAwB,SAACC,GACvBzF,EAAKO,SAAS,CACZ0D,mBAAoBwB,KAlZLzF,EAsZnB0F,eAAiB,SAACD,GAChBzF,EAAKO,SAAS,CACZiE,YAAaiB,KAtZfzF,EAAKS,MAAQ,CACXkF,OAAQ,GACRC,yBAA0B,GAC1B5I,kBAAkBiD,OAAA4F,EAAA,EAAA5F,CAAKjD,GAEvB0E,aAAc,GACdL,uBAAwB,GACxBc,qBAAsB,GACtB3B,mBAAmB,EAEnBmB,UAAW,GACXL,oBAAqB,GACrBwE,kBAAmB,GACnBC,aAAc,GAEdC,qBAAqB,EACrBC,gBAAgB,EAChBC,gBAAgB,EAEhBrB,gBAAgB,EAChBjB,SAAU,GACV/B,OAAQ,EACRkD,YAAa,GAEbC,YAAY,EAEZR,YAAa,GACbP,mBAAoB,IA7BLjE,mFAmCjB1C,KAAK6I,gBACL,IAAMC,EAAa1B,IAAIC,OAAO5F,EAAcC,cAAc,cAAe,CAACqH,UAAU,IAEpF,GAAID,EAAY,CAIVA,EAFFE,OAFY,IAGZC,EACEH,EADFG,QAGFjJ,KAAKiD,SAAS,CACZsE,gBAAgB,EAChBhD,OAAQ0E,EAAQ1E,OAChB+B,SAAU2C,EAAQzB,+CAMR,IAAA0B,EAAAlJ,KACVmJ,EAAYnJ,KAAKoJ,oBAAoB,IACrCC,EAAYrJ,KAAKqJ,UAAU,IAE/BC,QAAQC,IAAI,CAAEF,EAAWF,IACtB3D,KAAK,SAAAgE,GACJN,EAAKzF,cAAgB5D,EAAiBC,eAAeoJ,EAAK/F,MAAMzD,mBAChEwJ,EAAKlG,mBAEN+D,MAAM,SAAAC,GAAG,OAAIC,QAAQwC,IAAIzC,mDA8PW,IAAA0C,EAAA1J,KAArB2J,EAAqBC,UAAAC,OAAA,QAAA7I,IAAA4I,UAAA,GAAAA,UAAA,GAAJ,GACnC,OAAO7E,MAAK,gDAAAC,OAAiD2E,GAAkB,CAC7ExE,QAAS,CACPE,cAAa,aAAAL,OAAe8E,uEAG/BtE,KAAK,SAAAC,GAAG,OAAIA,EAAIe,SAChBhB,KAAK,SAAAiB,GACJ,OAAO,IAAI6C,QAAQ,SAACS,GAClBL,EAAKzG,SAAS,CACZqF,yBAA0B7B,GAG5B,WACEiD,EAAKpG,mBAAqBzD,EAAiBC,eAAe4J,EAAKvG,MAAMmF,0BACrEyB,EAAQ,wEAMe,IAAAC,EAAAhK,KAAA4J,UAAAC,OAAA,QAAA7I,IAAA4I,UAAA,IAAAA,UAAA,GAE7B,OAAO7E,MAAK,GAAAC,OAAIC,eAAJ,YACXO,KAAK,SAAA6C,GAAM,OAAIA,EAAO7B,SACtBhB,KAAK,SAAA6C,GACJ,OAAO,IAAIiB,QAAQ,SAACS,GAClBC,EAAK/G,SAAS,CACZoF,OAAQA,GAGV,WACE2B,EAAKpG,WAAa/D,EAAiBC,eAAekK,EAAK7G,MAAMkF,QAC7D0B,EAAQ,4EAMoB,IAAd3I,EAAc6I,EAAd7I,MAAc6I,EAAP9I,KAWzBnB,KAAKoJ,oBAAoB,IATzBpJ,KAAKiD,SAAS,SAACa,GACb,MAAO,CACLC,uBAAwB3C,EAAM8I,KAAKC,QACnCnG,oBAAqBF,EAAaC,wEAUR,IAAd3C,EAAcgJ,EAAdhJ,MAAcgJ,EAAPjJ,MAWvBnB,KAAKyD,cAAgB5D,EAAiBC,eAAeE,KAAKmD,MAAMzD,mBAChEM,KAAKwD,mBAAmBxD,KAAKyD,cAAc1C,SAV3Cf,KAAKiD,SAAS,SAACa,GACb,MAAO,CACLe,qBAAsBzD,EACtBoH,kBAAmB1E,EAAaG,oDAWZ,IAAd7C,EAAciJ,EAAdjJ,MAAciJ,EAAPlJ,KAUjBnB,KAAKqJ,UAAU,IARfrJ,KAAKiD,SAAS,SAAAa,GACZ,MAAO,CACLM,aAAchD,EACdiD,UAAWP,EAAaM,iDAuB9B,IAAMkG,EAAgB,CACpBnH,MAAOnD,KAAKmD,MACZoH,QAAS,CACP5E,oBAAqB3F,KAAK2F,oBAC1B3C,eAAgBhD,KAAKgD,eACrBa,mBAAoB7D,KAAK6D,mBACzBS,UAAWtE,KAAKsE,UAChBwB,kBAAmB9F,KAAK8F,kBACxBK,cAAenG,KAAKmG,cACpBU,UAAW7G,KAAK6G,UAChBc,WAAY3H,KAAK2H,WACjBnD,sBAAuBxE,KAAKwE,sBAC5BqD,oBAAqB7H,KAAK6H,oBAC1BI,iBAAkBjI,KAAKiI,iBACvBC,sBAAuBlI,KAAKkI,sBAC5BE,eAAgBpI,KAAKoI,iBAIzB,OACEoC,EAAArK,EAAAsK,cAACpI,EAAcqI,SAAf,CAAwBtJ,MAAOkJ,GAC5BtK,KAAKyC,MAAMkI,iBArberI,IAAMsI,mCCNpBC,cACnB,SAAAA,EAAYpI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3C,KAAA6K,IACjBnI,EAAAC,OAAAE,EAAA,EAAAF,CAAA3C,KAAA2C,OAAAG,EAAA,EAAAH,CAAAkI,GAAA9H,KAAA/C,KAAMyC,KACDU,MAAQ,CACXmD,SAAU,GACVC,SAAU,GACVuE,aAAc,IALCpI,sFAUC1C,KAAK+K,QAAjBR,QACEnC,eAAe,4CAGTxC,GACd,OAAQA,EAAEC,OAAOlB,IACf,IAAK,iBACH3E,KAAKiD,SAAS,CACZqD,SAAUV,EAAEC,OAAOzE,QAErB,MACF,IAAK,iBACHpB,KAAKiD,SAAS,CACZsD,SAAUX,EAAEC,OAAOzE,QAErB,MACF,QACI6F,QAAQL,MAAM,6EAIThB,EAAG2E,GACVvK,KAAKmD,MAAMmD,UAAatG,KAAKmD,MAAMoD,UACrCvG,KAAKiD,SAAS,CACZ6H,aAAc,+CAGlBP,EAAQ1D,UAAUjB,EAAG5F,KAAKmD,wCAGnB,IAAA+F,EAAAlJ,KAEP,OACEwK,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAsB,IAApBM,EAAoBN,EAApBM,QAASpH,EAAW8G,EAAX9G,MACV,OACEqH,EAAArK,EAAAsK,cAAA,WACAD,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,oBACbT,EAAArK,EAAAsK,cAAA,8BACAD,EAAArK,EAAAsK,cAAA,0BACAD,EAAArK,EAAAsK,cAAA,6BAEDtH,EAAM+D,YACHsD,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,iBAAiB9H,EAAM+D,kBACtClG,EAEJwJ,EAAArK,EAAAsK,cAAA,QAAMQ,UAAU,aAAaC,SAAU,SAACtF,GAAD,OAAOsD,EAAKiC,aAAavF,EAAG2E,KACjEC,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,oBAAoBG,QAAQ,kBAA7C,YACAZ,EAAArK,EAAAsK,cAAA,SACE9F,GAAG,iBACH0G,KAAK,OACLC,SAAU,SAAC1F,GAAD,OAAOsD,EAAKqC,gBAAgB3F,IACtC4F,UAAQ,IAEVhB,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,oBAAoBG,QAAQ,kBAA7C,YACAZ,EAAArK,EAAAsK,cAAA,SACE9F,GAAG,iBACH0G,KAAK,WACLC,SAAU,SAAC1F,GAAD,OAAOsD,EAAKqC,gBAAgB3F,IACtC4F,UAAQ,IACTtC,EAAK/F,MAAM2H,aACVN,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,iBAAiB/B,EAAK/F,MAAM2H,cAC3C,GAEFN,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,qBAAqBI,KAAK,SAASjK,MAAM,uBA3EjCwJ,aCDxB,SAASa,IACtB,OACIjB,EAAArK,EAAAsK,cAAA,OACEiB,MAAM,QACNC,OAAO,QACPC,MAAM,6BACNC,QAAQ,cACRC,oBAAoB,WACpBb,UAAU,cACVc,MAAO,CAACC,eAAgB,OAChBC,mBAAoB,UACpBC,eAAgB,KAChBC,WAAY,SAClB3B,EAAArK,EAAAsK,cAAA,UACE2B,GAAG,KACHC,GAAG,KACHC,KAAK,OACLC,iBAAe,mBACfC,uBAAqB,mBACrBC,YAAU,oBACVC,2BAAyB,uBACzBC,OAAO,UACPC,eAAa,KACbC,EAAE,KACFC,mBAAiB,uCACjBf,MAAO,CAACE,mBAAoB,UAAWC,eAAgB,MACvDa,UAAU,yBACVvC,EAAArK,EAAAsK,cAAA,oBACEuC,cAAc,YACd3B,KAAK,SACL4B,SAAS,SACTzD,OAAO,oBACP0D,SAAS,MACTC,IAAI,KACJC,MAAM,KACNC,YAAY,aACZtB,MAAO,CAACE,mBAAoB,UAAWC,eAAgB,UDkDrErB,EAAUyC,YAAcjL,MEpFHkL,cAEnB,SAAAA,EAAY9K,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3C,KAAAuN,IACjB7K,EAAAC,OAAAE,EAAA,EAAAF,CAAA3C,KAAA2C,OAAAG,EAAA,EAAAH,CAAA4K,GAAAxK,KAAA/C,KAAMyC,KACDU,MAAQ,CACXmD,SAAU,GACVC,SAAU,GACViH,gBAAiB,GACjB1C,aAAc,GACdhE,SAAS,GAPMpE,sFAaC1C,KAAK+K,QAAjBR,QACErC,sBAAsB,4CAGhBtC,GACd,OAAQA,EAAEC,OAAOlB,IACf,IAAK,wBACH3E,KAAKiD,SAAS,CACZqD,SAAUV,EAAEC,OAAOzE,QAErB,MACF,IAAK,wBACHpB,KAAKiD,SAAS,CACZsD,SAAUX,EAAEC,OAAOzE,QAErB,MACF,IAAK,gCACHpB,KAAKiD,SAAS,CACZuK,gBAAiB5H,EAAEC,OAAOzE,QAE5B,MACF,QACE6F,QAAQL,MAAM,sFAIPhB,EAAG2E,GAAS,IAAArB,EAAAlJ,KACvB4F,EAAES,iBADqB,IAAAoH,EAEazN,KAAKmD,MAFlBsK,EAEjBlH,WAFiBkH,EAEPD,gBAOhBxN,KAAKiD,SAAS,CACZ6D,SAAS,GACR,WACDyD,EAAQpE,cAAcP,EAAGsD,EAAK/F,MAAO+F,KARrClJ,KAAKiD,SAAS,CACZ6H,aAAc,0DAYX,IAAApB,EAAA1J,KACP,OACEwK,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAwB,IAArBM,EAAqBN,EAArBM,QAASpH,EAAY8G,EAAZ9G,MACX,OACEqH,EAAArK,EAAAsK,cAAAD,EAAArK,EAAAuN,SAAA,KACElD,EAAArK,EAAAsK,cAAA,QACEQ,UAAU,sBACVC,SAAU,SAACtF,GACT8D,EAAKyB,aAAavF,EAAG2E,KAEtBb,EAAKvG,MAAM2D,QACV0D,EAAArK,EAAAsK,cAACgB,EAAD,MACAjB,EAAArK,EAAAsK,cAAAD,EAAArK,EAAAuN,SAAA,KACCvK,EAAMwD,mBACJ6D,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,iBAAiB9H,EAAMwD,yBACtC3F,EAEHwJ,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,6BAA6BG,QAAQ,kBAAtD,YACAZ,EAAArK,EAAAsK,cAAA,SACE9F,GAAG,wBACH0G,KAAK,OACLC,SAAU,SAAC1F,GAAD,OAAO8D,EAAK6B,gBAAgB3F,IACtC4F,UAAQ,IAEVhB,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,6BAA6BG,QAAQ,kBAAtD,YACAZ,EAAArK,EAAAsK,cAAA,SACE9F,GAAG,wBACH0G,KAAK,WACLC,SAAU,SAAC1F,GAAD,OAAO8D,EAAK6B,gBAAgB3F,IACtC4F,UAAQ,IAEVhB,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,6BAA6BG,QAAQ,0BAAtD,oBACAZ,EAAArK,EAAAsK,cAAA,SACE9F,GAAG,gCACH0G,KAAK,WACLC,SAAU,SAAC1F,GAAD,OAAO8D,EAAK6B,gBAAgB3F,IACtC4F,UAAQ,KAGX9B,EAAKvG,MAAM2H,aACVN,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,iBAAiBvB,EAAKvG,MAAM2H,cAC3C,GACFN,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,8BAA8BI,KAAK,SAASjK,MAAM,8BArGpCwJ,aA+G/C2C,EAAkBD,YAAcjL,MC/GXsL,cACnB,SAAAA,EAAYlL,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3C,KAAA2N,IACjBjL,EAAAC,OAAAE,EAAA,EAAAF,CAAA3C,KAAA2C,OAAAG,EAAA,EAAAH,CAAAgL,GAAA5K,KAAA/C,KAAMyC,KAMRmL,uBAAyB,SAACC,GACxBnL,EAAKO,SAAS,CACZ6K,oBAAqBD,KAPvBnL,EAAKS,MAAQ,CACX2K,qBAAqB,GAHNpL,wEAaV,IAAAwG,EAAAlJ,KACP,OACEwK,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,wBACbT,EAAArK,EAAAsK,cAAA,UACEQ,UAAS,gCAAAjG,OAAkChF,KAAKmD,MAAM2K,oBAAsB,GAAK,aACjFC,QAAS,kBAAM7E,EAAK0E,wBAAuB,KAF7C,WAKApD,EAAArK,EAAAsK,cAAA,UACEQ,UAAS,gCAAAjG,OAAkChF,KAAKmD,MAAM2K,oBAAsB,YAAc,IAC1FC,QAAS,kBAAM7E,EAAK0E,wBAAuB,KAF7C,kBAKApD,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,uCACZjL,KAAKmD,MAAM2K,oBACVtD,EAAArK,EAAAsK,cAACuD,EAAD,CAAmBJ,uBAAwB5N,KAAK4N,yBAEhDpD,EAAArK,EAAAsK,cAACwD,EAAD,eA/BoC3L,IAAMsI,WCCvC,SAASsD,EAASzL,GAE/B,OACE+H,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAwB,IAArB9G,EAAqB8G,EAArB9G,MAAOoH,EAAcN,EAAdM,QACP,OACEC,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,aACZT,EAAArK,EAAAsK,cAAC0D,EAAA,EAAD,CACElD,UAAU,6BACVmD,GAAE,SAAApJ,OAAW7B,EAAMmD,UACnByH,QAAS,kBAAMxD,EAAQtC,qBAEvBuC,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,wBAAd,YAIFT,EAAArK,EAAAsK,cAAC0D,EAAA,EAAD,CACElD,UAAU,6BACVmD,GAAI,UACJL,QAAS,kBAAMxD,EAAQtC,qBAEvBuC,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,wBAAd,oBAIFT,EAAArK,EAAAsK,cAAC0D,EAAA,EAAD,CACElD,UAAU,6BACVmD,GAAI,UACJL,QAAS,kBAAMxD,EAAQ5C,eAEvB6C,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,wBAAd,mBC9BKoD,cAEnB,SAAAA,EAAY5L,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3C,KAAAqO,IACjB3L,EAAAC,OAAAE,EAAA,EAAAF,CAAA3C,KAAA2C,OAAAG,EAAA,EAAAH,CAAA0L,GAAAtL,KAAA/C,KAAMyC,KACDU,MAAQ,CACXuE,YAAY,EACZH,gBAAgB,GAElB7E,EAAKuF,iBAAmBvF,EAAKuF,iBAAiBqG,KAAtB3L,OAAA4L,EAAA,EAAA5L,CAAAD,IANPA,kFAUjB1C,KAAKiD,SAAS,SAACa,GACb,MAAO,CACL4D,YAAa5D,EAAa4D,+CAM9B,OACE8C,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAwB,IAArB9G,EAAqB8G,EAArB9G,MAAOoH,EAAcN,EAAdM,QACP,OACEC,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,kBACbT,EAAArK,EAAAsK,cAAA,UAAQQ,UAAU,QAChBT,EAAArK,EAAAsK,cAAA,UAAQQ,UAAU,eAAe8C,QAASxD,EAAQtC,kBAChDuC,EAAArK,EAAAsK,cAAA,YAAQtH,EAAMuE,WAAa,QAAU,SAEvC8C,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,kBACX9H,EAAMoE,eAAN,WAAAvC,OAAkC7B,EAAMmD,UAAY,IAEpDnD,EAAMuE,WACJvE,EAAMoE,eAAiBiD,EAAArK,EAAAsK,cAACyD,EAAD,MAAe1D,EAAArK,EAAAsK,cAAC+D,EAAD,MAEtC,cAnCUlM,IAAMsI,oBCHzB,SAAS6D,IAEtB,IAFkCC,EAQMC,mBANpB,CAClB5I,MAAK,qHAELnG,OAAQ,YALwBgP,EAAAjM,OAAAkM,EAAA,EAAAlM,CAAA+L,EAAA,GAQ3BtK,EAR2BwK,EAAA,GAAAA,EAAA,GAUlC,OACEpE,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,wBACbT,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,wBAAd,UACAT,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,oBACbT,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,gBAAgB7G,EAAa2B,OAC5CyE,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,uBAAuB7G,EAAaxE,UCZ5C,SAASkP,EAAT7E,GAAkC,IAAXjE,EAAWiE,EAAXjE,QACpC,OACEwE,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,0BACbT,EAAArK,EAAAsK,cAACgE,EAAD,MACAjE,EAAArK,EAAAsK,cAAA,QAAMQ,UAAU,8BACdT,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,sBACbT,EAAArK,EAAAsK,cAAA,iDACAD,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,sBACZT,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,2BACZT,EAAArK,EAAAsK,cAAA,KAAGsE,MAAM,sCACTvE,EAAArK,EAAAsK,cAAA,QAAMQ,UAAU,2BAAhB,8DAEFT,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,2BACZT,EAAArK,EAAAsK,cAAA,KAAGsE,MAAM,0CACTvE,EAAArK,EAAAsK,cAAA,QAAMQ,UAAU,2BAAhB,wDAKRT,EAAArK,EAAAsK,cAAA,UAAQQ,UAAU,yBAAyB8C,QAAS,kBAAM/H,EAAQE,KAAK,aAAvE,oBCrBe8I,6MACnB7L,MAAQ,CACN2D,SAAS,wHAOT,OACE0D,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAe,IAAZ9G,EAAY8G,EAAZ9G,MACI8L,EAA0B,CAC9BC,eAAgB,QAChBC,mBAAoB,gBACpBC,gBAAe,OAAApK,OAAS7B,EAAMY,uBAAf,MAGXsL,EAAkB,CACtBC,WAAYnM,EAAM0B,qBAAN,MAGR0K,EAAoB,CACxBD,WAAYnM,EAAM0B,qBAAN,QAGd,OACE2F,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,gBAAec,MAAOkD,GACnCzE,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,kBACbT,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,aAAac,MAAOsD,GAAkBlM,EAAMiB,aAAa2B,OACxEyE,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,eAAec,MAAOwD,GAAoBpM,EAAMiB,aAAaxE,mBA9BlD0C,IAAMsI,2BCEjC,SAAS4E,IAEpB,OACEhF,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAwB,IAArBM,EAAqBN,EAArBM,QAASpH,EAAY8G,EAAZ9G,MAETC,EAGGD,EAHHC,eACAG,EAEGJ,EAFHI,UACAG,EACGP,EADHO,UAKF,OACE8G,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,4BACbT,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,0BAAd,qBACAT,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,kBACbT,EAAArK,EAAAsK,cAAA,SACEa,SAAU,SAAC1F,GAAD,OAAO2E,EAAQ5E,oBAAoBC,IAC7CyF,KAAK,WACL1G,GAAG,wBACL6F,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,wBAAwBG,QAAQ,uBAC/CZ,EAAArK,EAAAsK,cAAA,WACG/G,EACC8G,EAAArK,EAAAsK,cAACgF,EAAA,EAAD,CAAiBC,KAAMC,IAAeC,KAbjC,OAeLpF,EAAArK,EAAAsK,cAACgF,EAAA,EAAD,CAAiBC,KAAMG,IAAUD,KAf5B,QAiBTpF,EAAArK,EAAAsK,cAAA,QAAMQ,UAAU,+BAAhB,eAEFT,EAAArK,EAAAsK,cAAA,SACEa,SAAU,SAAC1F,GAAD,OAAO2E,EAAQ5E,oBAAoBC,IAC7CyF,KAAK,WACL1G,GAAG,wBACL6F,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,wBAAwBG,QAAQ,uBAC/CZ,EAAArK,EAAAsK,cAAA,WACGlH,EACCiH,EAAArK,EAAAsK,cAACgF,EAAA,EAAD,CAAiBC,KAAMC,IAAeC,KA1BjC,OA4BLpF,EAAArK,EAAAsK,cAACgF,EAAA,EAAD,CAAiBC,KAAMG,IAAUD,KA5B5B,QA8BTpF,EAAArK,EAAAsK,cAAA,QAAMQ,UAAU,+BAAhB,eAEFT,EAAArK,EAAAsK,cAAA,SACEa,SAAU,SAAC1F,GAAD,OAAO2E,EAAQ5E,oBAAoBC,IAC7CyF,KAAK,WACL1G,GAAG,6BACL6F,EAAArK,EAAAsK,cAAA,SAAOQ,UAAU,wBAAwBG,QAAQ,4BAC/CZ,EAAArK,EAAAsK,cAAA,WACGrH,EACCoH,EAAArK,EAAAsK,cAACgF,EAAA,EAAD,CAAiBC,KAAMC,IAAeC,KAvCjC,OAyCLpF,EAAArK,EAAAsK,cAACgF,EAAA,EAAD,CAAiBC,KAAMG,IAAUD,KAzC5B,QA2CTpF,EAAArK,EAAAsK,cAAA,QAAMQ,UAAU,+BAAhB,wBCvDH,SAAS6E,IACtB,OACEtF,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAwB,IAArBM,EAAqBN,EAArBM,QAASpH,EAAY8G,EAAZ9G,MAGTD,EAIEC,EAJFD,kBACAqE,EAGEpE,EAHFoE,eACAlD,EAEElB,EAFFkB,UACAE,EACEpB,EADFoB,OAIAC,EACE+F,EADF/F,sBAIF,OACEgG,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,uBACbT,EAAArK,EAAAsK,cAAA,UAAQQ,UAAU,qCAAqC8C,QAAS,kBAAMxD,EAAQvH,mBAA9E,aACAwH,EAAArK,EAAAsK,cAAA,UACEsF,UAAU1L,EAAU0B,OAAgB,WACpCkF,UAAS,iCAAAjG,OAAmCX,EAAU0B,MAAQ,GAAK,mBACnEgI,QAAS,kBAAMxD,EAAQ1G,uBAHzB,QAMA2G,EAAArK,EAAAsK,cAAA,UACEsF,UAAUxI,GAAyB,WACnC0D,UAAS,mDAAAjG,OAEL9B,EAAoB,eAAiB,GAFhC,sBAAA8B,OAGLuC,EAAiB,GAAK,mBAE1BwG,QAAS,kBAAMxD,EAAQjG,UAAUC,EAAQC,KAP3C,OAUG+C,EACG,GACAiD,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,6BAAf,6BCrCH,SAAS+E,IACtB,OACExF,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,aACbT,EAAArK,EAAAsK,cAAC+E,EAAD,MACAhF,EAAArK,EAAAsK,cAACwF,EAAD,MACAzF,EAAArK,EAAAsK,cAACqF,EAAD,OCPS,SAASI,EAAkBzN,GACxC,OACE+H,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAiB,IAAdM,EAAcN,EAAdM,QAEI4F,EAAU,CACdb,WAAY7M,EAAMsD,MAAMqK,UAGpBtL,EAAa,CACjBwK,WAAY7M,EAAMsD,MAAMsK,YAG1B,OACE7F,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,uBACZT,EAAArK,EAAAsK,cAAA,WACED,EAAArK,EAAAsK,cAAA,KAAGsB,MAAOoE,GAAY1N,EAAMsD,MAAMA,OAClCyE,EAAArK,EAAAsK,cAAA,KAAGsB,MAAOjH,GAAarC,EAAMsD,MAAMnG,QAInC4K,EAAArK,EAAAsK,cAAA,UACEQ,UAAU,8BACV8C,QAAS,kBAAMxD,EAAQ1C,oBAAoBpF,EAAMqF,gBAFnD,WAIF0C,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,0BAA0BqF,IAAI,GAAGC,IAAK9N,EAAMsD,MAAME,0BCxB9D,SAASuK,EAATvG,GAAoC,IAAXjE,EAAWiE,EAAXjE,QACtC,OACEwE,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAZ,GAAe,IAAZjH,EAAYiH,EAAZjH,MACF,OACEqH,EAAArK,EAAAsK,cAAAD,EAAArK,EAAAuN,SAAA,KACElD,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,0BAAd,aACAT,EAAArK,EAAAsK,cAAA,MAAIQ,UAAU,kBACV9H,EAAMsE,YAAYgJ,IAAI,SAAA1K,GAAK,OAC3ByE,EAAArK,EAAAsK,cAACyF,EAAD,CACEvO,IAAKoE,EAAMpB,GACXoB,MAAOA,EACPC,QAASA,EACT8B,aAAc/B,EAAMpB,eCdjB+L,cAEnB,SAAAA,EAAYjO,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3C,KAAA0Q,IACjBhO,EAAAC,OAAAE,EAAA,EAAAF,CAAA3C,KAAA2C,OAAAG,EAAA,EAAAH,CAAA+N,GAAA3N,KAAA/C,KAAMyC,KACDuD,QAAUvD,EAAMuD,QAFJtD,mFAMjB1C,KAAKyC,MAAM+B,sBAAsB,yCAIjC,OACEgG,EAAArK,EAAAsK,cAAA,OAAKQ,UAAU,aACbT,EAAArK,EAAAsK,cAAC+F,EAAD,CAAexK,QAAShG,KAAKyC,MAAMuD,kBAdE1D,IAAMsI,WCS/B+F,QACW,cAA7B/O,OAAOgP,SAASC,UAEe,UAA7BjP,OAAOgP,SAASC,UAEhBjP,OAAOgP,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACHxG,EAAArK,EAAAsK,cAACwG,EAAD,KACEzG,EAAArK,EAAAsK,cCFO,SAAgBhI,GAC7B,OACE+H,EAAArK,EAAAsK,cAAC0D,EAAA,EAAD,KACE3D,EAAArK,EAAAsK,cAACyG,EAAD,MACA1G,EAAArK,EAAAsK,cAAC0G,EAAA,EAAD,KACE3G,EAAArK,EAAAsK,cAAC0G,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxC,IACjCtE,EAAArK,EAAAsK,cAAC0G,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWtB,IACjCxF,EAAArK,EAAAsK,cAACpI,EAAc2I,SAAf,KACG,SAAAf,GAAwB,IAArB9G,EAAqB8G,EAArB9G,MAAOoH,EAAcN,EAAdM,QACT,OACEC,EAAArK,EAAAsK,cAAC0G,EAAA,EAAD,CACEC,KAAK,kBACLJ,OAAQ,SAACvO,GAAD,OAAW+H,EAAArK,EAAAsK,cAAC8G,EAAD5O,OAAA6O,OAAA,GACb/O,EADa,CAEjB+B,sBAAuB+F,EAAQ/F,sBAC/BD,OAAQpB,EAAMoB,kBDbxB,OAELkN,SAASC,eAAe,SDqHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrM,KAAK,SAAAsM,GACjCA,EAAaC,mCGnInBC,EAAOC,QAAU,CACfC,KAAMpI,iMAAYoI,MAAQ,KAE1BjN,aAAc6E","file":"static/js/main.2691d68b.chunk.js","sourcesContent":["const quoteFontPairings = [\n  {\n    body: 'Playfair Display, serif',\n    author: 'Source Sans Pro, sans-serif'\n  },\n  {\n    body:'Abril Fatface, cursive',\n    author:'Poppins, sans-serif' \n  },\n  {\n    body:'Ruda, sans-serif',\n    author:'Roboto Slab, serif' \n  },\n  {\n    body:'Cormorant Garamond, serif',\n    author:'Fira Sans, sans-serif' \n  },\n  {\n    body:'PT Sans, sans-serif',\n    author:'Playfair Display, serif' \n  }\n]\n\nexport default quoteFontPairings;\n\n// font-family: 'Source Sans Pro', sans-serif;\n// font-family: 'Playfair Display', serif;\n// font-family: 'Abril Fatface', cursive;\n// font-family: 'Poppins', sans-serif;\n// font-family: 'Ruda', sans-serif;\n// font-family: 'Roboto Slab', serif;\n// font-family: 'Cormorant Garamond', serif;\n// font-family: 'Fira Sans', sans-serif;\n// font-family: 'PT Sans', sans-serif;\n// font-family: 'Playfair Display', serif;","const IteratorServices = {\n  createIterator(iterable) {\n    return this.createIteratorObj(iterable);\n  },\n\n  *createIteratorObj(arr) {\n    for(let obj of arr) {\n      yield obj;\n    }\n  }\n}\n\nexport default IteratorServices;","const TokenServices = {\n  getTokenByKey(key) {\n    return window.localStorage.getItem(key);\n  },\n  setToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  updateToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  removeTokenByKey(key) {\n    window.localStorage.removeItem(key);\n  }\n}\n\nexport default TokenServices;","import React from 'react';\nimport quoteFontPairings from '../fonts/quoteFontPairings';\nimport IteratorServices from '../services/IteratorServices';\nimport TokenServices from'../services/TokenServices';\nimport jwt from 'jsonwebtoken';\nimport { API_BASE_URL } from '../config';\n\nconst GlobalContext = React.createContext();\n\nclass GlobalContextManager extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      quoteBackgroundImageUrls: [],\n      quoteFontPairings: [...quoteFontPairings],\n\n      currentQuote: {},\n      currentQuoteBgImageUrl: '',\n      currentQuoteFontPair: {},\n      currentQuoteSaved: false,\n\n      prevQuote: {},\n      prevQuoteBgImageUrl: '',\n      prevQuoteFontPair: {},\n      quoteHistory: [],\n\n      keepQuoteBackground: false,\n      keepQuoteFonts: false,\n      keepQuoteQuote: false,\n\n      userIsLoggedIn: false,\n      username: '',\n      userId: 0,\n      savedQuotes: [],\n\n      menuIsOpen: false,\n\n      signInError: '',\n      createAccountError: ''\n    }\n  }\n\n  //APP METHODS\n  componentDidMount() {\n    this.initializeApp();\n    const localToken = jwt.decode(TokenServices.getTokenByKey('motiv8-jwt'), {complete: true});\n    \n    if (localToken) {\n      const {\n        header,\n        payload,\n      } = localToken;\n\n      this.setState({\n        userIsLoggedIn: true,\n        userId: payload.userId,\n        username: payload.sub\n      })\n    }\n\n  }\n\n  initializeApp() {\n    let getImages = this.getBackgroundImages(30);\n    let getQuotes = this.getQuotes(30);\n    \n    Promise.all([ getQuotes, getImages ])\n      .then(values => {\n        this.fontPairItObj = IteratorServices.createIterator(this.state.quoteFontPairings);\n        this.randomizeQuote();\n      })\n      .catch(err => console.log(err));\n  }\n  //END APP METHODS\n\n  //QUOTE METHODS\n  randomizeQuote = () => {\n    this.setState({\n      currentQuoteSaved: false\n    })\n    if(!this.state.keepBackground) {\n      this.iterateBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n    if(!this.state.keepFonts) {\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n    if(!this.state.keepQuote) {\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n  \n  undoRandomizeQuote = () => {\n    if(!this.state.keepBackground) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteBgImageUrl: currentState.prevQuoteBgImageUrl,\n          prevQuoteBgImageUrl: currentState.currentQuoteBgImageUrl\n        }\n      })\n    }\n\n    if(!this.state.keepFonts) {\n      this.setState((currentState) => {\n        return {\n          fontPair: currentState.previousFontPair,\n          prevFontPair: currentState.fontPair\n        }\n      })\n    }\n\n    if(!this.state.keepQuote) {\n      this.setState((currentState) => {\n        return {\n          currentQuote: currentState.prevQuote,\n          prevQuote: currentState.currentQuote\n        }\n      })\n    }\n  }\n\n  saveQuote = (userId, getUpdatedSavedQuotes) => {\n    //TODO sends current quote config to favorites db table.\n\n    if(userId === 0) {\n      return;\n    }\n\n    const data = {\n      backgroundImageUrl: this.state.currentQuoteBgImageUrl,\n      quoteId: this.state.currentQuote.id,\n      bodyFont: this.state.currentQuoteFontPair.body,\n      authorFont: this.state.currentQuoteFontPair.author,\n      userId: userId,\n    }\n\n    fetch(`${API_BASE_URL}/savedQuotes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        getUpdatedSavedQuotes(userId);\n        this.setState({currentQuoteSaved: true })\n      }\n    });\n  }\n\n  //refactor out to 3 different toggle functions\n  handleCheckboxCheck = (e) => {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n    }\n  }\n\n  editFavoritesItem = (quote, history) => {\n    this.setState({\n      currentQuote: quote,\n      currentQuoteBgImageUrl: quote.background_image_url,\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    }, () => {\n      history.push('/quotes');\n    })\n  }\n  //END QUOTE METHODS\n\n\n  //USER METHODS\n  createAccount = (e, userInfo, createAccount) => {\n    e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      if(resJson.hasOwnProperty('error')) {\n        this.setState({\n          createAccountError: resJson.error,\n        });\n      }\n      this.loginUser(null, data)\n        .then(() => {\n          createAccount.setState({\n            loading: false,\n          });\n      });\n    })\n    .catch(err => {\n      console.error(err);\n    });\n  }\n\n  loginUser = (e, userInfo) => {\n    if(e) e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    return fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(res => {\n      if(res.error) {\n        this.setState({\n          signInError: res.error\n        });\n        return;\n      }\n      let decodedToken = jwt.decode(res.authToken);\n      TokenServices.setToken('motiv8-jwt', res.authToken);\n        this.setState({\n        userIsLoggedIn: true,\n        username: decodedToken.sub,\n        userId: decodedToken.userId,\n        savedQuotes: res.savedQuotes,\n        menuIsOpen: false\n      })\n    })\n  }\n\n  logoutUser = () => {\n    TokenServices.removeTokenByKey('motiv8-jwt');\n    this.setState({\n      userIsLoggedIn: false,\n      userId: 0,\n      username: '',\n      savedQuotes: [],\n      menuIsOpen: false\n    })\n  }\n\n  getUpdatedSavedQuotes = (username) => {\n    fetch(`${API_BASE_URL}/savedQuotes/${username}`, {\n      headers: {\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      }\n    })\n      .then(res => res.json())\n      .then(updatedQuotesList => {\n        this.setState({\n          savedQuotes: updatedQuotesList\n        })\n      })\n  }\n\n  deleteFavoritesItem = (savedQuoteId) => {\n    const data = { savedQuoteId }\n    fetch(`${API_BASE_URL}/savedQuotes/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        this.setState((currentState) => {\n          let newSavedQuotes = currentState.savedQuotes.filter((savedQuote) => {\n            if(savedQuote.id === savedQuoteId) {\n              return false;\n            }\n            else {\n              return savedQuote\n            }\n          });\n          return {\n            savedQuotes: newSavedQuotes\n          }\n        })\n      }\n    })\n  }\n  //END USER METHODS\n\n  toggleMenuIsOpen = () => {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n  //HELPER FUNCTIONS\n  getBackgroundImages(numberOfImages = 30) {\n    return fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_API_KEY}`\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      return new Promise((resolve) => {\n        this.setState({\n          quoteBackgroundImageUrls: resJson,\n        },\n        //runs after setState\n        () => {\n          this.backgroundUrlItObj = IteratorServices.createIterator(this.state.quoteBackgroundImageUrls);\n          resolve(\"backgroundUrlItObj Created\");\n        })\n      })\n    })\n  }\n\n  getQuotes(numberOfQuotes = 30) {\n    //TODO make quotes route dynamic to accept numberOfQuotes param\n    return fetch(`${API_BASE_URL}/quotes`)\n    .then(quotes => quotes.json())\n    .then(quotes => {\n      return new Promise((resolve) => {\n        this.setState({\n          quotes: quotes\n        },\n        //runs after setState\n        () => {\n          this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n          resolve(\"quoteItObj Created\");\n        })\n      });\n    });\n  }\n  \n  iterateBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteBgImageUrl: value.urls.regular,\n          prevQuoteBgImageUrl: currentState.currentQuoteBgImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n  \n  iterateFontPairing({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteFontPair: value,\n          prevQuoteFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.quoteFontPairings);\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n  }\n  \n  iterateQuote({value, done}) {\n    if(!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          prevQuote: currentState.currentQuote\n        }\n      })\n    }\n    else {\n      this.getQuotes(30);\n    }\n  }\n\n  setCreateAccountError = (message) => {\n    this.setState({\n      createAccountError: message,\n    });\n  }\n\n  setSignInError = (message) => {\n    this.setState({\n      signInError: message\n    });\n  }\n  //END HELPER FUNCTIONS\n\n  render() {\n    const globalContext = {\n      state: this.state,\n      methods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        randomizeQuote: this.randomizeQuote,\n        undoRandomizeQuote: this.undoRandomizeQuote,\n        saveQuote: this.saveQuote,\n        editFavoritesItem: this.editFavoritesItem,\n        createAccount: this.createAccount,\n        loginUser: this.loginUser,\n        logoutUser: this.logoutUser,\n        getUpdatedSavedQuotes: this.getUpdatedSavedQuotes,\n        deleteFavoritesItem: this.deleteFavoritesItem,\n        toggleMenuIsOpen: this.toggleMenuIsOpen,\n        setCreateAccountError: this.setCreateAccountError,\n        setSignInError: this.setSignInError\n      }\n    }\n  \n    return (\n      <GlobalContext.Provider value={globalContext}>\n        {this.props.children}\n      </GlobalContext.Provider>\n    );\n  }\n}\n\nexport { GlobalContext , GlobalContextManager };\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      errorMessage: '',\n    }\n  }\n\n  componentWillUnmount() {\n    let { methods } = this.context\n    methods.setSignInError('');\n  }\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      default:\n          console.error(\"onChange id not found in login form\");\n    }\n  }\n\n  handleSubmit(e, methods) {\n    if(!this.state.username || !this.state.password) {\n      this.setState({\n        errorMessage: \"Please fill enter a username and password.\"\n      })\n    }\n    methods.loginUser(e, this.state);\n  }\n\n  render() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({methods, state}) => {\n          return (\n            <div>\n            <div className=\"demo-credentials\">\n              <h5>Demo Credentials</h5>\n              <div>Login: Demo</div>\n              <div>Pass: Demo123</div>\n            </div>\n            {state.signInError\n              ? <div className=\"error-message\">{state.signInError}</div>\n              : undefined \n            }\n            <form className=\"input-form\" onSubmit={(e) => this.handleSubmit(e, methods)}>\n              <label className=\"input-form__label\" htmlFor=\"username-input\">Username</label>\n              <input \n                id=\"username-input\"\n                type=\"text\"\n                onChange={(e) => this.handleTextInput(e)}\n                required/>\n\n              <label className=\"input-form__label\" htmlFor=\"password-input\">Password</label>\n              <input \n                id=\"password-input\" \n                type=\"password\" \n                onChange={(e) => this.handleTextInput(e)}\n                required />\n              {this.state.errorMessage\n              ? <div className=\"error-message\">{this.state.errorMessage}</div>\n              : \"\"\n              }\n              <input className=\"input-form__submit\" type=\"submit\" value=\"Sign In\"/>\n            </form>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n\nLoginForm.contextType = GlobalContext;","import React from 'react'\n\nexport default function LoadingSpinner() {\n  return (\n      <svg \n        width=\"200px\" \n        height=\"200px\" \n        xmlns=\"http://www.w3.org/2000/svg\" \n        viewBox=\"0 0 100 100\" \n        preserveAspectRatio=\"xMidYMid\" \n        className=\"lds-rolling\" \n        style={{shapeRendering: 'auto',\n                animationPlayState: 'running', \n                animationDelay: '0s', \n                background: 'none'}}>\n          <circle \n            cx=\"50\" \n            cy=\"50\" \n            fill=\"none\" \n            ng-attr-stroke=\"{{config.color}}\" \n            ng-attr-stroke-width=\"{{config.width}}\" \n            ng-attr-r=\"{{config.radius}}\" \n            ng-attr-stroke-dasharray=\"{{config.dasharray}}\" \n            stroke=\"#348ac7\" \n            stroke-width=\"10\" \n            r=\"35\" \n            stroke-dasharray=\"164.93361431346415 56.97787143782138\" \n            style={{animationPlayState: 'running', animationDelay: '0s'}} \n            transform=\"rotate(245.472 50 50)\">\n            <animateTransform \n              attributeName=\"transform\" \n              type=\"rotate\" \n              calcMode=\"linear\" \n              values=\"0 50 50;360 50 50\" \n              keyTimes=\"0;1\" \n              dur=\"1s\"\n              begin=\"0s\" \n              repeatCount=\"indefinite\" \n              style={{animationPlayState: 'running', animationDelay: '0s'}}>\n            </animateTransform>\n          </circle>\n          </svg>\n  )\n}\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport LoadingSpinner from '../../components/Loading/LoadingSpinner';\n\nexport default class CreateAccountForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      passwordConfirm: '',\n      errorMessage: '',\n      loading: false,\n    }\n\n  }\n\n  componentWillUnmount() {\n    let { methods } = this.context;\n    methods.setCreateAccountError('');\n  }\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'create-username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'create-password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      case 'create-password-confirm-input':\n        this.setState({\n          passwordConfirm: e.target.value\n        })\n        break;\n      default:\n        console.error(\"onChange id not found in create account form\");\n    }\n  }\n\n  handleSubmit(e, methods) {\n    e.preventDefault();\n    let { password, passwordConfirm } = this.state\n    if(password !== passwordConfirm) {\n      this.setState({\n        errorMessage: \"Passwords Must Match\"\n      });\n      return;\n    } \n    this.setState({\n      loading: true,\n    }, () => {\n      methods.createAccount(e, this.state, this);\n    });\n\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ methods, state }) => {\n          return (\n            <>\n              <form \n                className=\"create-account-form\" \n                onSubmit={(e) => {\n                  this.handleSubmit(e, methods);\n                }}>\n                {this.state.loading\n                ? <LoadingSpinner />\n                : <>\n                  {state.createAccountError\n                    ?<div className=\"error-message\">{state.createAccountError}</div>\n                    :undefined\n                  }\n                  <label className=\"create-account-form__label\" htmlFor=\"username-input\">Username</label>\n                  <input \n                    id=\"create-username-input\"\n                    type=\"text\"\n                    onChange={(e) => this.handleTextInput(e)}\n                    required/>\n\n                  <label className=\"create-account-form__label\" htmlFor=\"password-input\">Password</label>\n                  <input \n                    id=\"create-password-input\" \n                    type=\"password\" \n                    onChange={(e) => this.handleTextInput(e)}\n                    required />\n\n                  <label className=\"create-account-form__label\" htmlFor=\"password-confirm-input\">Confirm Password</label>\n                  <input \n                    id=\"create-password-confirm-input\" \n                    type=\"password\" \n                    onChange={(e) => this.handleTextInput(e)}\n                    required/>\n                  </>\n                }\n                {this.state.errorMessage\n                ? <div className=\"error-message\">{this.state.errorMessage}</div>\n                : \"\"}\n                <input className=\"create-account-form__submit\" type=\"submit\" value=\"Create Account\"/>\n              </form>\n            </>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  };\n}\n\nCreateAccountForm.contextType = GlobalContext;\n","import React from 'react'\nimport LoginForm from './LoginForm';\nimport CreateAccountForm from './CreateAccountForm';\n\nexport default class AccountAccessForms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inCreateAccountMode: false\n    }\n  }\n\n  setInCreateAccountMode = (bool) => {\n    this.setState({\n      inCreateAccountMode: bool\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"account-access-forms\">\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? '' : 'highlight'}`} \n          onClick={() => this.setInCreateAccountMode(false)}>\n            Sign In\n        </button>\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? 'highlight' : ''}`} \n          onClick={() => this.setInCreateAccountMode(true)}>\n            Create Account\n        </button>\n        <div className=\"account-access-forms__selected-form\">\n          {this.state.inCreateAccountMode ? \n            <CreateAccountForm setInCreateAccountMode={this.setInCreateAccountMode}/>\n            :\n            <LoginForm />}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function UserMenu(props) {\n\n  return (\n    <GlobalContext.Consumer>\n      {({ state, methods }) => {\n          return (\n            <ul className=\"user-menu\">\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={`/user/${state.username}`} \n                onClick={() => methods.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Profile\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => methods.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Quote Generator\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => methods.logoutUser()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Log Out\n                </li>\n              </NavLink>\n            </ul>\n          )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react';\nimport AccountAccessForms from './AccountAccessForms';\nimport UserMenu from './UserMenu';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class Menu extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      menuIsOpen: false,\n      userIsLoggedIn: true\n    }\n    this.toggleMenuIsOpen = this.toggleMenuIsOpen.bind(this);\n  }\n\n  toggleMenuIsOpen() {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state, methods }) => {\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={methods.toggleMenuIsOpen}>\n                    <span>{ state.menuIsOpen ? 'Close' : 'Menu' }</span>\n                  </button>\n                  <div className=\"menu__greeting\">\n                    { state.userIsLoggedIn ? `Welcome ${state.username}`: ''}\n                  </div>\n                    { state.menuIsOpen ? \n                        state.userIsLoggedIn ? <UserMenu /> : <AccountAccessForms />\n                        :\n                        ''\n                    }\n                </header>\n              </div>\n            )\n          }\n        }\n      </GlobalContext.Consumer>\n    )\n  }    \n}\n","import React, {useState} from 'react'\n\nexport default function HeroImage() {\n\n  let splashQuotes = [{\n    quote: `“Do not fear the winds of adversity. Remember, a kite \n    rises against the wind rather than with it.”`,\n    author: 'Unknown'\n  }]\n\n  const [currentQuote, setCurrentQuote] = useState(splashQuotes[0]);\n  \n  return (\n    <div className=\"landing-page__splash\">\n      <h1 className=\"landing-page__header\">Motiv8</h1>  \n      <div className=\"splash-animation\">\n        <div className=\"splash-quote\">{currentQuote.quote}</div>\n        <div className=\"splash-quote-author\">{currentQuote.author}</div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport HeroImage from '../components/LandingPage/HeroImage'\n\n\nexport default function LandingPage({ history }) {\n  return (\n    <div className=\"landing-page-container\">\n      <HeroImage />\n      <main className=\"landing-page__main-content\">\n        <div className=\"landing-page__copy\">\n          <h3>Motiv8 is a random quote generator.</h3>\n          <ul className=\"landing-page__list\">\n            <li className=\"landing-page__list-item\">\n              <i class=\"fas fa-palette landing-page__icon\"></i>\n              <span className=\"landing-page__list-copy\">Create unique quote, font, and background image pairings.</span>\n            </li>\n            <li className=\"landing-page__list-item\">\n              <i class=\"fas fa-user-circle landing-page__icon\"></i>\n              <span className=\"landing-page__list-copy\">Create an account and save your favorite combos.</span>\n            </li>\n          </ul> \n        </div>\n      </main>\n      <button className=\"btn get-started-button\" onClick={() => history.push('/quotes')}>Get Started</button>\n\n    </div>\n  )\n}\n","import React from 'react';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class QuoteDisplay extends React.Component {\n  state = {\n    loading: false,\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state }) => {\n          const dynamicBackgroundStyles = {\n            backgroundSize: 'cover',\n            backgroundPosition: 'center center',\n            backgroundImage: `url(${state.currentQuoteBgImageUrl})`,\n          }\n\n          const dynamicBodyFont = {\n            fontFamily: state.currentQuoteFontPair['body']\n          }\n      \n          const dynamicAuthorFont = {\n            fontFamily: state.currentQuoteFontPair['author']\n          }\n\n          return (\n            <div className=\"quote-display\"style={dynamicBackgroundStyles}>\n              <div className=\"quote-backdrop\">\n                <div className=\"quote-body\" style={dynamicBodyFont}>{state.currentQuote.quote}</div>\n                <div className=\"quote-author\" style={dynamicAuthorFont}>{state.currentQuote.author}</div>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSquare, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\n\nexport default function QuoteControls() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({ methods, state }) => {\n          const { \n            keepBackground,\n            keepFonts,\n            keepQuote,\n          }  = state\n\n          const iconSize = 'lg';\n          \n          return (\n            <div className=\"quote-controls-container\">\n              <h5 className=\"quote-controls-heading\">Randomize Options</h5>\n              <div className=\"quote-controls\">\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-quote-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-quote-checkbox\">\n                  <div>\n                    {keepQuote ? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Quote</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-fonts-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-fonts-checkbox\">\n                  <div>\n                    {keepFonts? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/>\n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Fonts</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-background-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-background-checkbox\">\n                  <div>\n                    {keepBackground? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Background</span>\n                </label>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  \n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function QuoteNav() {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods, state }) => {\n\n        let {\n          currentQuoteSaved,\n          userIsLoggedIn,\n          prevQuote,\n          userId\n        } = state\n\n        let {\n          getUpdatedSavedQuotes\n        } = methods\n\n\n        return (\n          <div className=\"quote-nav-container\">\n            <button className=\"quote-nav__button randomize-button\" onClick={() => methods.randomizeQuote()}>Randomize</button>\n            <button\n              disabled={prevQuote.quote ? false : 'disabled'}\n              className={`quote-nav__button undo-button ${prevQuote.quote ? '' : 'button-disabled'}`} \n              onClick={() => methods.undoRandomizeQuote()}>\n                Undo\n            </button>\n            <button \n              disabled={userIsLoggedIn ? false : 'disabled'}\n              className={\n                `quote-nav__button save-button \n                ${currentQuoteSaved ? 'save-success' : ''}\n                ${userIsLoggedIn ? '' : 'button-disabled'}`\n              } \n              onClick={() => methods.saveQuote(userId, getUpdatedSavedQuotes)}\n              >\n                Save\n              {userIsLoggedIn\n                ? ''\n                : <div className=\"save-button__instructions\">Log in to save quotes</div>\n              }\n            </button>\n          </div>\n        )\n      }}\n    </GlobalContext.Consumer>  \n  )\n}\n","import React from 'react'\nimport QuoteDisplay from '../components/QuoteEditorPage/QuoteDisplay';\nimport QuoteControls from '../components/QuoteEditorPage/QuoteControls';\nimport QuoteNav from '../components/QuoteEditorPage/QuoteNav';\n\nexport default function QuoteEditorPage() {\n  return (\n    <div className=\"container\">\n      <QuoteControls />\n      <QuoteDisplay />\n      <QuoteNav />\n    </div>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default function FavoritesListItem(props) {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods }) => {\n\n        const quoteFont={\n          fontFamily: props.quote.bodyfont\n        }\n\n        const authorFont = {\n          fontFamily: props.quote.authorfont,\n        }\n\n        return (\n          <li className=\"favorites-list-item\">\n            <div>\n              <p style={quoteFont}>{props.quote.quote}</p>\n              <p style={authorFont}>{props.quote.author}</p>\n              {/* <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.editFavoritesItem(props.quote, props.history)}>Edit</button> */}\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.deleteFavoritesItem(props.savedQuoteId)}>Delete</button>\n            </div>\n            <img className=\"favorites-list-item-img\" alt='' src={props.quote.background_image_url}></img>\n          </li>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport FavoritesListItem from './FavoritesListItem';\n\nexport default function FavoritesList({ history }) {\n  return (\n    <GlobalContext.Consumer>\n      {({ state }) => {\n        return (\n          <>\n            <h3 className=\"favorites-list-heading\">Favorites</h3>\n            <ul className=\"favorites-list\">\n              { state.savedQuotes.map(quote => \n                <FavoritesListItem \n                  key={quote.id} \n                  quote={quote} \n                  history={history} \n                  savedQuoteId={quote.id}/>) }\n            </ul>\n          </>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport FavoritesList from '../components/UserProfilePage/FavoritesList.js';\n\nexport default class UserProfilePage extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.history = props.history\n  }\n\n  componentDidMount() {\n    this.props.getUpdatedSavedQuotes('Demo');\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <FavoritesList history={this.props.history}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { GlobalContextManager } from './contexts/GlobalContextManager';\nimport Router from './router/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n      <GlobalContextManager>\n        <Router />\n      </GlobalContextManager>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Menu from '../components/Header/Menu';\nimport LandingPage from '../pages/LandingPage';\nimport QuoteEditorPage from '../pages/QuoteEditorPage';\nimport UserProfilePage from '../pages/UserProfilePage';\nimport { GlobalContext } from '../contexts/GlobalContextManager';\n\nexport default function Router(props) {\n  return (\n    <BrowserRouter>\n      <Menu />\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path=\"/quotes\" component={QuoteEditorPage} />\n        <GlobalContext.Consumer>\n          {({ state, methods }) => {\n            return (\n              <Route \n                path=\"/user/:username\" \n                render={(props) => <UserProfilePage\n                  {...props}\n                  getUpdatedSavedQuotes={methods.getUpdatedSavedQuotes}\n                  userId={state.userId}/>} \n                />\n            )\n          }}\n        </GlobalContext.Consumer>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","module.exports = {\n  PORT: process.env.PORT || 8080,\n  // other stuff\n  API_BASE_URL: process.env.REACT_APP_API_BASE_URL || \n  \"http://localhost:8000/api\"\n};"],"sourceRoot":""}