{"version":3,"sources":["fonts/fontPairings.js","services/IteratorServices.js","services/TokenServices.js","contexts/GlobalContextManager.js","components/Header/LoginForm.js","components/Header/CreateAccountForm.js","components/Header/AccountAccessForms.js","components/Header/UserMenu.js","components/Header/Menu.js","pages/LandingPage.js","components/QuoteEditorPage/QuoteDisplay.js","components/QuoteEditorPage/QuoteControls.js","components/QuoteEditorPage/QuoteNav.js","pages/QuoteEditorPage.js","components/UserProfilePage/FavoritesListItem.js","components/UserProfilePage/FavoritesList.js","pages/UserProfilePage.js","serviceWorker.js","index.js","router/Router.js","config.js"],"names":["fontPairings","body","author","IteratorServices","createIterator","iterable","this","createIteratorObj","regenerator_default","a","mark","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","return","finish","stop","TokenServices","getTokenByKey","key","window","localStorage","getItem","setToken","data","setItem","updateToken","removeTokenByKey","removeItem","GlobalContext","React","createContext","GlobalContextManager","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","quotes","currentQuote","backgroundImageUrls","toConsumableArray","backgroundImageUrl","fontPair","previousBackgroundImageUrl","previousFontPair","keepBackground","keepFonts","keepQuote","isLoggedIn","username","userId","savedQuotes","handleRandomize","bind","assertThisInitialized","handleUndo","handleCheckboxCheck","handleSaveQuote","handleFavoritesListItemClick","handleCreateAccountSubmit","handleLogin","handleLogout","getUpdatedSavedQuotes","handleDeleteFavoritesListItem","initializeApp","_jwt$decode","jwt","decode","sub","setState","_this2","getImages","getBackgroundImages","getQuotes","Promise","all","then","values","fontPairItObj","catch","err","console","log","iterateBackgroundUrl","backgroundUrlItObj","iterateFontPairing","iterateQuote","quoteItObj","currentState","previousQuote","quoteId","id","bodyFont","authorFont","fetch","concat","API_BASE_URL","method","headers","Content-Type","Authorization","JSON","stringify","res","e","target","quote","history","backgroundimageurl","push","userInfo","_this3","preventDefault","password","ok","json","resJson","_this4","content-type","decodedToken","authToken","subject","_this5","updatedQuotesList","_this6","filter","savedQuote","_this7","numberOfImages","arguments","length","process","resolve","_this8","_ref","urls","regular","_ref2","_ref3","globalContext","methods","react_default","createElement","Provider","children","Component","LoginForm","error","Consumer","className","onSubmit","htmlFor","type","onChange","handleTextInput","CreateAccountForm","passwordConfirm","Fragment","setIsInCreateAccountModeFalse","AccountAccessForms","isInCreateAccountMode","signInBg","createAccountBg","onClick","setIsInCreateAccountModeTrue","CreateAccountForm_CreateAccountForm","LoginForm_LoginForm","UserMenu","react_router_dom","to","toggleMenuIsOpen","Menu","menuIsOpen","userIsLoggedIn","AccountAccessForms_AccountAccessForms","LandingPage","QuoteDisplay","dynamicBackgroundStyles","backgroundSize","backgroundPosition","backgroundImage","dynamicBodyFont","fontFamily","dynamicAuthorFont","style","QuoteControls","index_es","icon","faCheckSquare","size","faSquare","QuoteNav","QuoteEditorPage","QuoteDisplay_QuoteDisplay","FavoritesListItem","quoteFont","bodyfont","authorfont","savedQuoteId","alt","src","FavoritesList","favoritesList","map","UserProfilePage","Boolean","location","hostname","match","ReactDOM","render","GlobalContextManager_GlobalContextManager","Menu_Menu","react_router","path","exact","component","UserProfilePage_UserProfilePage","assign","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","PORT","REACT_APP_API_BASE_URL"],"mappings":"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","file":"static/js/main.18ae77af.chunk.js","sourcesContent":["const fontPairings = [\n  {\n    body: 'Playfair Display, serif',\n    author: 'Source Sans Pro, sans-serif'\n  },\n  {\n    body:'Abril Fatface, cursive',\n    author:'Poppins, sans-serif' \n  },\n  {\n    body:'Ruda, sans-serif',\n    author:'Roboto Slab, serif' \n  },\n  {\n    body:'Cormorant Garamond, serif',\n    author:'Fira Sans, sans-serif' \n  },\n  {\n    body:'PT Sans, sans-serif',\n    author:'Playfair Display, serif' \n  }\n]\n\nexport default fontPairings;\n\n// font-family: 'Source Sans Pro', sans-serif;\n// font-family: 'Playfair Display', serif;\n// font-family: 'Abril Fatface', cursive;\n// font-family: 'Poppins', sans-serif;\n// font-family: 'Ruda', sans-serif;\n// font-family: 'Roboto Slab', serif;\n// font-family: 'Cormorant Garamond', serif;\n// font-family: 'Fira Sans', sans-serif;\n// font-family: 'PT Sans', sans-serif;\n// font-family: 'Playfair Display', serif;","const IteratorServices = {\n  createIterator(iterable) {\n    return this.createIteratorObj(iterable);\n  },\n\n  *createIteratorObj(arr) {\n    for(let obj of arr) {\n      yield obj;\n    }\n  }\n}\n\nexport default IteratorServices;","const TokenServices = {\n  getTokenByKey(key) {\n    return window.localStorage.getItem(key);\n  },\n  setToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  updateToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  removeTokenByKey(key) {\n    window.localStorage.removeItem(key);\n  }\n}\n\nexport default TokenServices;","import React from 'react';\nimport fontPairings from '../fonts/fontPairings';\nimport IteratorServices from '../services/IteratorServices';\nimport TokenServices from'../services/TokenServices';\nimport jwt from 'jsonwebtoken';\nimport { API_BASE_URL } from '../config';\n\nconst GlobalContext = React.createContext();\n\nclass GlobalContextManager extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      //quote info\n      quotes: [],\n      currentQuote: '',\n      backgroundImageUrls: [],\n      fontPairings: [...fontPairings],\n      backgroundImageUrl: '',\n      fontPair: {},\n      previousBackgroundImageUrl: '',\n      previousFontPair: {},\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false,\n\n      //user info\n      isLoggedIn: false,\n      username: '',\n      userId: 0,\n      savedQuotes: []\n    }\n\n    this.handleRandomize = this.handleRandomize.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleCheckboxCheck = this.handleCheckboxCheck.bind(this);\n    this.handleSaveQuote = this.handleSaveQuote.bind(this);\n    this.handleFavoritesListItemClick = this.handleFavoritesListItemClick.bind(this);\n\n    //user info methods\n    this.handleCreateAccountSubmit = this.handleCreateAccountSubmit.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.getUpdatedSavedQuotes = this.getUpdatedSavedQuotes.bind(this);\n    this.handleDeleteFavoritesListItem = this.handleDeleteFavoritesListItem.bind(this);\n  }\n\n  //APP METHODS\n  componentDidMount() {\n    this.initializeApp();\n    const isLoggedIn = TokenServices.getTokenByKey('motiv8-jwt');\n    if(isLoggedIn) {\n      const {\n        sub: username,\n        userId,\n      } = jwt.decode(isLoggedIn);\n      \n      this.setState({\n        isLoggedIn: true,\n        username: username,\n        userId: userId\n      })\n    }\n\n  }\n\n  initializeApp() {\n    let getImages = this.getBackgroundImages(30);\n    let getQuotes = this.getQuotes(30);\n    \n    Promise.all([ getQuotes, getImages ])\n      .then(values => {\n        this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n        this.handleRandomize();\n      })\n      .catch(err => console.log(err));\n  }\n  //END APP METHODS\n\n  \n  //QUOTE METHODS\n  handleRandomize() {\n    if(!this.state.keepBackground) {\n      this.iterateBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n    if(!this.state.keepFonts) {\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n    if(!this.state.keepQuote) {\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n  \n  handleUndo() {\n    if(!this.state.keepBackground) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: currentState.previousBackgroundImageUrl,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n\n    if(!this.state.keepFonts) {\n      this.setState((currentState) => {\n        return {\n          fontPair: currentState.previousFontPair,\n          previousFontPair: currentState.fontPair\n        }\n      })\n    }\n\n    if(!this.state.keepQuote) {\n      this.setState((currentState) => {\n        return {\n          currentQuote: currentState.previousQuote,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n  }\n\n  handleSaveQuote(userId, getUpdatedSavedQuotes) {\n    //TODO sends current quote config to favorites db table.\n\n    if(userId === 0) {\n      return;\n    }\n\n    const data = {\n      backgroundImageUrl: this.state.backgroundImageUrl,\n      quoteId: this.state.currentQuote.id,\n      bodyFont: this.state.fontPair.body,\n      authorFont: this.state.fontPair.author,\n      userId: userId,\n    }\n\n    fetch(`${API_BASE_URL}/savedQuotes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      getUpdatedSavedQuotes(userId);\n    })\n  }\n\n\n  handleCheckboxCheck(e) {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n    }\n  }\n\n  handleFavoritesListItemClick(quote, history) {\n    this.setState({\n      currentQuote: quote,\n      backgroundImageUrl: quote.backgroundimageurl,\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    }, () => {\n      history.push('/quotes');\n    })\n  }\n  //END QUOTE METHODS\n\n\n  //USER METHODS\n\n  handleCreateAccountSubmit(e, userInfo) {\n    e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        return res.json();\n      }\n    })\n    .then(resJson => {\n      this.handleLogin(null, data);\n    })\n  }\n\n  handleLogin(e, userInfo) {\n    if(e) {\n      e.preventDefault();\n    }\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(res => {\n      //TODO build token services for crud on tokens to refresh\n      let decodedToken = jwt.decode(res.authToken);\n      \n      TokenServices.setToken('motiv8-jwt', res.authToken);\n      this.setState({\n        isLoggedIn: true,\n        username: decodedToken.subject,\n        userId: decodedToken.userId,\n        savedQuotes: res.savedQuotes\n      })\n\n      \n    })\n  }\n\n  handleLogout() {\n    TokenServices.removeTokenByKey('motiv8-jwt');\n    this.setState({\n      isLoggedIn: false,\n      userId: 0,\n      username: '',\n      savedQuotes: []\n    })\n  }\n\n  getUpdatedSavedQuotes(userId) {\n    fetch(`${API_BASE_URL}/savedQuotes/${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      }\n    })\n      .then(res => res.json())\n      .then(updatedQuotesList => {\n        this.setState({\n          savedQuotes: updatedQuotesList\n        })\n      })\n  }\n\n  handleDeleteFavoritesListItem(quoteId) {\n    const data = { quoteId }\n    fetch(`${API_BASE_URL}/savedQuotes/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        this.setState((currentState) => {\n          let newSavedQuotes = currentState.savedQuotes.filter((savedQuote) => {\n            if(savedQuote.id === quoteId) {\n              return;\n            }\n            else {\n              return savedQuote\n            }\n          });\n          return {\n            savedQuotes: newSavedQuotes\n          }\n        })\n      }\n    })\n  }\n  //END USER METHODS\n  \n  //HELPER FUNCTIONS\n\n  getBackgroundImages(numberOfImages = 30) {\n    return fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_API_KEY}`\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      return new Promise((resolve) => {\n        this.setState({\n          backgroundImageUrls: resJson,\n        },\n        //runs after setState\n        () => {\n          this.backgroundUrlItObj = IteratorServices.createIterator(this.state.backgroundImageUrls);\n          resolve(\"backgroundUrlItObj Created\");\n        })\n      })\n    })\n  }\n\n  getQuotes(numberOfQuotes = 30) {\n    //TODO make quotes route dynamic to accept numberOfQuotes param\n    return fetch(`${API_BASE_URL}/quotes`)\n    .then(quotes => quotes.json())\n    .then(quotes => {\n      return new Promise((resolve) => {\n        this.setState({\n          quotes: quotes\n        },\n        //runs after setState\n        () => {\n          this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n          resolve(\"quoteItObj Created\");\n        })\n      });\n    });\n  }\n  \n  iterateBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: value.urls.regular,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n  \n  iterateFontPairing({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          fontPair: value,\n          previousFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n  }\n  \n  iterateQuote({value, done}) {\n    if(!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n    else {\n      this.getQuotes(30);\n    }\n  }\n  //END HELPER FUNCTIONS\n\n\n  render() {\n\n    const globalContext = {\n      state: this.state,\n      methods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        handleRandomize: this.handleRandomize,\n        handleUndo: this.handleUndo,\n        handleSaveQuote: this.handleSaveQuote,\n        handleFavoritesListItemClick: this.handleFavoritesListItemClick,\n        handleCreateAccountSubmit: this.handleCreateAccountSubmit,\n        handleLogin: this.handleLogin,\n        handleLogout: this.handleLogout,\n        getUpdatedSavedQuotes: this.getUpdatedSavedQuotes,\n        handleDeleteFavoritesListItem: this.handleDeleteFavoritesListItem\n      }\n    }\n\n        \n    return (\n      <GlobalContext.Provider value={globalContext}>\n        {this.props.children}\n      </GlobalContext.Provider>\n    );\n  }\n}\nexport { GlobalContext , GlobalContextManager };\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: ''\n    }\n  }\n\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      default:\n          console.error(\"onChange id not found in login form\");\n    }\n  }\n\n  render() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({methods}) => {\n          return (\n            <div>\n            <form className=\"input-form\" onSubmit={(e) => methods.handleLogin(e, this.state)}>\n              <label className=\"input-form__label\" htmlFor=\"username-input\">Username</label>\n              <input \n                id=\"username-input\"\n                type=\"text\"\n                onChange={(e) => this.handleTextInput(e)}/>\n\n              <label className=\"input-form__label\" htmlFor=\"password-input\">Password</label>\n              <input \n                id=\"password-input\" \n                type=\"password\" \n                onChange={(e) => this.handleTextInput(e)} />\n\n              <input className=\"input-form__submit\" type=\"submit\" value=\"Sign In\"/>\n            </form>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class CreateAccountForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      passwordConfirm: '',\n    }\n\n  }\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'create-username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'create-password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      case 'create-password-confirm-input':\n        this.setState({\n          passwordConfirm: e.target.value\n        })\n        break;\n      default:\n        console.error(\"onChange id not found in create account form\");\n    }\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ methods }) => {\n          return (\n            <>\n              <form \n                className=\"create-account-form\" \n                onSubmit={(e) => {\n                  methods.handleCreateAccountSubmit(e, this.state);\n                  this.props.setIsInCreateAccountModeFalse();\n                }}>\n\n                <label className=\"create-account-form__label\" htmlFor=\"username-input\">Username</label>\n                <input \n                  id=\"create-username-input\"\n                  type=\"text\"\n                  onChange={(e) => this.handleTextInput(e)}/>\n\n                <label className=\"create-account-form__label\" htmlFor=\"password-input\">Password</label>\n                <input \n                  id=\"create-password-input\" \n                  type=\"password\" \n                  onChange={(e) => this.handleTextInput(e)} />\n\n                <label className=\"create-account-form__label\" htmlFor=\"password-confirm-input\">Confirm Password</label>\n                <input \n                  id=\"create-password-confirm-input\" \n                  type=\"password\" \n                  onChange={(e) => this.handleTextInput(e)}/>\n\n                <input className=\"create-account-form__submit\" type=\"submit\" value=\"Create Account\"/>\n              </form>\n            </>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  };\n}\n","import React from 'react'\nimport LoginForm from './LoginForm';\nimport CreateAccountForm from './CreateAccountForm';\n\nexport default class AccountAccessForms extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isInCreateAccountMode: false\n    }\n\n    this.setIsInCreateAccountModeFalse = this.setIsInCreateAccountModeFalse.bind(this);\n  }\n\n\n  setIsInCreateAccountModeTrue() {\n    this.setState({\n      isInCreateAccountMode: true\n    })\n  }\n\n  setIsInCreateAccountModeFalse() {\n    this.setState({\n      isInCreateAccountMode: false\n    })\n  }\n\n  render() {\n\n      let signInBg, createAccountBg;\n      if(this.state.isInCreateAccountMode) {\n        signInBg = '';\n        createAccountBg = 'highlight';\n      }\n      else {\n        signInBg = 'highlight';\n        createAccountBg = '';\n      }\n\n\n      return (\n        <div className=\"account-access-forms\">\n          <button className={`account-access-forms__button ${signInBg}`} onClick={() => this.setIsInCreateAccountModeFalse()}>Sign In</button>\n          <button className={`account-access-forms__button ${createAccountBg}`} onClick={() => this.setIsInCreateAccountModeTrue()}>Create Account</button>\n          <div className=\"account-access-forms__selected-form\">\n            {this.state.isInCreateAccountMode? \n              <CreateAccountForm setIsInCreateAccountModeFalse={this.setIsInCreateAccountModeFalse}/>\n              :\n              <LoginForm />}\n          </div>\n        </div>\n      )\n\n  }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function UserMenu(props) {\n\n  return (\n    <GlobalContext.Consumer>\n      {({ state, methods }) => {\n          return (\n            <ul className=\"user-menu\">\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={`/user/${state.username}`} \n                onClick={() => props.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Profile\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => props.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Quote Generator\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/'} \n                onClick={() => methods.handleLogout()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Log Out\n                </li>\n              </NavLink>\n            </ul>\n          )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react';\nimport AccountAccessForms from './AccountAccessForms';\nimport UserMenu from './UserMenu';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class Menu extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      menuIsOpen: false,\n      userIsLoggedIn: true\n    }\n\n    this.toggleMenuIsOpen = this.toggleMenuIsOpen.bind(this);\n  }\n\n  toggleMenuIsOpen() {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state }) => {\n          if(this.state.menuIsOpen) {\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={this.toggleMenuIsOpen}>X</button>\n                  <div className=\"menu__greeting\">{state.isLoggedIn? `Welcome ${state.username}`: ''}</div>\n                  {state.isLoggedIn? <UserMenu toggleMenuIsOpen={this.toggleMenuIsOpen}/> : <AccountAccessForms />}\n                </header>\n              </div>\n            )\n          }\n          else {\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={this.toggleMenuIsOpen}>Menu</button>\n                  <div className=\"menu__greeting\">{state.isLoggedIn? `Welcome ${state.username}`: ''}</div>\n                </header>\n              </div>\n            )\n          }\n        }\n        }\n      </GlobalContext.Consumer>\n    )\n  }    \n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function LandingPage() {\n  return (\n    <div className=\"container landing-page-container\">\n      <h1 className=\"landing-page__header\">Welcome to Motiv8</h1>  \n        <main>\n          <h2 className=\"landing-page__subheader\">Customize your inspiration</h2>\n          <div>\n            Motiv8 is a random quote generator.\n            <ul>\n              <li>Users can create unique quote, font, and background image pairings.</li>\n              <li>If a user chooses to create an account they will have the ability to save their favorite quotes to their profile.</li>\n            </ul> \n          </div>\n          <Link to={'/quotes'}>\n            <button className=\"get-started-button\">Get Started!</button>\n          </Link>\n        </main>\n    </div>\n  )\n}\n","import React from 'react';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class QuoteDisplay extends React.Component {\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state }) => {\n          const dynamicBackgroundStyles = {\n            backgroundSize: 'cover',\n            backgroundPosition: 'center center',\n            backgroundImage: `url(${state.backgroundImageUrl})`,\n          }\n\n          const dynamicBodyFont = {\n            fontFamily: state.fontPair['body']\n          }\n      \n          const dynamicAuthorFont = {\n            fontFamily: state.fontPair['author']\n          }\n\n          return (\n            <div className=\"quote-display\"style={dynamicBackgroundStyles}>\n              <div className=\"quote-backdrop\">\n                <div className=\"quote-body\" style={dynamicBodyFont}>{state.currentQuote.quote}</div>\n                <div className=\"quote-author\" style={dynamicAuthorFont}>{state.currentQuote.author}</div>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSquare, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\n\nexport default function QuoteControls() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({ methods, state }) => {\n\n\n\n          const { \n            keepBackground,\n            keepFonts,\n            keepQuote,\n          }  = state\n\n          const iconSize = 'lg';\n          \n          return (\n            <div className=\"quote-controls-container\">\n              <h5 className=\"quote-controls-heading\">Randomize Options</h5>\n              <div className=\"quote-controls\">\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-quote-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-quote-checkbox\">\n                  <div>\n                    {keepQuote ? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Quote</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-fonts-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-fonts-checkbox\">\n                  <div>\n                    {keepFonts? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/>\n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Fonts</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-background-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-background-checkbox\">\n                  <div>\n                    {keepBackground? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Background</span>\n                </label>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  \n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function QuoteNav() {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods, state }) => {\n        return (\n          <div className=\"quote-nav-container\">\n            <button className=\"quote-nav__button randomize-button\" onClick={() => methods.handleRandomize()}>Randomize</button>\n            <button className=\"quote-nav__button undo-button\" onClick={() => methods.handleUndo()}>Undo</button>\n            <button className=\"quote-nav__button save-button\" onClick={() => methods.handleSaveQuote(state.userId, methods.getUpdatedSavedQuotes)}>Save</button>\n          </div>\n        )\n      }}\n    </GlobalContext.Consumer>  \n  )\n}\n","import React from 'react'\nimport QuoteDisplay from '../components/QuoteEditorPage/QuoteDisplay';\nimport QuoteControls from '../components/QuoteEditorPage/QuoteControls';\nimport QuoteNav from '../components/QuoteEditorPage/QuoteNav';\n\nexport default function QuoteEditorPage() {\n  return (\n    <div className=\"container\">\n      <QuoteControls />\n      <QuoteDisplay />\n      <QuoteNav />\n    </div>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default function FavoritesListItem(props) {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods }) => {\n\n        const quoteFont={\n          fontFamily: props.quote.bodyfont\n        }\n\n        const authorFont = {\n          fontFamily: props.quote.authorfont,\n        }\n\n\n        return (\n          <li className=\"favorites-list-item\">\n            <div>\n              <p style={quoteFont}>{props.quote.quote}</p>\n              <p style={authorFont}>{props.quote.author}</p>\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.handleFavoritesListItemClick(props.quote, props.history)}>Edit</button>\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.handleDeleteFavoritesListItem(props.savedQuoteId)}>Delete</button>\n            </div>\n            <img className=\"favorites-list-item-img\" alt='' src={props.quote.backgroundimageurl}></img>\n          </li>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport FavoritesListItem from './FavoritesListItem';\n\nexport default function FavoritesList({ history }) {\n  return (\n    <GlobalContext.Consumer>\n      {({ state }) => {\n\n        let favoritesList = state.savedQuotes.map((quote) => {\n          return (\n            <FavoritesListItem key={quote.id} quote={quote} history={history} savedQuoteId={quote.id}/>\n          )\n        })\n\n        return (\n          <>\n          <h3 className=\"favorites-list-heading\">Favorites</h3>\n          <ul className=\"favorites-list\">\n            { favoritesList }\n          </ul>\n          </>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport FavoritesList from '../components/UserProfilePage/FavoritesList.js';\n\nexport default class UserProfilePage extends React.Component{\n\n  componentDidMount() {\n    this.props.getUpdatedSavedQuotes(this.props.userId);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <FavoritesList history={this.props.history}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { GlobalContextManager } from './contexts/GlobalContextManager';\nimport Router from './router/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n      <GlobalContextManager>\n        <Router />\n      </GlobalContextManager>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Menu from '../components/Header/Menu';\nimport LandingPage from '../pages/LandingPage';\nimport QuoteEditorPage from '../pages/QuoteEditorPage';\nimport UserProfilePage from '../pages/UserProfilePage';\nimport { GlobalContext } from '../contexts/GlobalContextManager';\n\nexport default function Router(props) {\n  return (\n    <BrowserRouter>\n      <Menu />\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path=\"/quotes\" component={QuoteEditorPage} />\n        <GlobalContext.Consumer>\n          {({ state, methods }) => {\n            return (\n              <Route \n                path=\"/user/:username\" \n                render={(props) => <UserProfilePage\n                  {...props}\n                  getUpdatedSavedQuotes={methods.getUpdatedSavedQuotes}\n                  userId={state.userId}/>} \n                />\n            )\n          }}\n        </GlobalContext.Consumer>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","module.exports = {\n  PORT: process.env.PORT || 8080,\n  // other stuff\n  API_BASE_URL: process.env.REACT_APP_API_BASE_URL ||\n    \"http://localhost:8000/api\"\n};"],"sourceRoot":""}