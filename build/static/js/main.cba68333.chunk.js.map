{"version":3,"sources":["fonts/quoteFontPairings.js","services/IteratorServices.js","services/TokenServices.js","contexts/GlobalContextManager.js","components/Header/LoginForm.js","components/Loading/LoadingSpinner.js","components/Header/CreateAccountForm.js","components/Header/AccountAccessForms.js","components/Header/UserMenu.js","components/Header/Menu.js","components/LandingPage/HeroImage.js","pages/LandingPage.js","components/QuoteEditorPage/QuoteDisplay.js","components/QuoteEditorPage/QuoteControls.js","components/QuoteEditorPage/QuoteNav.js","pages/QuoteEditorPage.js","components/UserProfilePage/FavoritesListItem.js","components/UserProfilePage/FavoritesList.js","pages/UserProfilePage.js","serviceWorker.js","index.js","router/Router.js","config.js"],"names":["quoteFontPairings","body","author","IteratorServices","createIterator","iterable","this","createIteratorObj","regenerator_default","a","mark","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","return","finish","stop","TokenServices","getTokenByKey","key","window","localStorage","getItem","setToken","data","setItem","updateToken","removeTokenByKey","removeItem","GlobalContext","React","createContext","GlobalContextManager","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomizeQuote","setState","currentQuoteSaved","state","keepBackground","iterateBackgroundUrl","backgroundUrlItObj","keepFonts","iterateFontPairing","fontPairItObj","keepQuote","iterateQuote","quoteItObj","undoRandomizeQuote","currentState","currentQuoteBgImageUrl","prevQuoteBgImageUrl","fontPair","previousFontPair","prevFontPair","currentQuote","prevQuote","saveQuote","userId","getUpdatedSavedQuotes","backgroundImageUrl","quoteId","id","bodyFont","currentQuoteFontPair","authorFont","fetch","concat","API_BASE_URL","method","headers","Content-Type","Authorization","JSON","stringify","then","res","ok","handleCheckboxCheck","e","target","editFavoritesItem","quote","history","console","log","background_image_url","push","createAccount","userInfo","preventDefault","username","password","json","resJson","loginUser","loading","error","decodedToken","jwt","decode","authToken","userIsLoggedIn","sub","savedQuotes","menuIsOpen","logoutUser","updatedQuotesList","deleteFavoritesItem","savedQuoteId","filter","savedQuote","toggleMenuIsOpen","quotes","quoteBackgroundImageUrls","toConsumableArray","prevQuoteFontPair","quoteHistory","keepQuoteBackground","keepQuoteFonts","keepQuoteQuote","initializeApp","localToken","complete","header","payload","_this2","getImages","getBackgroundImages","getQuotes","Promise","all","values","catch","err","_this3","numberOfImages","arguments","length","process","resolve","_this4","_ref","urls","regular","_ref2","_ref3","globalContext","methods","react_default","createElement","Provider","children","Component","LoginForm","errorMessage","Consumer","className","onSubmit","handleSubmit","htmlFor","type","onChange","handleTextInput","required","LoadingSpinner","width","height","xmlns","viewBox","preserveAspectRatio","style","shapeRendering","animationPlayState","animationDelay","background","cx","cy","fill","ng-attr-stroke","ng-attr-stroke-width","ng-attr-r","ng-attr-stroke-dasharray","stroke","stroke-width","r","stroke-dasharray","transform","attributeName","calcMode","keyTimes","dur","begin","repeatCount","CreateAccountForm","passwordConfirm","_this$state","Fragment","AccountAccessForms","setInCreateAccountMode","bool","inCreateAccountMode","onClick","CreateAccountForm_CreateAccountForm","LoginForm_LoginForm","UserMenu","react_router_dom","to","Menu","bind","assertThisInitialized","AccountAccessForms_AccountAccessForms","HeroImage","_useState","useState","_useState2","slicedToArray","LandingPage","class","QuoteDisplay","dynamicBackgroundStyles","backgroundSize","backgroundPosition","backgroundImage","dynamicBodyFont","fontFamily","dynamicAuthorFont","QuoteControls","index_es","icon","faCheckSquare","size","faSquare","QuoteNav","disabled","QuoteEditorPage","QuoteDisplay_QuoteDisplay","FavoritesListItem","quoteFont","bodyfont","authorfont","alt","src","FavoritesList","map","UserProfilePage","Boolean","location","hostname","match","ReactDOM","render","GlobalContextManager_GlobalContextManager","Menu_Menu","react_router","path","exact","component","UserProfilePage_UserProfilePage","assign","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","PORT"],"mappings":"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","file":"static/js/main.cba68333.chunk.js","sourcesContent":["const quoteFontPairings = [\n  {\n    body: 'Playfair Display, serif',\n    author: 'Source Sans Pro, sans-serif'\n  },\n  {\n    body:'Abril Fatface, cursive',\n    author:'Poppins, sans-serif' \n  },\n  {\n    body:'Ruda, sans-serif',\n    author:'Roboto Slab, serif' \n  },\n  {\n    body:'Cormorant Garamond, serif',\n    author:'Fira Sans, sans-serif' \n  },\n  {\n    body:'PT Sans, sans-serif',\n    author:'Playfair Display, serif' \n  }\n]\n\nexport default quoteFontPairings;\n\n// font-family: 'Source Sans Pro', sans-serif;\n// font-family: 'Playfair Display', serif;\n// font-family: 'Abril Fatface', cursive;\n// font-family: 'Poppins', sans-serif;\n// font-family: 'Ruda', sans-serif;\n// font-family: 'Roboto Slab', serif;\n// font-family: 'Cormorant Garamond', serif;\n// font-family: 'Fira Sans', sans-serif;\n// font-family: 'PT Sans', sans-serif;\n// font-family: 'Playfair Display', serif;","const IteratorServices = {\n  createIterator(iterable) {\n    return this.createIteratorObj(iterable);\n  },\n\n  *createIteratorObj(arr) {\n    for(let obj of arr) {\n      yield obj;\n    }\n  }\n}\n\nexport default IteratorServices;","const TokenServices = {\n  getTokenByKey(key) {\n    return window.localStorage.getItem(key);\n  },\n  setToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  updateToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  removeTokenByKey(key) {\n    window.localStorage.removeItem(key);\n  }\n}\n\nexport default TokenServices;","import React from 'react';\nimport quoteFontPairings from '../fonts/quoteFontPairings';\nimport IteratorServices from '../services/IteratorServices';\nimport TokenServices from'../services/TokenServices';\nimport jwt from 'jsonwebtoken';\nimport { API_BASE_URL } from '../config';\n\nconst GlobalContext = React.createContext();\n\nclass GlobalContextManager extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      quoteBackgroundImageUrls: [],\n      quoteFontPairings: [...quoteFontPairings],\n\n      currentQuote: {},\n      currentQuoteBgImageUrl: '',\n      currentQuoteFontPair: {},\n      currentQuoteSaved: false,\n\n      prevQuote: {},\n      prevQuoteBgImageUrl: '',\n      prevQuoteFontPair: {},\n      quoteHistory: [],\n\n      keepQuoteBackground: false,\n      keepQuoteFonts: false,\n      keepQuoteQuote: false,\n\n      userIsLoggedIn: false,\n      username: '',\n      userId: 0,\n      savedQuotes: [],\n\n      menuIsOpen: false,\n    }\n  }\n\n  //APP METHODS\n  componentDidMount() {\n    this.initializeApp();\n    const localToken = jwt.decode(TokenServices.getTokenByKey('motiv8-jwt'), {complete: true});\n    \n    if (localToken) {\n      const {\n        header,\n        payload,\n      } = localToken;\n      console.log('header', header);\n      console.log('payload', payload);\n      \n      this.setState({\n        userIsLoggedIn: true,\n        userId: payload.userId,\n        username: payload.sub\n      })\n    }\n\n  }\n\n  initializeApp() {\n    let getImages = this.getBackgroundImages(30);\n    let getQuotes = this.getQuotes(30);\n    \n    Promise.all([ getQuotes, getImages ])\n      .then(values => {\n        this.fontPairItObj = IteratorServices.createIterator(this.state.quoteFontPairings);\n        this.randomizeQuote();\n      })\n      .catch(err => console.log(err));\n  }\n  //END APP METHODS\n\n  //QUOTE METHODS\n  randomizeQuote = () => {\n    this.setState({\n      currentQuoteSaved: false\n    })\n    if(!this.state.keepBackground) {\n      this.iterateBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n    if(!this.state.keepFonts) {\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n    if(!this.state.keepQuote) {\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n  \n  undoRandomizeQuote = () => {\n    if(!this.state.keepBackground) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteBgImageUrl: currentState.prevQuoteBgImageUrl,\n          prevQuoteBgImageUrl: currentState.currentQuoteBgImageUrl\n        }\n      })\n    }\n\n    if(!this.state.keepFonts) {\n      this.setState((currentState) => {\n        return {\n          fontPair: currentState.previousFontPair,\n          prevFontPair: currentState.fontPair\n        }\n      })\n    }\n\n    if(!this.state.keepQuote) {\n      this.setState((currentState) => {\n        return {\n          currentQuote: currentState.prevQuote,\n          prevQuote: currentState.currentQuote\n        }\n      })\n    }\n  }\n\n  saveQuote = (userId, getUpdatedSavedQuotes) => {\n    //TODO sends current quote config to favorites db table.\n\n    if(userId === 0) {\n      return;\n    }\n\n    const data = {\n      backgroundImageUrl: this.state.currentQuoteBgImageUrl,\n      quoteId: this.state.currentQuote.id,\n      bodyFont: this.state.currentQuoteFontPair.body,\n      authorFont: this.state.currentQuoteFontPair.author,\n      userId: userId,\n    }\n\n    fetch(`${API_BASE_URL}/savedQuotes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        getUpdatedSavedQuotes(userId);\n        this.setState({currentQuoteSaved: true })\n      }\n    })\n  }\n\n  //refactor out to 3 different toggle functions\n  handleCheckboxCheck = (e) => {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n    }\n  }\n\n  editFavoritesItem = (quote, history) => {\n    console.log('edit quote', quote);\n    this.setState({\n      currentQuote: quote,\n      currentQuoteBgImageUrl: quote.background_image_url,\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    }, () => {\n      history.push('/quotes');\n    })\n  }\n  //END QUOTE METHODS\n\n\n  //USER METHODS\n  createAccount = (e, userInfo, createAccount) => {\n    e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        return res.json();\n      }\n    })\n    .then(resJson => {\n      this.loginUser(null, data)\n        .then(() => {\n          createAccount.setState({\n            loading: false,\n          })\n        })\n    })\n  }\n\n  loginUser = (e, userInfo) => {\n    if(e) e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    return fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(res => {\n\n      if(res.error) {\n        console.log('error', res.error);\n        return;\n      }\n      let decodedToken = jwt.decode(res.authToken);\n      TokenServices.setToken('motiv8-jwt', res.authToken);\n      console.log(decodedToken);\n        this.setState({\n        userIsLoggedIn: true,\n        username: decodedToken.sub,\n        userId: decodedToken.userId,\n        savedQuotes: res.savedQuotes,\n        menuIsOpen: false\n      })\n    })\n  }\n\n  logoutUser = () => {\n    TokenServices.removeTokenByKey('motiv8-jwt');\n    this.setState({\n      userIsLoggedIn: false,\n      userId: 0,\n      username: '',\n      savedQuotes: [],\n      menuIsOpen: false\n    })\n  }\n\n  getUpdatedSavedQuotes = (userId) => {\n    fetch(`${API_BASE_URL}/savedQuotes/${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      }\n    })\n      .then(res => res.json())\n      .then(updatedQuotesList => {\n        this.setState({\n          savedQuotes: updatedQuotesList\n        })\n      })\n  }\n\n  deleteFavoritesItem = (savedQuoteId) => {\n    const data = { savedQuoteId }\n    fetch(`${API_BASE_URL}/savedQuotes/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        this.setState((currentState) => {\n          let newSavedQuotes = currentState.savedQuotes.filter((savedQuote) => {\n            if(savedQuote.id === savedQuoteId) {\n              return false;\n            }\n            else {\n              return savedQuote\n            }\n          });\n          return {\n            savedQuotes: newSavedQuotes\n          }\n        })\n      }\n    })\n  }\n  //END USER METHODS\n\n  toggleMenuIsOpen = () => {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n  //HELPER FUNCTIONS\n  getBackgroundImages(numberOfImages = 30) {\n    return fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_API_KEY}`\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      return new Promise((resolve) => {\n        this.setState({\n          quoteBackgroundImageUrls: resJson,\n        },\n        //runs after setState\n        () => {\n          this.backgroundUrlItObj = IteratorServices.createIterator(this.state.quoteBackgroundImageUrls);\n          resolve(\"backgroundUrlItObj Created\");\n        })\n      })\n    })\n  }\n\n  getQuotes(numberOfQuotes = 30) {\n    //TODO make quotes route dynamic to accept numberOfQuotes param\n    return fetch(`${API_BASE_URL}/quotes`)\n    .then(quotes => quotes.json())\n    .then(quotes => {\n      return new Promise((resolve) => {\n        this.setState({\n          quotes: quotes\n        },\n        //runs after setState\n        () => {\n          this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n          resolve(\"quoteItObj Created\");\n        })\n      });\n    });\n  }\n  \n  iterateBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteBgImageUrl: value.urls.regular,\n          prevQuoteBgImageUrl: currentState.currentQuoteBgImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n  \n  iterateFontPairing({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteFontPair: value,\n          prevQuoteFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.quoteFontPairings);\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n  }\n  \n  iterateQuote({value, done}) {\n    if(!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          prevQuote: currentState.currentQuote\n        }\n      })\n    }\n    else {\n      this.getQuotes(30);\n    }\n  }\n  //END HELPER FUNCTIONS\n\n  render() {\n    const globalContext = {\n      state: this.state,\n      methods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        randomizeQuote: this.randomizeQuote,\n        undoRandomizeQuote: this.undoRandomizeQuote,\n        saveQuote: this.saveQuote,\n        editFavoritesItem: this.editFavoritesItem,\n        createAccount: this.createAccount,\n        loginUser: this.loginUser,\n        logoutUser: this.logoutUser,\n        getUpdatedSavedQuotes: this.getUpdatedSavedQuotes,\n        deleteFavoritesItem: this.deleteFavoritesItem,\n        toggleMenuIsOpen: this.toggleMenuIsOpen\n      }\n    }\n  \n    return (\n      <GlobalContext.Provider value={globalContext}>\n        {this.props.children}\n      </GlobalContext.Provider>\n    );\n  }\n}\n\nexport { GlobalContext , GlobalContextManager };\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      errorMessage: '',\n    }\n  }\n\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      default:\n          console.error(\"onChange id not found in login form\");\n    }\n  }\n\n  handleSubmit(e, methods) {\n    if(!this.state.username || !this.state.password) {\n      this.setState({\n        errorMessage: \"Please fill enter a username and password.\"\n      })\n    }\n    methods.loginUser(e, this.state);\n  }\n\n  render() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({methods}) => {\n          return (\n            <div>\n            <div className=\"demo-credentials\">\n              <h5>Demo Credentials</h5>\n              <div>Login: Demo</div>\n              <div>Pass: Demo123</div>\n            </div>\n            <form className=\"input-form\" onSubmit={(e) => this.handleSubmit(e, methods)}>\n              <label className=\"input-form__label\" htmlFor=\"username-input\">Username</label>\n              <input \n                id=\"username-input\"\n                type=\"text\"\n                onChange={(e) => this.handleTextInput(e)}\n                required/>\n\n              <label className=\"input-form__label\" htmlFor=\"password-input\">Password</label>\n              <input \n                id=\"password-input\" \n                type=\"password\" \n                onChange={(e) => this.handleTextInput(e)}\n                required />\n              {this.state.errorMessage\n              ? <div className=\"error-message\">{this.state.errorMessage}</div>\n              : \"\"\n              }\n              <input className=\"input-form__submit\" type=\"submit\" value=\"Sign In\"/>\n            </form>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React from 'react'\n\nexport default function LoadingSpinner() {\n  return (\n      <svg \n        width=\"200px\" \n        height=\"200px\" \n        xmlns=\"http://www.w3.org/2000/svg\" \n        viewBox=\"0 0 100 100\" \n        preserveAspectRatio=\"xMidYMid\" \n        className=\"lds-rolling\" \n        style={{shapeRendering: 'auto',\n                animationPlayState: 'running', \n                animationDelay: '0s', \n                background: 'none'}}>\n          <circle \n            cx=\"50\" \n            cy=\"50\" \n            fill=\"none\" \n            ng-attr-stroke=\"{{config.color}}\" \n            ng-attr-stroke-width=\"{{config.width}}\" \n            ng-attr-r=\"{{config.radius}}\" \n            ng-attr-stroke-dasharray=\"{{config.dasharray}}\" \n            stroke=\"#348ac7\" \n            stroke-width=\"10\" \n            r=\"35\" \n            stroke-dasharray=\"164.93361431346415 56.97787143782138\" \n            style={{animationPlayState: 'running', animationDelay: '0s'}} \n            transform=\"rotate(245.472 50 50)\">\n            <animateTransform \n              attributeName=\"transform\" \n              type=\"rotate\" \n              calcMode=\"linear\" \n              values=\"0 50 50;360 50 50\" \n              keyTimes=\"0;1\" \n              dur=\"1s\"\n              begin=\"0s\" \n              repeatCount=\"indefinite\" \n              style={{animationPlayState: 'running', animationDelay: '0s'}}>\n            </animateTransform>\n          </circle>\n          </svg>\n  )\n}\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport LoadingSpinner from '../../components/Loading/LoadingSpinner';\n\nexport default class CreateAccountForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      passwordConfirm: '',\n      errorMessage: '',\n      loading: false,\n    }\n\n  }\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'create-username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'create-password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      case 'create-password-confirm-input':\n        this.setState({\n          passwordConfirm: e.target.value\n        })\n        break;\n      default:\n        console.error(\"onChange id not found in create account form\");\n    }\n  }\n\n  handleSubmit(e, methods) {\n    e.preventDefault();\n    let { password, passwordConfirm } = this.state\n    if(password !== passwordConfirm) {\n      this.setState({\n        errorMessage: \"Passwords Must Match\"\n      });\n      return;\n    } \n    this.setState({\n      loading: true,\n    }, () => {\n      methods.createAccount(e, this.state, this);\n    });\n\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ methods }) => {\n          return (\n            <>\n              <form \n                className=\"create-account-form\" \n                onSubmit={(e) => {\n                  this.handleSubmit(e, methods);\n                }}>\n                {this.state.loading\n                ? <LoadingSpinner />\n                : <>\n                  <label className=\"create-account-form__label\" htmlFor=\"username-input\">Username</label>\n                  <input \n                    id=\"create-username-input\"\n                    type=\"text\"\n                    onChange={(e) => this.handleTextInput(e)}\n                    required/>\n\n                  <label className=\"create-account-form__label\" htmlFor=\"password-input\">Password</label>\n                  <input \n                    id=\"create-password-input\" \n                    type=\"password\" \n                    onChange={(e) => this.handleTextInput(e)}\n                    required />\n\n                  <label className=\"create-account-form__label\" htmlFor=\"password-confirm-input\">Confirm Password</label>\n                  <input \n                    id=\"create-password-confirm-input\" \n                    type=\"password\" \n                    onChange={(e) => this.handleTextInput(e)}\n                    required/>\n                  </>\n                }\n                {this.state.errorMessage\n                ? <div className=\"error-message\">{this.state.errorMessage}</div>\n                : \"\"}\n                <input className=\"create-account-form__submit\" type=\"submit\" value=\"Create Account\"/>\n              </form>\n            </>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  };\n}\n","import React from 'react'\nimport LoginForm from './LoginForm';\nimport CreateAccountForm from './CreateAccountForm';\n\nexport default class AccountAccessForms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inCreateAccountMode: false\n    }\n  }\n\n  setInCreateAccountMode = (bool) => {\n    this.setState({\n      inCreateAccountMode: bool\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"account-access-forms\">\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? '' : 'highlight'}`} \n          onClick={() => this.setInCreateAccountMode(false)}>\n            Sign In\n        </button>\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? 'highlight' : ''}`} \n          onClick={() => this.setInCreateAccountMode(true)}>\n            Create Account\n        </button>\n        <div className=\"account-access-forms__selected-form\">\n          {this.state.inCreateAccountMode ? \n            <CreateAccountForm setInCreateAccountMode={this.setInCreateAccountMode}/>\n            :\n            <LoginForm />}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function UserMenu(props) {\n\n  return (\n    <GlobalContext.Consumer>\n      {({ state, methods }) => {\n          return (\n            <ul className=\"user-menu\">\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={`/user/${state.username}`} \n                onClick={() => methods.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Profile\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => methods.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Quote Generator\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => methods.logoutUser()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Log Out\n                </li>\n              </NavLink>\n            </ul>\n          )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react';\nimport AccountAccessForms from './AccountAccessForms';\nimport UserMenu from './UserMenu';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class Menu extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      menuIsOpen: false,\n      userIsLoggedIn: true\n    }\n    this.toggleMenuIsOpen = this.toggleMenuIsOpen.bind(this);\n  }\n\n  toggleMenuIsOpen() {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state, methods }) => {\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={methods.toggleMenuIsOpen}>\n                    <span>{ state.menuIsOpen ? 'Close' : 'Menu' }</span>\n                  </button>\n                  <div className=\"menu__greeting\">\n                    { state.userIsLoggedIn ? `Welcome ${state.username}`: ''}\n                  </div>\n                    { state.menuIsOpen ? \n                        state.userIsLoggedIn ? <UserMenu /> : <AccountAccessForms />\n                        :\n                        ''\n                    }\n                </header>\n              </div>\n            )\n          }\n        }\n      </GlobalContext.Consumer>\n    )\n  }    \n}\n","import React, {useState} from 'react'\n\nexport default function HeroImage() {\n\n  let splashQuotes = [{\n    quote: `“Do not fear the winds of adversity. Remember, a kite \n    rises against the wind rather than with it.”`,\n    author: 'Unknown'\n  }]\n\n  const [currentQuote, setCurrentQuote] = useState(splashQuotes[0]);\n  \n  return (\n    <div className=\"landing-page__splash\">\n      <h1 className=\"landing-page__header\">Motiv8</h1>  \n      <div className=\"splash-animation\">\n        <div className=\"splash-quote\">{currentQuote.quote}</div>\n        <div className=\"splash-quote-author\">{currentQuote.author}</div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport HeroImage from '../components/LandingPage/HeroImage'\n\n\nexport default function LandingPage({ history }) {\n  return (\n    <div className=\"landing-page-container\">\n      <HeroImage />\n      <main className=\"landing-page__main-content\">\n        <div className=\"landing-page__copy\">\n          <h3>Motiv8 is a random quote generator.</h3>\n          <ul className=\"landing-page__list\">\n            <li className=\"landing-page__list-item\">\n              <i class=\"fas fa-palette landing-page__icon\"></i>\n              <span className=\"landing-page__list-copy\">Create unique quote, font, and background image pairings.</span>\n            </li>\n            <li className=\"landing-page__list-item\">\n              <i class=\"fas fa-user-circle landing-page__icon\"></i>\n              <span className=\"landing-page__list-copy\">Create an account and save your favorite combos.</span>\n            </li>\n          </ul> \n        </div>\n      </main>\n      <button className=\"btn get-started-button\" onClick={() => history.push('/quotes')}>Get Started</button>\n\n    </div>\n  )\n}\n","import React from 'react';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class QuoteDisplay extends React.Component {\n  state = {\n    loading: false,\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state }) => {\n          const dynamicBackgroundStyles = {\n            backgroundSize: 'cover',\n            backgroundPosition: 'center center',\n            backgroundImage: `url(${state.currentQuoteBgImageUrl})`,\n          }\n\n          const dynamicBodyFont = {\n            fontFamily: state.currentQuoteFontPair['body']\n          }\n      \n          const dynamicAuthorFont = {\n            fontFamily: state.currentQuoteFontPair['author']\n          }\n\n          return (\n            <div className=\"quote-display\"style={dynamicBackgroundStyles}>\n              <div className=\"quote-backdrop\">\n                <div className=\"quote-body\" style={dynamicBodyFont}>{state.currentQuote.quote}</div>\n                <div className=\"quote-author\" style={dynamicAuthorFont}>{state.currentQuote.author}</div>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSquare, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\n\nexport default function QuoteControls() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({ methods, state }) => {\n          const { \n            keepBackground,\n            keepFonts,\n            keepQuote,\n          }  = state\n\n          const iconSize = 'lg';\n          \n          return (\n            <div className=\"quote-controls-container\">\n              <h5 className=\"quote-controls-heading\">Randomize Options</h5>\n              <div className=\"quote-controls\">\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-quote-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-quote-checkbox\">\n                  <div>\n                    {keepQuote ? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Quote</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-fonts-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-fonts-checkbox\">\n                  <div>\n                    {keepFonts? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/>\n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Fonts</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-background-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-background-checkbox\">\n                  <div>\n                    {keepBackground? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Background</span>\n                </label>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  \n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function QuoteNav() {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods, state }) => {\n\n        let {\n          currentQuoteSaved,\n          userIsLoggedIn,\n          prevQuote,\n          userId\n        } = state\n\n        let {\n          getUpdatedSavedQuotes\n        } = methods\n\n\n        return (\n          <div className=\"quote-nav-container\">\n            <button className=\"quote-nav__button randomize-button\" onClick={() => methods.randomizeQuote()}>Randomize</button>\n            <button\n              disabled={prevQuote.quote ? false : 'disabled'}\n              className={`quote-nav__button undo-button ${prevQuote.quote ? '' : 'button-disabled'}`} \n              onClick={() => methods.undoRandomizeQuote()}>\n                Undo\n            </button>\n            <button \n              disabled={userIsLoggedIn ? false : 'disabled'}\n              className={\n                `quote-nav__button save-button \n                ${currentQuoteSaved ? 'save-success' : ''}\n                ${userIsLoggedIn ? '' : 'button-disabled'}`\n              } \n              onClick={() => methods.saveQuote(userId, getUpdatedSavedQuotes)}\n              >\n                Save\n              {userIsLoggedIn\n                ? ''\n                : <div className=\"save-button__instructions\">Log in to save quotes</div>\n              }\n            </button>\n          </div>\n        )\n      }}\n    </GlobalContext.Consumer>  \n  )\n}\n","import React from 'react'\nimport QuoteDisplay from '../components/QuoteEditorPage/QuoteDisplay';\nimport QuoteControls from '../components/QuoteEditorPage/QuoteControls';\nimport QuoteNav from '../components/QuoteEditorPage/QuoteNav';\n\nexport default function QuoteEditorPage() {\n  return (\n    <div className=\"container\">\n      <QuoteControls />\n      <QuoteDisplay />\n      <QuoteNav />\n    </div>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default function FavoritesListItem(props) {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods }) => {\n\n        const quoteFont={\n          fontFamily: props.quote.bodyfont\n        }\n\n        const authorFont = {\n          fontFamily: props.quote.authorfont,\n        }\n\n        return (\n          <li className=\"favorites-list-item\">\n            <div>\n              <p style={quoteFont}>{props.quote.quote}</p>\n              <p style={authorFont}>{props.quote.author}</p>\n              {/* <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.editFavoritesItem(props.quote, props.history)}>Edit</button> */}\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.deleteFavoritesItem(props.savedQuoteId)}>Delete</button>\n            </div>\n            <img className=\"favorites-list-item-img\" alt='' src={props.quote.background_image_url}></img>\n          </li>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport FavoritesListItem from './FavoritesListItem';\n\nexport default function FavoritesList({ history }) {\n  return (\n    <GlobalContext.Consumer>\n      {({ state }) => {\n        return (\n          <>\n            <h3 className=\"favorites-list-heading\">Favorites</h3>\n            <ul className=\"favorites-list\">\n              { state.savedQuotes.map(quote => \n                <FavoritesListItem \n                  key={quote.id} \n                  quote={quote} \n                  history={history} \n                  savedQuoteId={quote.id}/>) }\n            </ul>\n          </>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport FavoritesList from '../components/UserProfilePage/FavoritesList.js';\n\nexport default class UserProfilePage extends React.Component{\n\n  componentDidMount() {\n    this.props.getUpdatedSavedQuotes(this.props.userId);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <FavoritesList history={this.props.history}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { GlobalContextManager } from './contexts/GlobalContextManager';\nimport Router from './router/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n      <GlobalContextManager>\n        <Router />\n      </GlobalContextManager>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Menu from '../components/Header/Menu';\nimport LandingPage from '../pages/LandingPage';\nimport QuoteEditorPage from '../pages/QuoteEditorPage';\nimport UserProfilePage from '../pages/UserProfilePage';\nimport { GlobalContext } from '../contexts/GlobalContextManager';\n\nexport default function Router(props) {\n  return (\n    <BrowserRouter>\n      <Menu />\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path=\"/quotes\" component={QuoteEditorPage} />\n        <GlobalContext.Consumer>\n          {({ state, methods }) => {\n            return (\n              <Route \n                path=\"/user/:username\" \n                render={(props) => <UserProfilePage\n                  {...props}\n                  getUpdatedSavedQuotes={methods.getUpdatedSavedQuotes}\n                  userId={state.userId}/>} \n                />\n            )\n          }}\n        </GlobalContext.Consumer>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","module.exports = {\n  PORT: process.env.PORT || 8080,\n  // other stuff\n  API_BASE_URL: process.env.REACT_APP_API_BASE_URL ||\n    \"http://localhost:8000/api\"\n};"],"sourceRoot":""}