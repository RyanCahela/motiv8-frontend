{"version":3,"sources":["fonts/fontPairings.js","services/IteratorServices.js","services/TokenServices.js","contexts/GlobalContextManager.js","components/Header/LoginForm.js","components/Header/CreateAccountForm.js","components/Header/AccountAccessForms.js","components/Header/UserMenu.js","components/Header/Menu.js","pages/LandingPage.js","components/QuoteEditorPage/QuoteDisplay.js","components/QuoteEditorPage/QuoteControls.js","components/QuoteEditorPage/QuoteNav.js","pages/QuoteEditorPage.js","components/UserProfilePage/FavoritesListItem.js","components/UserProfilePage/FavoritesList.js","pages/UserProfilePage.js","serviceWorker.js","index.js","router/Router.js"],"names":["fontPairings","body","author","IteratorServices","createIterator","iterable","this","createIteratorObj","regenerator_default","a","mark","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","return","finish","stop","TokenServices","getTokenByKey","key","window","localStorage","getItem","setToken","data","setItem","updateToken","removeTokenByKey","removeItem","GlobalContext","React","createContext","GlobalContextManager","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","quotes","currentQuote","backgroundImageUrls","toConsumableArray","backgroundImageUrl","fontPair","previousBackgroundImageUrl","previousFontPair","keepBackground","keepFonts","keepQuote","isLoggedIn","username","userId","savedQuotes","handleRandomize","bind","assertThisInitialized","handleUndo","handleCheckboxCheck","handleSaveQuote","handleFavoritesListItemClick","handleCreateAccountSubmit","handleLogin","handleLogout","getUpdatedSavedQuotes","handleDeleteFavoritesListItem","initializeApp","_jwt$decode","jwt","decode","sub","setState","_this2","getImages","getBackgroundImages","getQuotes","Promise","all","then","values","console","log","fontPairItObj","catch","err","iterateBackgroundUrl","backgroundUrlItObj","iterateFontPairing","iterateQuote","quoteItObj","currentState","previousQuote","quoteId","id","bodyFont","authorFont","fetch","method","headers","Content-Type","Authorization","concat","JSON","stringify","res","status","e","target","quote","history","backgroundimageurl","push","userInfo","preventDefault","password","json","resJson","_this3","content-type","decodedToken","authToken","_this4","updatedQuotesList","_this5","ok","filter","savedQuote","_this6","numberOfImages","arguments","length","process","resolve","_this7","_ref","urls","regular","_ref2","_ref3","globalContext","methods","react_default","createElement","Provider","children","Component","LoginForm","error","Consumer","className","onSubmit","htmlFor","type","onChange","handleTextInput","CreateAccountForm","passwordConfirm","Fragment","setIsInCreateAccountModeFalse","AccountAccessForms","isInCreateAccountMode","signInBg","createAccountBg","onClick","setIsInCreateAccountModeTrue","CreateAccountForm_CreateAccountForm","LoginForm_LoginForm","UserMenu","react_router_dom","to","toggleMenuIsOpen","Menu","menuIsOpen","userIsLoggedIn","AccountAccessForms_AccountAccessForms","LandingPage","QuoteDisplay","dynamicBackgroundStyles","backgroundSize","backgroundPosition","backgroundImage","dynamicBodyFont","fontFamily","dynamicAuthorFont","style","QuoteControls","index_es","icon","faCheckSquare","size","faSquare","QuoteNav","QuoteEditorPage","QuoteDisplay_QuoteDisplay","FavoritesListItem","quoteFont","bodyfont","authorfont","savedQuoteId","alt","src","FavoritesList","favoritesList","map","UserProfilePage","Boolean","location","hostname","match","ReactDOM","render","GlobalContextManager_GlobalContextManager","Menu_Menu","react_router","path","exact","component","UserProfilePage_UserProfilePage","assign","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4691200b.chunk.js","sourcesContent":["const fontPairings = [\n  {\n    body: 'Playfair Display, serif',\n    author: 'Source Sans Pro, sans-serif'\n  },\n  {\n    body:'Abril Fatface, cursive',\n    author:'Poppins, sans-serif' \n  },\n  {\n    body:'Ruda, sans-serif',\n    author:'Roboto Slab, serif' \n  },\n  {\n    body:'Cormorant Garamond, serif',\n    author:'Fira Sans, sans-serif' \n  },\n  {\n    body:'PT Sans, sans-serif',\n    author:'Playfair Display, serif' \n  }\n]\n\nexport default fontPairings;\n\n// font-family: 'Source Sans Pro', sans-serif;\n// font-family: 'Playfair Display', serif;\n// font-family: 'Abril Fatface', cursive;\n// font-family: 'Poppins', sans-serif;\n// font-family: 'Ruda', sans-serif;\n// font-family: 'Roboto Slab', serif;\n// font-family: 'Cormorant Garamond', serif;\n// font-family: 'Fira Sans', sans-serif;\n// font-family: 'PT Sans', sans-serif;\n// font-family: 'Playfair Display', serif;","const IteratorServices = {\n  createIterator(iterable) {\n    return this.createIteratorObj(iterable);\n  },\n\n  *createIteratorObj(arr) {\n    for(let obj of arr) {\n      yield obj;\n    }\n  }\n}\n\nexport default IteratorServices;","const TokenServices = {\n  getTokenByKey(key) {\n    return window.localStorage.getItem(key);\n  },\n  setToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  updateToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  removeTokenByKey(key) {\n    window.localStorage.removeItem(key);\n  }\n}\n\nexport default TokenServices;","import React from 'react';\nimport fontPairings from '../fonts/fontPairings';\nimport IteratorServices from '../services/IteratorServices';\nimport TokenServices from'../services/TokenServices';\nimport jwt from 'jsonwebtoken';\n\nconst GlobalContext = React.createContext();\n\nclass GlobalContextManager extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      //quote info\n      quotes: [],\n      currentQuote: '',\n      backgroundImageUrls: [],\n      fontPairings: [...fontPairings],\n      backgroundImageUrl: '',\n      fontPair: {},\n      previousBackgroundImageUrl: '',\n      previousFontPair: {},\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false,\n\n      //user info\n      isLoggedIn: false,\n      username: '',\n      userId: 0,\n      savedQuotes: []\n    }\n\n    this.handleRandomize = this.handleRandomize.bind(this);\n    this.handleUndo = this.handleUndo.bind(this);\n    this.handleCheckboxCheck = this.handleCheckboxCheck.bind(this);\n    this.handleSaveQuote = this.handleSaveQuote.bind(this);\n    this.handleFavoritesListItemClick = this.handleFavoritesListItemClick.bind(this);\n\n    //user info methods\n    this.handleCreateAccountSubmit = this.handleCreateAccountSubmit.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n    this.getUpdatedSavedQuotes = this.getUpdatedSavedQuotes.bind(this);\n    this.handleDeleteFavoritesListItem = this.handleDeleteFavoritesListItem.bind(this);\n  }\n\n  //APP METHODS\n  componentDidMount() {\n    this.initializeApp();\n    const isLoggedIn = TokenServices.getTokenByKey('motiv8-jwt');\n    if(isLoggedIn) {\n      const {\n        sub: username,\n        userId,\n      } = jwt.decode(isLoggedIn);\n      \n      this.setState({\n        isLoggedIn: true,\n        username: username,\n        userId: userId\n      })\n    }\n\n  }\n\n  initializeApp() {\n    let getImages = this.getBackgroundImages(30);\n    let getQuotes = this.getQuotes(30);\n    \n    Promise.all([ getQuotes, getImages ])\n      .then(values => {\n        console.log(values);\n        this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n        this.handleRandomize();\n      })\n      .catch(err => console.log(err));\n  }\n  //END APP METHODS\n\n  \n  //QUOTE METHODS\n  handleRandomize() {\n    if(!this.state.keepBackground) {\n      this.iterateBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n    if(!this.state.keepFonts) {\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n    if(!this.state.keepQuote) {\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n  \n  handleUndo() {\n    if(!this.state.keepBackground) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: currentState.previousBackgroundImageUrl,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n\n    if(!this.state.keepFonts) {\n      this.setState((currentState) => {\n        return {\n          fontPair: currentState.previousFontPair,\n          previousFontPair: currentState.fontPair\n        }\n      })\n    }\n\n    if(!this.state.keepQuote) {\n      this.setState((currentState) => {\n        return {\n          currentQuote: currentState.previousQuote,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n  }\n\n  handleSaveQuote(userId, getUpdatedSavedQuotes) {\n    //TODO sends current quote config to favorites db table.\n\n    if(userId === 0) {\n      console.log('please log in');\n      return;\n    }\n\n    const data = {\n      backgroundImageUrl: this.state.backgroundImageUrl,\n      quoteId: this.state.currentQuote.id,\n      bodyFont: this.state.fontPair.body,\n      authorFont: this.state.fontPair.author,\n      userId: userId,\n    }\n\n    fetch('http://localhost:8000/api/savedQuotes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      console.log(res.status);\n      getUpdatedSavedQuotes(userId);\n    })\n  }\n\n\n  handleCheckboxCheck(e) {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n        console.log('Something went wrong with the switch');\n    }\n  }\n\n  handleFavoritesListItemClick(quote, history) {\n    console.log('handleFavoritesListIemClick ran');\n    console.log(quote);\n    console.log('history', history);\n    this.setState({\n      currentQuote: quote,\n      backgroundImageUrl: quote.backgroundimageurl,\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    }, () => {\n      history.push('/quotes');\n    })\n  }\n  //END QUOTE METHODS\n\n\n  //USER METHODS\n\n  handleCreateAccountSubmit(e, userInfo) {\n    e.preventDefault();\n    console.log(userInfo);\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch('http://localhost:8000/api/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      console.log(resJson);\n    })\n  }\n\n  handleLogin(e, userInfo) {\n    e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch('http://localhost:8000/api/login', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(res => {\n      //TODO build token services for crud on tokens to refresh\n      console.log('login res', res);\n      let decodedToken = jwt.decode(res.authToken);\n      console.log('userId', decodedToken);\n      \n      TokenServices.setToken('motiv8-jwt', res.authToken);\n      this.setState({\n        isLoggedIn: true,\n        username: decodedToken.sub,\n        userId: decodedToken.userId,\n        savedQuotes: res.savedQuotes\n      })\n\n      \n    })\n  }\n\n  handleLogout() {\n    TokenServices.removeTokenByKey('motiv8-jwt');\n    this.setState({\n      isLoggedIn: false,\n      userId: 0,\n      username: '',\n      savedQuotes: []\n    })\n  }\n\n  getUpdatedSavedQuotes(userId) {\n    fetch(`http://localhost:8000/api/savedQuotes/${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      }\n    })\n      .then(res => res.json())\n      .then(updatedQuotesList => {\n        console.log('updated saved quotes', updatedQuotesList)\n        this.setState({\n          savedQuotes: updatedQuotesList\n        })\n      })\n  }\n\n  handleDeleteFavoritesListItem(quoteId) {\n    const data = { quoteId }\n    fetch(`http://localhost:8000/api/savedQuotes/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        this.setState((currentState) => {\n          let newSavedQuotes = currentState.savedQuotes.filter((savedQuote) => {\n            if(savedQuote.id === quoteId) {\n              return;\n            }\n            else {\n              return savedQuote\n            }\n          });\n          return {\n            savedQuotes: newSavedQuotes\n          }\n        })\n      }\n    })\n  }\n  //END USER METHODS\n  \n  //HELPER FUNCTIONS\n\n  getBackgroundImages(numberOfImages = 30) {\n    return fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_API_KEY}`\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      return new Promise((resolve) => {\n        this.setState({\n          backgroundImageUrls: resJson,\n        },\n        //runs after setState\n        () => {\n          this.backgroundUrlItObj = IteratorServices.createIterator(this.state.backgroundImageUrls);\n          resolve(\"backgroundUrlItObj Created\");\n        })\n      })\n    })\n  }\n\n  getQuotes(numberOfQuotes = 30) {\n    //TODO make quotes route dynamic to accept numberOfQuotes param\n    return fetch('http://localhost:8000/api/quotes')\n    .then(quotes => quotes.json())\n    .then(quotes => {\n      return new Promise((resolve) => {\n        this.setState({\n          quotes: quotes\n        },\n        //runs after setState\n        () => {\n          this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n          resolve(\"quoteItObj Created\");\n        })\n      });\n    });\n  }\n  \n  iterateBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          backgroundImageUrl: value.urls.regular,\n          previousBackgroundImageUrl: currentState.backgroundImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n  \n  iterateFontPairing({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          fontPair: value,\n          previousFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.fontPairings);\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n  }\n  \n  iterateQuote({value, done}) {\n    if(!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          previousQuote: currentState.currentQuote\n        }\n      })\n    }\n    else {\n      this.getQuotes(30);\n    }\n  }\n  //END HELPER FUNCTIONS\n\n\n  render() {\n\n    const globalContext = {\n      state: this.state,\n      methods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        handleRandomize: this.handleRandomize,\n        handleUndo: this.handleUndo,\n        handleSaveQuote: this.handleSaveQuote,\n        handleFavoritesListItemClick: this.handleFavoritesListItemClick,\n        handleCreateAccountSubmit: this.handleCreateAccountSubmit,\n        handleLogin: this.handleLogin,\n        handleLogout: this.handleLogout,\n        getUpdatedSavedQuotes: this.getUpdatedSavedQuotes,\n        handleDeleteFavoritesListItem: this.handleDeleteFavoritesListItem\n      }\n    }\n\n        \n    return (\n      <GlobalContext.Provider value={globalContext}>\n        {this.props.children}\n      </GlobalContext.Provider>\n    );\n  }\n}\nexport { GlobalContext , GlobalContextManager };\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: ''\n    }\n  }\n\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      default:\n          console.error(\"onChange id not found in login form\");\n    }\n  }\n\n  render() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({methods}) => {\n          return (\n            <div>\n            <h3 className=\"login-heading\">Sign In</h3>\n            <form className=\"input-form\" onSubmit={(e) => methods.handleLogin(e, this.state)}>\n              <label className=\"input-form__label\" htmlFor=\"username-input\">Username</label>\n              <input \n                id=\"username-input\"\n                type=\"text\"\n                onChange={(e) => this.handleTextInput(e)}/>\n\n              <label className=\"input-form__label\" htmlFor=\"password-input\">Password</label>\n              <input \n                id=\"password-input\" \n                type=\"password\" \n                onChange={(e) => this.handleTextInput(e)} />\n\n              <input className=\"input-form__submit\" type=\"submit\" value=\"Sign In\"/>\n            </form>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class CreateAccountForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      passwordConfirm: '',\n    }\n\n  }\n\n  handleTextInput(e) {\n    console.log(e.target.id);\n    switch (e.target.id) {\n      case 'create-username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'create-password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      case 'create-password-confirm-input':\n        this.setState({\n          passwordConfirm: e.target.value\n        })\n        break;\n      default:\n        console.error(\"onChange id not found in create account form\");\n    }\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ methods }) => {\n          return (\n            <>\n              <h3 className=\"create-account-heading\">Create An Account</h3>\n              <form \n                className=\"create-account-form\" \n                onSubmit={(e) => {\n                  methods.handleCreateAccountSubmit(e, this.state);\n                  this.props.setIsInCreateAccountModeFalse();\n                }}>\n\n                <label className=\"create-account-form__label\" htmlFor=\"username-input\">Username:</label>\n                <input \n                  id=\"create-username-input\"\n                  type=\"text\"\n                  onChange={(e) => this.handleTextInput(e)}/>\n\n                <label className=\"create-account-form__label\" htmlFor=\"password-input\">Password:</label>\n                <input \n                  id=\"create-password-input\" \n                  type=\"password\" \n                  onChange={(e) => this.handleTextInput(e)} />\n\n                <label className=\"create-account-form__label\" htmlFor=\"password-confirm-input\">Confirm Password</label>\n                <input \n                  id=\"create-password-confirm-input\" \n                  type=\"password\" \n                  onChange={(e) => this.handleTextInput(e)}/>\n\n                <input className=\"create-account-form__submit\" type=\"submit\" value=\"Create Account\"/>\n              </form>\n            </>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  };\n}\n","import React from 'react'\nimport LoginForm from './LoginForm';\nimport CreateAccountForm from './CreateAccountForm';\n\nexport default class AccountAccessForms extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isInCreateAccountMode: false\n    }\n\n    this.setIsInCreateAccountModeFalse = this.setIsInCreateAccountModeFalse.bind(this);\n  }\n\n\n  setIsInCreateAccountModeTrue() {\n    this.setState({\n      isInCreateAccountMode: true\n    })\n  }\n\n  setIsInCreateAccountModeFalse() {\n    this.setState({\n      isInCreateAccountMode: false\n    })\n  }\n\n  render() {\n\n      let signInBg, createAccountBg;\n      if(this.state.isInCreateAccountMode) {\n        signInBg = '';\n        createAccountBg = 'highlight';\n      }\n      else {\n        signInBg = 'highlight';\n        createAccountBg = '';\n      }\n\n\n      return (\n        <div className=\"account-access-forms\">\n          <button className={`account-access-forms__button ${signInBg}`} onClick={() => this.setIsInCreateAccountModeFalse()}>Sign In</button>\n          <button className={`account-access-forms__button ${createAccountBg}`} onClick={() => this.setIsInCreateAccountModeTrue()}>Create Account</button>\n          <div className=\"account-access-forms__selected-form\">\n            {this.state.isInCreateAccountMode? \n              <CreateAccountForm setIsInCreateAccountModeFalse={this.setIsInCreateAccountModeFalse}/>\n              :\n              <LoginForm />}\n          </div>\n        </div>\n      )\n\n  }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function UserMenu(props) {\n\n  return (\n    <GlobalContext.Consumer>\n      {({ state, methods }) => {\n          return (\n            <ul className=\"user-menu\">\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={`/user/${state.username}`} \n                onClick={() => props.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Profile\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => props.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Quote Generator\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/'} \n                onClick={() => methods.handleLogout()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Log Out\n                </li>\n              </NavLink>\n            </ul>\n          )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react';\nimport AccountAccessForms from './AccountAccessForms';\nimport UserMenu from './UserMenu';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class Menu extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      menuIsOpen: false,\n      userIsLoggedIn: true\n    }\n\n    this.toggleMenuIsOpen = this.toggleMenuIsOpen.bind(this);\n  }\n\n  toggleMenuIsOpen() {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state }) => {\n          if(this.state.menuIsOpen) {\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={this.toggleMenuIsOpen}>X</button>\n                  <div>{state.isLoggedIn? `Welcome ${state.username}`: ''}</div>\n                  {state.isLoggedIn? <UserMenu toggleMenuIsOpen={this.toggleMenuIsOpen}/> : <AccountAccessForms />}\n                </header>\n              </div>\n            )\n          }\n          else {\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={this.toggleMenuIsOpen}>Menu</button>\n                  <div className=\"menu__greeting\">{state.isLoggedIn? `Welcome ${state.username}`: ''}</div>\n                </header>\n              </div>\n            )\n          }\n        }\n        }\n      </GlobalContext.Consumer>\n    )\n  }    \n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function LandingPage() {\n  return (\n    <div className=\"landing-page-container\">\n      <h1>Welcome to Motiv8</h1>  \n        <main>\n          <h2>Customize your inspiration</h2>\n          <p>Instruction blah blah blah \n            Lorem ipsum dolor sit amet, consectetur \n            adipiscing elit, sed do eiusmod tempor incididunt \n            ut labore et dolore magna aliqua. Ut enim ad minim \n            veniam, quis nostrud exercitation ullamco laboris \n            nisi ut aliquip ex ea commodo consequat. Duis aute \n            irure dolor in reprehenderit in voluptate velit esse \n            cillum dolore eu fugiat nulla pariatur. Excepteur \n            sint occaecat cupidatat non proident, sunt in culpa \n            qui officia deserunt mollit anim id est laborum.\"\n          </p>\n          <Link to={'/quotes'}>\n            <button className=\"landing-button\">Get Started!</button>\n          </Link>\n        </main>\n    </div>\n  )\n}\n","import React from 'react';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class QuoteDisplay extends React.Component {\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state }) => {\n          const dynamicBackgroundStyles = {\n            backgroundSize: 'cover',\n            backgroundPosition: 'center center',\n            backgroundImage: `url(${state.backgroundImageUrl})`,\n          }\n\n          const dynamicBodyFont = {\n            fontFamily: state.fontPair['body']\n          }\n      \n          const dynamicAuthorFont = {\n            fontFamily: state.fontPair['author']\n          }\n\n          return (\n            <div className=\"quote-display\"style={dynamicBackgroundStyles}>\n              <div className=\"quote-backdrop\">\n                <div className=\"quote-body\" style={dynamicBodyFont}>{state.currentQuote.quote}</div>\n                <div className=\"quote-author\" style={dynamicAuthorFont}>{state.currentQuote.author}</div>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSquare, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\n\nexport default function QuoteControls() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({ methods, state }) => {\n\n\n\n          const { \n            keepBackground,\n            keepFonts,\n            keepQuote,\n          }  = state\n\n          const iconSize = 'lg';\n          \n          return (\n            <div className=\"quote-controls-container\">\n              <h5 className=\"quote-controls-heading\">Randomize Options</h5>\n              <div className=\"quote-controls\">\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-quote-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-quote-checkbox\">\n                  <div>\n                    {keepQuote ? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Quote</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-fonts-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-fonts-checkbox\">\n                  <div>\n                    {keepFonts? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/>\n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Fonts</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-background-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-background-checkbox\">\n                  <div>\n                    {keepBackground? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Background</span>\n                </label>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  \n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function QuoteNav() {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods, state }) => {\n        return (\n          <div className=\"quote-nav-container\">\n            <button className=\"quote-nav__button randomize-button\" onClick={() => methods.handleRandomize()}>Randomize</button>\n            <button className=\"quote-nav__button undo-button\" onClick={() => methods.handleUndo()}>Undo</button>\n            <button className=\"quote-nav__button save-button\" onClick={() => methods.handleSaveQuote(state.userId, methods.getUpdatedSavedQuotes)}>Save</button>\n          </div>\n        )\n      }}\n    </GlobalContext.Consumer>  \n  )\n}\n","import React from 'react'\nimport QuoteDisplay from '../components/QuoteEditorPage/QuoteDisplay';\nimport QuoteControls from '../components/QuoteEditorPage/QuoteControls';\nimport QuoteNav from '../components/QuoteEditorPage/QuoteNav';\n\nexport default function QuoteEditorPage() {\n  return (\n    <div className=\"container\">\n      <QuoteControls />\n      <QuoteDisplay />\n      <QuoteNav />\n    </div>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default function FavoritesListItem(props) {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods }) => {\n\n        const quoteFont={\n          fontFamily: props.quote.bodyfont\n        }\n\n        const authorFont = {\n          fontFamily: props.quote.authorfont,\n        }\n\n\n        return (\n          <li className=\"favorites-list-item\">\n            <div>\n              <p style={quoteFont}>{props.quote.quote}</p>\n              <p style={authorFont}>{props.quote.author}</p>\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.handleFavoritesListItemClick(props.quote, props.history)}>Edit</button>\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.handleDeleteFavoritesListItem(props.savedQuoteId)}>Delete</button>\n            </div>\n            <img className=\"favorites-list-item-img\" alt='' src={props.quote.backgroundimageurl}></img>\n          </li>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport FavoritesListItem from './FavoritesListItem';\n\nexport default function FavoritesList({ history }) {\n  return (\n    <GlobalContext.Consumer>\n      {({ state }) => {\n\n        let favoritesList = state.savedQuotes.map((quote) => {\n          return (\n            <FavoritesListItem key={quote.id} quote={quote} history={history} savedQuoteId={quote.id}/>\n          )\n        })\n        console.log(favoritesList);\n\n        return (\n          <>\n          <h3 className=\"favorites-list-heading\">Favorites</h3>\n          <ul className=\"favorites-list\">\n            { favoritesList }\n          </ul>\n          </>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport FavoritesList from '../components/UserProfilePage/FavoritesList.js';\n\nexport default class UserProfilePage extends React.Component{\n\n  componentDidMount() {\n    console.log(this.props);\n    this.props.getUpdatedSavedQuotes(this.props.userId);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <FavoritesList history={this.props.history}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { GlobalContextManager } from './contexts/GlobalContextManager';\nimport Router from './router/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n      <GlobalContextManager>\n        <Router />\n      </GlobalContextManager>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Menu from '../components/Header/Menu';\nimport LandingPage from '../pages/LandingPage';\nimport QuoteEditorPage from '../pages/QuoteEditorPage';\nimport UserProfilePage from '../pages/UserProfilePage';\nimport { GlobalContext } from '../contexts/GlobalContextManager';\n\nexport default function Router(props) {\n  return (\n    <BrowserRouter>\n      <Menu />\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path=\"/quotes\" component={QuoteEditorPage} />\n        <GlobalContext.Consumer>\n          {({ state, methods }) => {\n            return (\n              <Route \n                path=\"/user/:username\" \n                render={(props) => <UserProfilePage\n                  {...props}\n                  getUpdatedSavedQuotes={methods.getUpdatedSavedQuotes}\n                  userId={state.userId}/>} \n                />\n            )\n          }}\n        </GlobalContext.Consumer>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n"],"sourceRoot":""}