{"version":3,"sources":["fonts/quoteFontPairings.js","services/IteratorServices.js","services/TokenServices.js","contexts/GlobalContextManager.js","components/Header/LoginForm.js","components/Header/CreateAccountForm.js","components/Header/AccountAccessForms.js","components/Header/UserMenu.js","components/Header/Menu.js","pages/LandingPage.js","components/QuoteEditorPage/QuoteDisplay.js","components/QuoteEditorPage/QuoteControls.js","components/QuoteEditorPage/QuoteNav.js","pages/QuoteEditorPage.js","components/UserProfilePage/FavoritesListItem.js","components/UserProfilePage/FavoritesList.js","pages/UserProfilePage.js","serviceWorker.js","index.js","router/Router.js","config.js"],"names":["quoteFontPairings","body","author","IteratorServices","createIterator","iterable","this","createIteratorObj","regenerator_default","a","mark","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","return","finish","stop","TokenServices","getTokenByKey","key","window","localStorage","getItem","setToken","data","setItem","updateToken","removeTokenByKey","removeItem","GlobalContext","React","createContext","GlobalContextManager","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomizeQuote","setState","currentQuoteSaved","state","keepBackground","iterateBackgroundUrl","backgroundUrlItObj","keepFonts","iterateFontPairing","fontPairItObj","keepQuote","iterateQuote","quoteItObj","undoRandomizeQuote","currentState","currentQuoteBgImageUrl","prevQuoteBgImageUrl","fontPair","previousFontPair","prevFontPair","currentQuote","prevQuote","saveQuote","userId","getUpdatedSavedQuotes","backgroundImageUrl","quoteId","id","bodyFont","currentQuoteFontPair","authorFont","fetch","concat","API_BASE_URL","method","headers","Content-Type","Authorization","JSON","stringify","then","res","ok","handleCheckboxCheck","e","target","editFavoritesItem","quote","history","backgroundimageurl","push","createAccount","userInfo","preventDefault","username","password","json","resJson","loginUser","error","console","log","decodedToken","jwt","decode","authToken","userIsLoggedIn","sub","savedQuotes","menuIsOpen","logoutUser","updatedQuotesList","deleteFavoritesItem","filter","savedQuote","toggleMenuIsOpen","quotes","quoteBackgroundImageUrls","toConsumableArray","prevQuoteFontPair","quoteHistory","keepQuoteBackground","keepQuoteFonts","keepQuoteQuote","initializeApp","localToken","complete","header","payload","_this2","getImages","getBackgroundImages","getQuotes","Promise","all","values","catch","err","_this3","numberOfImages","arguments","length","process","resolve","_this4","_ref","urls","regular","_ref2","_ref3","globalContext","methods","react_default","createElement","Provider","children","Component","LoginForm","Consumer","className","onSubmit","htmlFor","type","onChange","handleTextInput","CreateAccountForm","passwordConfirm","Fragment","setInCreateAccountMode","AccountAccessForms","bool","inCreateAccountMode","onClick","CreateAccountForm_CreateAccountForm","LoginForm_LoginForm","UserMenu","react_router_dom","to","Menu","bind","assertThisInitialized","AccountAccessForms_AccountAccessForms","LandingPage","QuoteDisplay","dynamicBackgroundStyles","backgroundSize","backgroundPosition","backgroundImage","dynamicBodyFont","fontFamily","dynamicAuthorFont","style","QuoteControls","index_es","icon","faCheckSquare","size","faSquare","QuoteNav","disabled","QuoteEditorPage","QuoteDisplay_QuoteDisplay","FavoritesListItem","quoteFont","bodyfont","authorfont","savedQuoteId","alt","src","background_image_url","FavoritesList","map","UserProfilePage","Boolean","location","hostname","match","ReactDOM","render","GlobalContextManager_GlobalContextManager","Menu_Menu","react_router","path","exact","component","UserProfilePage_UserProfilePage","assign","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","PORT"],"mappings":"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","file":"static/js/main.0c1d1dd8.chunk.js","sourcesContent":["const quoteFontPairings = [\n  {\n    body: 'Playfair Display, serif',\n    author: 'Source Sans Pro, sans-serif'\n  },\n  {\n    body:'Abril Fatface, cursive',\n    author:'Poppins, sans-serif' \n  },\n  {\n    body:'Ruda, sans-serif',\n    author:'Roboto Slab, serif' \n  },\n  {\n    body:'Cormorant Garamond, serif',\n    author:'Fira Sans, sans-serif' \n  },\n  {\n    body:'PT Sans, sans-serif',\n    author:'Playfair Display, serif' \n  }\n]\n\nexport default quoteFontPairings;\n\n// font-family: 'Source Sans Pro', sans-serif;\n// font-family: 'Playfair Display', serif;\n// font-family: 'Abril Fatface', cursive;\n// font-family: 'Poppins', sans-serif;\n// font-family: 'Ruda', sans-serif;\n// font-family: 'Roboto Slab', serif;\n// font-family: 'Cormorant Garamond', serif;\n// font-family: 'Fira Sans', sans-serif;\n// font-family: 'PT Sans', sans-serif;\n// font-family: 'Playfair Display', serif;","const IteratorServices = {\n  createIterator(iterable) {\n    return this.createIteratorObj(iterable);\n  },\n\n  *createIteratorObj(arr) {\n    for(let obj of arr) {\n      yield obj;\n    }\n  }\n}\n\nexport default IteratorServices;","const TokenServices = {\n  getTokenByKey(key) {\n    return window.localStorage.getItem(key);\n  },\n  setToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  updateToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  removeTokenByKey(key) {\n    window.localStorage.removeItem(key);\n  }\n}\n\nexport default TokenServices;","import React from 'react';\nimport quoteFontPairings from '../fonts/quoteFontPairings';\nimport IteratorServices from '../services/IteratorServices';\nimport TokenServices from'../services/TokenServices';\nimport jwt from 'jsonwebtoken';\nimport { API_BASE_URL } from '../config';\n\nconst GlobalContext = React.createContext();\n\nclass GlobalContextManager extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      quoteBackgroundImageUrls: [],\n      quoteFontPairings: [...quoteFontPairings],\n\n      currentQuote: {},\n      currentQuoteBgImageUrl: '',\n      currentQuoteFontPair: {},\n      currentQuoteSaved: false,\n\n      prevQuote: {},\n      prevQuoteBgImageUrl: '',\n      prevQuoteFontPair: {},\n      quoteHistory: [],\n\n      keepQuoteBackground: false,\n      keepQuoteFonts: false,\n      keepQuoteQuote: false,\n\n      userIsLoggedIn: false,\n      username: '',\n      userId: 0,\n      savedQuotes: [],\n\n      menuIsOpen: false,\n    }\n  }\n\n  //APP METHODS\n  componentDidMount() {\n    this.initializeApp();\n    const localToken = jwt.decode(TokenServices.getTokenByKey('motiv8-jwt'), {complete: true});\n    \n    if (localToken) {\n      const {\n        header,\n        payload,\n      } = localToken;\n      console.log('header', header);\n      console.log('payload', payload);\n      \n      this.setState({\n        userIsLoggedIn: true,\n        userId: payload.userId,\n        username: payload.sub\n      })\n    }\n\n  }\n\n  initializeApp() {\n    let getImages = this.getBackgroundImages(30);\n    let getQuotes = this.getQuotes(30);\n    \n    Promise.all([ getQuotes, getImages ])\n      .then(values => {\n        this.fontPairItObj = IteratorServices.createIterator(this.state.quoteFontPairings);\n        this.randomizeQuote();\n      })\n      .catch(err => console.log(err));\n  }\n  //END APP METHODS\n\n  //QUOTE METHODS\n  randomizeQuote = () => {\n    this.setState({\n      currentQuoteSaved: false\n    })\n    if(!this.state.keepBackground) {\n      this.iterateBackgroundUrl(this.backgroundUrlItObj.next());\n    }\n    if(!this.state.keepFonts) {\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n    if(!this.state.keepQuote) {\n      this.iterateQuote(this.quoteItObj.next());\n    }\n  }\n  \n  undoRandomizeQuote = () => {\n    if(!this.state.keepBackground) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteBgImageUrl: currentState.prevQuoteBgImageUrl,\n          prevQuoteBgImageUrl: currentState.currentQuoteBgImageUrl\n        }\n      })\n    }\n\n    if(!this.state.keepFonts) {\n      this.setState((currentState) => {\n        return {\n          fontPair: currentState.previousFontPair,\n          prevFontPair: currentState.fontPair\n        }\n      })\n    }\n\n    if(!this.state.keepQuote) {\n      this.setState((currentState) => {\n        return {\n          currentQuote: currentState.prevQuote,\n          prevQuote: currentState.currentQuote\n        }\n      })\n    }\n  }\n\n  saveQuote = (userId, getUpdatedSavedQuotes) => {\n    //TODO sends current quote config to favorites db table.\n\n    if(userId === 0) {\n      return;\n    }\n\n    const data = {\n      backgroundImageUrl: this.state.currentQuoteBgImageUrl,\n      quoteId: this.state.currentQuote.id,\n      bodyFont: this.state.currentQuoteFontPair.body,\n      authorFont: this.state.currentQuoteFontPair.author,\n      userId: userId,\n    }\n\n    fetch(`${API_BASE_URL}/savedQuotes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        getUpdatedSavedQuotes(userId);\n        this.setState({currentQuoteSaved: true })\n      }\n    })\n  }\n\n  //refactor out to 3 different toggle functions\n  handleCheckboxCheck = (e) => {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n    }\n  }\n\n  editFavoritesItem = (quote, history) => {\n    this.setState({\n      currentQuote: quote,\n      currentQuoteBgImageUrl: quote.backgroundimageurl,\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    }, () => {\n      history.push('/quotes');\n    })\n  }\n  //END QUOTE METHODS\n\n\n  //USER METHODS\n  createAccount = (e, userInfo) => {\n    e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        return res.json();\n      }\n    })\n    .then(resJson => {\n      this.loginUser(null, data);\n    })\n  }\n\n  loginUser = (e, userInfo) => {\n    if(e) e.preventDefault();\n    const data = {\n      username: userInfo.username,\n      password: userInfo.password\n    }\n\n    fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => res.json())\n    .then(res => {\n\n      if(res.error) {\n        console.log('error', res.error);\n        return;\n      }\n      let decodedToken = jwt.decode(res.authToken);\n      TokenServices.setToken('motiv8-jwt', res.authToken);\n      console.log(decodedToken);\n        this.setState({\n        userIsLoggedIn: true,\n        username: decodedToken.sub,\n        userId: decodedToken.userId,\n        savedQuotes: res.savedQuotes,\n        menuIsOpen: false\n      })\n      \n    })\n  }\n\n  logoutUser = () => {\n    TokenServices.removeTokenByKey('motiv8-jwt');\n    this.setState({\n      userIsLoggedIn: false,\n      userId: 0,\n      username: '',\n      savedQuotes: [],\n      menuIsOpen: false\n    })\n  }\n\n  getUpdatedSavedQuotes = (userId) => {\n    fetch(`${API_BASE_URL}/savedQuotes/${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      }\n    })\n      .then(res => res.json())\n      .then(updatedQuotesList => {\n        this.setState({\n          savedQuotes: updatedQuotesList\n        })\n      })\n  }\n\n  deleteFavoritesItem = (quoteId) => {\n    const data = { quoteId }\n    fetch(`${API_BASE_URL}/savedQuotes/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    })\n    .then(res => {\n      if(res.ok) {\n        this.setState((currentState) => {\n          let newSavedQuotes = currentState.savedQuotes.filter((savedQuote) => {\n            if(savedQuote.id === quoteId) {\n              return false;\n            }\n            else {\n              return savedQuote\n            }\n          });\n          return {\n            savedQuotes: newSavedQuotes\n          }\n        })\n      }\n    })\n  }\n  //END USER METHODS\n\n  toggleMenuIsOpen = () => {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n  //HELPER FUNCTIONS\n  getBackgroundImages(numberOfImages = 30) {\n    return fetch(`https://api.unsplash.com/photos/random?count=${numberOfImages}`, {\n      headers: {\n        Authorization: `Client-ID ${process.env.REACT_APP_API_KEY}`\n      }\n    })\n    .then(res => res.json())\n    .then(resJson => {\n      return new Promise((resolve) => {\n        this.setState({\n          quoteBackgroundImageUrls: resJson,\n        },\n        //runs after setState\n        () => {\n          this.backgroundUrlItObj = IteratorServices.createIterator(this.state.quoteBackgroundImageUrls);\n          resolve(\"backgroundUrlItObj Created\");\n        })\n      })\n    })\n  }\n\n  getQuotes(numberOfQuotes = 30) {\n    //TODO make quotes route dynamic to accept numberOfQuotes param\n    return fetch(`${API_BASE_URL}/quotes`)\n    .then(quotes => quotes.json())\n    .then(quotes => {\n      return new Promise((resolve) => {\n        this.setState({\n          quotes: quotes\n        },\n        //runs after setState\n        () => {\n          this.quoteItObj = IteratorServices.createIterator(this.state.quotes);\n          resolve(\"quoteItObj Created\");\n        })\n      });\n    });\n  }\n  \n  iterateBackgroundUrl({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteBgImageUrl: value.urls.regular,\n          prevQuoteBgImageUrl: currentState.currentQuoteBgImageUrl\n        }\n      })\n    }\n    //create new iterator when old one runs out\n    else {\n      this.getBackgroundImages(30)\n    }\n  }\n  \n  iterateFontPairing({value, done}) {\n    if(!done) {\n      this.setState((currentState) => {\n        return {\n          currentQuoteFontPair: value,\n          prevQuoteFontPair: currentState.fontPair \n        }\n      })\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      this.fontPairItObj = IteratorServices.createIterator(this.state.quoteFontPairings);\n      this.iterateFontPairing(this.fontPairItObj.next());\n    }\n  }\n  \n  iterateQuote({value, done}) {\n    if(!done) {\n      this.setState(currentState => {\n        return {\n          currentQuote: value,\n          prevQuote: currentState.currentQuote\n        }\n      })\n    }\n    else {\n      this.getQuotes(30);\n    }\n  }\n  //END HELPER FUNCTIONS\n\n  render() {\n    const globalContext = {\n      state: this.state,\n      methods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        randomizeQuote: this.randomizeQuote,\n        undoRandomizeQuote: this.undoRandomizeQuote,\n        saveQuote: this.saveQuote,\n        editFavoritesItem: this.editFavoritesItem,\n        createAccount: this.createAccount,\n        loginUser: this.loginUser,\n        logoutUser: this.logoutUser,\n        getUpdatedSavedQuotes: this.getUpdatedSavedQuotes,\n        deleteFavoritesItem: this.deleteFavoritesItem,\n        toggleMenuIsOpen: this.toggleMenuIsOpen\n      }\n    }\n  \n    return (\n      <GlobalContext.Provider value={globalContext}>\n        {this.props.children}\n      </GlobalContext.Provider>\n    );\n  }\n}\n\nexport { GlobalContext , GlobalContextManager };\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: ''\n    }\n  }\n\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      default:\n          console.error(\"onChange id not found in login form\");\n    }\n  }\n\n  render() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({methods}) => {\n          return (\n            <div>\n            <form className=\"input-form\" onSubmit={(e) => methods.loginUser(e, this.state)}>\n              <label className=\"input-form__label\" htmlFor=\"username-input\">Username</label>\n              <input \n                id=\"username-input\"\n                type=\"text\"\n                onChange={(e) => this.handleTextInput(e)}/>\n\n              <label className=\"input-form__label\" htmlFor=\"password-input\">Password</label>\n              <input \n                id=\"password-input\" \n                type=\"password\" \n                onChange={(e) => this.handleTextInput(e)} />\n\n              <input className=\"input-form__submit\" type=\"submit\" value=\"Sign In\"/>\n            </form>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class CreateAccountForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      passwordConfirm: '',\n    }\n\n  }\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'create-username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'create-password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      case 'create-password-confirm-input':\n        this.setState({\n          passwordConfirm: e.target.value\n        })\n        break;\n      default:\n        console.error(\"onChange id not found in create account form\");\n    }\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ methods }) => {\n          return (\n            <>\n              <form \n                className=\"create-account-form\" \n                onSubmit={(e) => {\n                  methods.createAccount(e, this.state);\n                  this.props.setInCreateAccountMode(false);\n                }}>\n\n                <label className=\"create-account-form__label\" htmlFor=\"username-input\">Username</label>\n                <input \n                  id=\"create-username-input\"\n                  type=\"text\"\n                  onChange={(e) => this.handleTextInput(e)}/>\n\n                <label className=\"create-account-form__label\" htmlFor=\"password-input\">Password</label>\n                <input \n                  id=\"create-password-input\" \n                  type=\"password\" \n                  onChange={(e) => this.handleTextInput(e)} />\n\n                <label className=\"create-account-form__label\" htmlFor=\"password-confirm-input\">Confirm Password</label>\n                <input \n                  id=\"create-password-confirm-input\" \n                  type=\"password\" \n                  onChange={(e) => this.handleTextInput(e)}/>\n\n                <input className=\"create-account-form__submit\" type=\"submit\" value=\"Create Account\"/>\n              </form>\n            </>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  };\n}\n","import React from 'react'\nimport LoginForm from './LoginForm';\nimport CreateAccountForm from './CreateAccountForm';\n\nexport default class AccountAccessForms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inCreateAccountMode: false\n    }\n  }\n\n  setInCreateAccountMode = (bool) => {\n    this.setState({\n      inCreateAccountMode: bool\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"account-access-forms\">\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? '' : 'highlight'}`} \n          onClick={() => this.setInCreateAccountMode(false)}>\n            Sign In\n        </button>\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? 'highlight' : ''}`} \n          onClick={() => this.setInCreateAccountMode(true)}>\n            Create Account\n        </button>\n        <div className=\"account-access-forms__selected-form\">\n          {this.state.inCreateAccountMode ? \n            <CreateAccountForm setInCreateAccountMode={this.setInCreateAccountMode}/>\n            :\n            <LoginForm />}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function UserMenu(props) {\n\n  return (\n    <GlobalContext.Consumer>\n      {({ state, methods }) => {\n          return (\n            <ul className=\"user-menu\">\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={`/user/${state.username}`} \n                onClick={() => methods.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Profile\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => methods.toggleMenuIsOpen()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Quote Generator\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => methods.logoutUser()}\n              >\n                <li className=\"user-menu__list-item\">\n                  Log Out\n                </li>\n              </NavLink>\n            </ul>\n          )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react';\nimport AccountAccessForms from './AccountAccessForms';\nimport UserMenu from './UserMenu';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class Menu extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      menuIsOpen: false,\n      userIsLoggedIn: true\n    }\n\n    this.toggleMenuIsOpen = this.toggleMenuIsOpen.bind(this);\n  }\n\n  toggleMenuIsOpen() {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state, methods }) => {\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={methods.toggleMenuIsOpen}>\n                    <span>{ state.menuIsOpen ? 'X' : 'Menu' }</span>\n                  </button>\n                  <div className=\"menu__greeting\">\n                    { state.userIsLoggedIn ? `Welcome ${state.username}`: ''}\n                  </div>\n                    { state.menuIsOpen ? \n                        state.userIsLoggedIn ? <UserMenu /> : <AccountAccessForms />\n                        :\n                        ''\n                    }\n                </header>\n              </div>\n            )\n          }\n        }\n      </GlobalContext.Consumer>\n    )\n  }    \n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function LandingPage() {\n  return (\n    <div className=\"container landing-page-container\">\n      <h1 className=\"landing-page__header\">Welcome to Motiv8</h1>  \n        <main>\n          <h2 className=\"landing-page__subheader\">Customize your inspiration</h2>\n          <div>\n            Motiv8 is a random quote generator.\n            <ul>\n              <li>Users can create unique quote, font, and background image pairings.</li>\n              <li>If a user chooses to create an account they will have the ability to save their favorite quotes to their profile.</li>\n            </ul> \n          </div>\n          <Link to={'/quotes'}>\n            <button className=\"get-started-button\">Get Started!</button>\n          </Link>\n        </main>\n    </div>\n  )\n}\n","import React from 'react';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class QuoteDisplay extends React.Component {\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ state }) => {\n          const dynamicBackgroundStyles = {\n            backgroundSize: 'cover',\n            backgroundPosition: 'center center',\n            backgroundImage: `url(${state.currentQuoteBgImageUrl})`,\n          }\n\n          const dynamicBodyFont = {\n            fontFamily: state.currentQuoteFontPair['body']\n          }\n      \n          const dynamicAuthorFont = {\n            fontFamily: state.currentQuoteFontPair['author']\n          }\n\n          return (\n            <div className=\"quote-display\"style={dynamicBackgroundStyles}>\n              <div className=\"quote-backdrop\">\n                <div className=\"quote-body\" style={dynamicBodyFont}>{state.currentQuote.quote}</div>\n                <div className=\"quote-author\" style={dynamicAuthorFont}>{state.currentQuote.author}</div>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSquare, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\n\nexport default function QuoteControls() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({ methods, state }) => {\n\n\n\n          const { \n            keepBackground,\n            keepFonts,\n            keepQuote,\n          }  = state\n\n          const iconSize = 'lg';\n          \n          return (\n            <div className=\"quote-controls-container\">\n              <h5 className=\"quote-controls-heading\">Randomize Options</h5>\n              <div className=\"quote-controls\">\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-quote-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-quote-checkbox\">\n                  <div>\n                    {keepQuote ? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Quote</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-fonts-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-fonts-checkbox\">\n                  <div>\n                    {keepFonts? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/>\n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Fonts</span>\n                </label>\n                <input\n                  onChange={(e) => methods.handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-background-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-background-checkbox\">\n                  <div>\n                    {keepBackground? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Background</span>\n                </label>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  \n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function QuoteNav() {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods, state }) => {\n\n        let {\n          currentQuoteSaved,\n          userIsLoggedIn,\n          prevQuote,\n          userId\n        } = state\n\n        let {\n          getUpdatedSavedQuotes\n        } = methods\n\n\n        return (\n          <div className=\"quote-nav-container\">\n            <button className=\"quote-nav__button randomize-button\" onClick={() => methods.randomizeQuote()}>Randomize</button>\n            <button\n              disabled={prevQuote.quote ? false : 'disabled'}\n              className={`quote-nav__button undo-button ${prevQuote.quote ? '' : 'button-disabled'}`} \n              onClick={() => methods.undoRandomizeQuote()}>\n                Undo\n            </button>\n            <button \n              disabled={userIsLoggedIn ? false : 'disabled'}\n              className={\n                `quote-nav__button save-button \n                ${currentQuoteSaved ? 'save-success' : ''}\n                ${userIsLoggedIn ? '' : 'button-disabled'}`\n              } \n              onClick={() => methods.saveQuote(userId, getUpdatedSavedQuotes)}\n              >\n                Save\n              {userIsLoggedIn\n                ? ''\n                : <div className=\"save-button__instructions\">Log in to save quotes</div>\n              }\n            </button>\n          </div>\n        )\n      }}\n    </GlobalContext.Consumer>  \n  )\n}\n","import React from 'react'\nimport QuoteDisplay from '../components/QuoteEditorPage/QuoteDisplay';\nimport QuoteControls from '../components/QuoteEditorPage/QuoteControls';\nimport QuoteNav from '../components/QuoteEditorPage/QuoteNav';\n\nexport default function QuoteEditorPage() {\n  return (\n    <div className=\"container\">\n      <QuoteControls />\n      <QuoteDisplay />\n      <QuoteNav />\n    </div>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default function FavoritesListItem(props) {\n  return (\n    <GlobalContext.Consumer>\n      {({ methods }) => {\n\n        const quoteFont={\n          fontFamily: props.quote.bodyfont\n        }\n\n        const authorFont = {\n          fontFamily: props.quote.authorfont,\n        }\n\n        return (\n          <li className=\"favorites-list-item\">\n            <div>\n              <p style={quoteFont}>{props.quote.quote}</p>\n              <p style={authorFont}>{props.quote.author}</p>\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.editFavoritesItem(props.quote, props.history)}>Edit</button>\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => methods.deleteFavoritesItem(props.savedQuoteId)}>Delete</button>\n            </div>\n            <img className=\"favorites-list-item-img\" alt='' src={props.quote.background_image_url}></img>\n          </li>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport FavoritesListItem from './FavoritesListItem';\n\nexport default function FavoritesList({ history }) {\n  return (\n    <GlobalContext.Consumer>\n      {({ state }) => {\n        return (\n          <>\n            <h3 className=\"favorites-list-heading\">Favorites</h3>\n            <ul className=\"favorites-list\">\n              { state.savedQuotes.map(quote => \n                <FavoritesListItem \n                  key={quote.id} \n                  quote={quote} \n                  history={history} \n                  savedQuoteId={quote.id}/>) }\n            </ul>\n          </>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport FavoritesList from '../components/UserProfilePage/FavoritesList.js';\n\nexport default class UserProfilePage extends React.Component{\n\n  componentDidMount() {\n    this.props.getUpdatedSavedQuotes(this.props.userId);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <FavoritesList history={this.props.history}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { GlobalContextManager } from './contexts/GlobalContextManager';\nimport Router from './router/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n      <GlobalContextManager>\n        <Router />\n      </GlobalContextManager>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Menu from '../components/Header/Menu';\nimport LandingPage from '../pages/LandingPage';\nimport QuoteEditorPage from '../pages/QuoteEditorPage';\nimport UserProfilePage from '../pages/UserProfilePage';\nimport { GlobalContext } from '../contexts/GlobalContextManager';\n\nexport default function Router(props) {\n  return (\n    <BrowserRouter>\n      <Menu />\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path=\"/quotes\" component={QuoteEditorPage} />\n        <GlobalContext.Consumer>\n          {({ state, methods }) => {\n            return (\n              <Route \n                path=\"/user/:username\" \n                render={(props) => <UserProfilePage\n                  {...props}\n                  getUpdatedSavedQuotes={methods.getUpdatedSavedQuotes}\n                  userId={state.userId}/>} \n                />\n            )\n          }}\n        </GlobalContext.Consumer>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","module.exports = {\n  PORT: process.env.PORT || 8080,\n  // other stuff\n  API_BASE_URL: process.env.REACT_APP_API_BASE_URL ||\n    \"http://localhost:8000/api\"\n};"],"sourceRoot":""}