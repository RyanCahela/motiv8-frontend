{"version":3,"sources":["config.js","fonts/quoteFontPairings.js","services/IteratorServices.js","services/TokenServices.js","services/FetchServices.js","services/UserServices.js","contexts/GlobalContextManager.js","components/Header/LoginForm.js","components/Loading/LoadingSpinner.js","components/Header/CreateAccountForm.js","components/Header/AccountAccessForms.js","components/Header/UserMenu.js","components/Header/Menu.js","components/LandingPage/HeroImage.js","components/LandingPage/LandingPage.js","components/QuoteEditorPage/QuoteDisplay.js","components/QuoteEditorPage/QuoteControls.js","components/QuoteEditorPage/QuoteNav.js","components/QuoteEditorPage/QuoteEditorPage.js","components/UserProfilePage/FavoritesListItem.js","components/UserProfilePage/FavoritesList.js","components/UserProfilePage/UserProfilePage.js","serviceWorker.js","index.js","router/Router.js"],"names":["module","exports","PORT","process","API_BASE_URL","quoteFontPairings","body","author","createIteratorObj","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","obj","regenerator_default","a","wrap","_context","prev","next","undefined","Symbol","iterator","done","value","t0","return","finish","stop","_marked","createIterator","iterable","TokenServices","getTokenByKey","key","window","localStorage","getItem","setToken","data","setItem","updateToken","removeTokenByKey","removeItem","convertResToJson","res","json","FetchServices","getBackgroundImages","numberOfImages","fetch","concat","getSavedQuotesByUsername","username","headers","Authorization","getQuotes","postSaveQuote","method","Content-Type","JSON","stringify","postNewUser","postUserLogin","deleteSavedQuoteById","id","savedQuoteId","checkIfAccountCreationError","error","setLoginToken","authToken","fetchSavedQuotes","decodedToken","jwt","decode","sub","finalizeLogin","savedQuotes","_this","this","Promise","resolve","setState","userIsLoggedIn","userId","menuIsOpen","logoutUser","GlobalContext","React","createContext","GlobalContextManager","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomizeQuote","_this$state","state","currentQuote","currentQuoteBgImageUrl","currentQuoteFontPair","keepBackground","keepFonts","keepQuote","currentQuoteSaved","currentQuoteConfig","quote","quoteBgImageUrl","quoteFontPair","pushToHistory","then","iterateBackgroundUrl","backgroundUrlIterator","iterateFontPairing","fontIterator","iterateQuote","quoteIterator","undoRandomizeQuote","prevQuote","quoteHistory","pop","setCurrentQuote","saveQuote","getUpdatedSavedQuotes","backgroundImageUrl","quoteId","bodyFont","authorFont","ok","handleCheckboxCheck","e","target","currentState","editFavoritesItem","history","background_image_url","push","loginUser","userInfo","bind","assertThisInitialized","setUpdatedSavedQuotes","deleteFavoritesItem","console","log","status","_ref","newSavedQuotes","filter","savedQuote","catch","err","toggleMenuIsOpen","setBackgroundUrlIterator","setQuoteIterator","setFontIterator","quoteConfig","_iterator$next","newFontIterator","_iterator$next2","toConsumableArray","keepQuoteBackground","keepQuoteFonts","keepQuoteQuote","initializeApp","localToken","complete","payload","_this2","getImages","getFonts","all","arguments","length","_iterator$next3","urls","regular","globalContext","GlobalState","GlobalMethods","createAccount","react_default","createElement","Provider","children","Component","LoginForm","setErrorMessage","message","errorMessage","password","preventDefault","context","toLowerCase","setMenuIsOpen","_this3","className","onSubmit","handleSubmit","htmlFor","type","onChange","handleTextInput","required","LoadingSpinner","width","height","xmlns","viewBox","preserveAspectRatio","style","shapeRendering","animationPlayState","animationDelay","background","cx","cy","fill","ng-attr-stroke","ng-attr-stroke-width","ng-attr-r","ng-attr-stroke-dasharray","stroke","stroke-width","r","stroke-dasharray","transform","attributeName","calcMode","values","keyTimes","dur","begin","repeatCount","contextType","CreateAccountForm","setCreateAccountError","setIsLoading","passwordConfirm","isLoading","loading","newUserInfo","bool","_this$state2","Fragment","AccountAccessForms","setInCreateAccountMode","inCreateAccountMode","onClick","CreateAccountForm_CreateAccountForm","assign","LoginForm_LoginForm","UserMenu","Consumer","react_router_dom","to","Menu","string","charAt","toUpperCase","slice","capitalizeFirstLetter","AccountAccessForms_AccountAccessForms","HeroImage","_useState","useState","_useState2","slicedToArray","LandingPage","QuoteDisplay","dynamicBackgroundStyles","backgroundSize","backgroundPosition","backgroundImage","dynamicBodyFont","fontFamily","dynamicAuthorFont","hasOwnProperty","QuoteControls","index_es","icon","faCheckSquare","size","faSquare","QuoteNav","isEmpty","disabled","QuoteEditorPage","QuoteDisplay_QuoteDisplay","FavoritesListItem","quoteFont","bodyfont","authorfont","alt","src","FavoritesList","_ref2","map","UserProfilePage","Boolean","location","hostname","match","ReactDOM","render","GlobalContextManager_GlobalContextManager","react_router","path","component","exact","UserProfilePage_UserProfilePage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAAAA,EAAOC,QAAU,CACfC,KAAMC,iMAAYD,MAAQ,KAE1BE,aAAcD,uLCoBDE,EAvBW,CACxB,CACEC,KAAM,0BACNC,OAAQ,+BAEV,CACED,KAAK,yBACLC,OAAO,uBAET,CACED,KAAK,mBACLC,OAAO,sBAET,CACED,KAAK,4BACLC,OAAO,yBAET,CACED,KAAK,sBACLC,OAAO,wDCnBDC,GAAV,SAAUA,EAAkBC,GAA5B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAX,GAAA,EAAAC,GAAA,EAAAC,OAAAU,EAAAH,EAAAC,KAAA,EAAAP,EACiBJ,EADjBc,OAAAC,YAAA,UAAAd,GAAAI,EAAAD,EAAAQ,QAAAI,KAAA,CAAAN,EAAAE,KAAA,SAEI,OADMN,EADVD,EAAAY,MAAAP,EAAAE,KAAA,EAEUN,EAFV,OAAAL,GAAA,EAAAS,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAAAR,GAAA,EAAAC,EAAAO,EAAAQ,GAAA,QAAAR,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAV,GAAA,MAAAG,EAAAe,QAAAf,EAAAe,SAAA,WAAAT,EAAAC,KAAA,IAAAT,EAAA,CAAAQ,EAAAE,KAAA,eAAAT,EAAA,eAAAO,EAAAU,OAAA,mBAAAV,EAAAU,OAAA,6BAAAV,EAAAW,SAAAC,EAAA,iCAMO,SAASC,EAAeC,GAC7B,OAAOzB,EAAkByB,GCP3B,IAeeC,EAfO,CACpBC,cADoB,SACNC,GACZ,OAAOC,OAAOC,aAAaC,QAAQH,IAErCI,SAJoB,SAIXJ,EAAKK,GACZJ,OAAOC,aAAaI,QAAQN,EAAKK,IAEnCE,YAPoB,SAORP,EAAKK,GACfJ,OAAOC,aAAaI,QAAQN,EAAKK,IAEnCG,iBAVoB,SAUHR,GACfC,OAAOC,aAAaO,WAAWT,aCiD5B,SAASU,EAAiBC,GAC7B,OAAOA,EAAIC,OAGAC,MA7DO,CACpBC,oBADoB,SACAC,GAClB,OAAOC,MAAK,GAAAC,OAAIjD,eAAJ,sBAAAiD,OAAqCF,KAEnDG,yBAJoB,SAIKC,GACvB,OAAOH,MAAK,GAAAC,OAAIjD,eAAJ,iBAAAiD,OAAgCE,GAAY,CACtDC,QAAS,CACPC,cAAA,UAAAJ,OAA2BnB,EAAcC,cAAc,mBAI7DuB,UAXoB,WAYlB,OAAON,MAAK,GAAAC,OAAIjD,eAAJ,aAEduD,cAdoB,SAcNlB,GACZ,OAAOW,MAAK,GAAAC,OAAIjD,eAAJ,gBAAgC,CAC1CwD,OAAQ,OACRJ,QAAS,CACPK,eAAgB,mBAChBJ,cAAA,UAAAJ,OAA2BnB,EAAcC,cAAc,gBAEzD7B,KAAMwD,KAAKC,UAAUtB,MAGzBuB,YAxBoB,SAwBRvB,GACV,OAAOW,MAAK,GAAAC,OAAIjD,eAAJ,UAA0B,CACpCwD,OAAQ,OACRJ,QAAS,CACPK,eAAgB,oBAElBvD,KAAMwD,KAAKC,UAAUtB,MAGzBwB,cAjCoB,SAiCNxB,GACZ,OAAOW,MAAK,GAAAC,OAAIjD,eAAJ,gBAAgC,CAC1CwD,OAAQ,OACRJ,QAAS,CACPK,eAAgB,oBAElBvD,KAAMwD,KAAKC,UAAUtB,MAGzByB,qBA1CoB,SA0CCC,GACnB,OAAOf,MAAK,GAAAC,OAAIjD,eAAJ,iBAAiC,CAC3CwD,OAAQ,SACRJ,QAAS,CACPK,eAAgB,mBAChBJ,cAAA,UAAAJ,OAA2BnB,EAAcC,cAAc,gBAEzD7B,KAAMwD,KAAKC,UAAU,CAACK,aAAgBD,OAG1CrB,iBApDoB,SAoDHC,GACf,OAAOA,EAAIC,0BChDR,SAASqB,EAA4BrB,GAC1C,GAAGA,EAAKsB,MACN,MAAMtB,EAAKsB,MAEb,OAAOtB,EAGF,SAASuB,EAAcxB,GAC5B,GAAGA,EAAIuB,MACL,MAAMvB,EAAIuB,MAEZ,OAAOpC,EAAcM,SAAS,aAAcO,EAAIyB,WAG3C,SAASC,IACd,IAAIC,EAAeC,IAAIC,OAAO1C,EAAcC,cAAc,eAC1D,OAAOc,EAAcK,yBAAyBoB,EAAaG,KAGtD,SAASC,EAAcC,GAAa,IAAAC,EAAAC,KACrCP,EAAeC,IAAIC,OAAO1C,EAAcC,cAAc,eAC1D,OAAO,IAAI+C,QAAQ,SAACC,GAClBH,EAAKI,SAAS,CACVC,gBAAgB,EAChB9B,SAAUmB,EAAaG,IACvBS,OAAQZ,EAAaY,OACrBP,YAAYA,EACZQ,YAAY,GACXJ,KAIF,SAASK,IACdtD,EAAcU,iBAAiB,cAC/BqC,KAAKG,SAAS,CACZC,gBAAgB,EAChBC,OAAQ,EACR/B,SAAU,GACVwB,YAAa,GACbQ,YAAY,IAIhB,IC1CME,EAAgBC,IAAMC,gBAEtBC,cAEJ,SAAAA,EAAYC,GAAO,IAAAb,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACjBZ,EAAAc,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMY,KAoDRM,eAAiB,WAAM,IAAAC,EAQjBpB,EAAKqB,MANPC,EAFmBF,EAEnBE,aACAC,EAHmBH,EAGnBG,uBACAC,EAJmBJ,EAInBI,qBACAC,EALmBL,EAKnBK,eACAC,EANmBN,EAMnBM,UACAC,EAPmBP,EAOnBO,UAGF3B,EAAKI,SAAS,CAEZwB,mBAAmB,IAGrB,IAAIC,EAAqB,CACvBC,MAAOR,EACPS,gBAAiBR,EACjBS,cAAeR,GAGjBxB,EAAKiC,cAAcJ,GAChBK,KAAK,WACAT,GACFzB,EAAKmC,qBAAqBnC,EAAKoC,uBAE7BV,GACF1B,EAAKqC,mBAAmBrC,EAAKsC,cAE3BX,GACF3B,EAAKuC,aAAavC,EAAKwC,kBAnFZxC,EAwFnByC,mBAAqB,WACnB,IAAMC,EAAY1C,EAAKqB,MAAMsB,aAAaC,MAC1C5C,EAAK6C,gBAAgBH,IA1FJ1C,EA6FnB8C,UAAY,SAACxC,EAAQyC,GACnB,GAAc,IAAXzC,EAAH,CAGA,IAAM7C,EAAO,CACXuF,mBAAoBhD,EAAKqB,MAAME,uBAC/B0B,QAASjD,EAAKqB,MAAMC,aAAanC,GACjC+D,SAAUlD,EAAKqB,MAAMG,qBAAqBlG,KAC1C6H,WAAYnD,EAAKqB,MAAMG,qBAAqBjG,OAC5C+E,OAAQA,GAEVrC,EAAcU,cAAclB,GAC3ByE,KAAK,SAAAnE,GACDA,EAAIqF,KACLL,EAAsBzC,GACtBN,EAAKI,SAAS,CAACwB,mBAAmB,SA5GrB5B,EAkHnBqD,oBAAsB,SAACC,GACrB,OAAOA,EAAEC,OAAOpE,IACd,IAAK,sBACHa,EAAKI,SAAS,SAACoD,GACb,MAAO,CACL7B,WAAY6B,EAAa7B,aAG7B,MACF,IAAK,sBACH3B,EAAKI,SAAS,SAACoD,GACb,MAAO,CACL9B,WAAY8B,EAAa9B,aAG7B,MACF,IAAK,2BACH1B,EAAKI,SAAS,SAACoD,GACb,MAAO,CACL/B,gBAAiB+B,EAAa/B,oBArIrBzB,EA6InByD,kBAAoB,SAAC3B,EAAO4B,GAC1B1D,EAAKI,SAAS,CACZkB,aAAcQ,EACdP,uBAAwBO,EAAM6B,qBAC9BlC,gBAAgB,EAChBC,WAAW,EACXC,WAAW,GACV,WACD+B,EAAQE,KAAK,cArJE5D,EA2JnB6D,UAAY,SAACC,GACX,OAAO7F,EAAcgB,cAAc6E,GAC1B5B,KAAKpE,GACLoE,KAAK3C,EAAcwE,KAAdjD,OAAAkD,EAAA,EAAAlD,CAAAd,KACLkC,KAAKzC,GACLyC,KAAKpE,GACLoE,KAAKpC,EAAciE,KAAdjD,OAAAkD,EAAA,EAAAlD,CAAAd,MAjKGA,EAoKnBQ,WAAa,kBAAMA,EAAWU,KAAXJ,OAAAkD,EAAA,EAAAlD,CAAAd,KApKAA,EAsKnB+C,sBAAwB,SAACxE,GACvBN,EAAcK,yBAAyBC,GACtC2D,KAAKpE,GACLoE,KAAKlC,EAAKiE,wBAzKMjE,EA4KnBkE,oBAAsB,SAAC9E,GACrBnB,EAAciB,qBAAqBE,GAClC8C,KAAK,SAAAnE,GACJoG,QAAQC,IAAI,aAAcrG,GACR,MAAfA,EAAIsG,QACLrE,EAAKI,SAAS,SAAAkE,GAAqB,IAC7BC,EAD6BD,EAAlBvE,YACkByE,OAAO,SAACC,GACvC,QAASA,EAAWtF,KAAOC,KAG7B,OADA+E,QAAQC,IAAI,iBAAkBG,GACvB,CACLxE,YAAawE,OAKpBG,MAAM,SAAAC,GAAG,OAAIR,QAAQ7E,MAAMqF,MA5LX3E,EAgMnB4E,iBAAmB,WACjB5E,EAAKI,SAAS,SAACoD,GACb,MAAO,CACLjD,YAAaiD,EAAajD,eAnMbP,EAyMnB6E,yBAA2B,SAACrI,GAC1B,OAAO,IAAI0D,QAAQ,SAACC,GAClBH,EAAKoC,sBAAwB5F,EAC7B2D,OA5MeH,EAgNnB8E,iBAAmB,SAACtI,GAClB,OAAO,IAAI0D,QAAQ,SAACC,GAClBH,EAAKwC,cAAgBhG,EACrB2D,OAnNeH,EAuNnB+E,gBAAkB,SAACvI,GACjB,OAAO,IAAI0D,QAAQ,SAACC,GAClBH,EAAKsC,aAAe9F,EACpB2D,EAAQH,EAAKsC,iBA1NEtC,EA8NnBiE,sBAAwB,SAACjG,GACvB,OAAO,IAAIkC,QAAQ,SAACC,GAClBH,EAAKI,SAAS,CAAEL,YAAa/B,GAAQmC,MAhOtBH,EAoOnB6C,gBAAkB,SAAC9G,GACjBiE,EAAKI,SAAS,CACZkB,aAAcvF,EAAI+F,MAClBP,uBAAwBxF,EAAIgG,gBAC5BP,qBAAsBzF,EAAIiG,iBAxOXhC,EA4OnBiC,cAAgB,SAAC+C,GACf,OAAO,IAAI9E,QAAQ,SAACC,GAClBH,EAAKI,SAAS,SAACoD,GACb,IAAIE,EAAUF,EAAab,aAE3B,OADAe,EAAQE,KAAKoB,GACN,CACLrC,aAAce,IAEfvD,MApPYH,EAuRnBqC,mBAAqB,SAAC7F,GAAa,IAAAyI,EACXzI,EAASH,OAAxBK,EAD0BuI,EAC1BvI,MACP,GAFiCuI,EACnBxI,KAIT,CAEH,IAAIyI,EAAkBlI,EAAegD,EAAKqB,MAAMhG,mBAChD2E,EAAK+E,gBAAgBG,GACdhD,KAAKlC,EAAKqC,yBANjBrC,EAAKI,SAAS,CAAEoB,qBAAsB9E,KA1RvBsD,EAoSnBuC,aAAe,SAAC/F,GAAa,IAAA2I,EACH3I,EAASH,OAAzBK,EADmByI,EACnBzI,MADmByI,EACZ1I,KAKbuD,EAAKtB,UAAU,IAHfsB,EAAKI,SAAS,CAACkB,aAAc5E,KArS/BsD,EAAKqB,MAAQ,CACXmB,cAAe,GACfJ,sBAAuB,GACvBE,aAAc,GACdjH,kBAAkByF,OAAAsE,EAAA,EAAAtE,CAAKzF,GAEvBiG,aAAc,GACdC,uBAAwB,GACxBC,qBAAsB,GACtBI,mBAAmB,EAEnBe,aAAc,GAEd0C,qBAAqB,EACrBC,gBAAgB,EAChBC,gBAAgB,EAEhBlF,gBAAgB,EAChB9B,SAAU,GACV+B,OAAQ,EACRP,YAAa,IAtBEC,mFA4BjBC,KAAKuF,gBACL,IAAMC,EAAa9F,IAAIC,OAAO1C,EAAcC,cAAc,cAAe,CAACuI,UAAU,IAEpF,GAAID,EAAY,KACNE,EAAYF,EAAZE,QACR1F,KAAKG,SAAS,CACZC,gBAAgB,EAChBC,OAAQqF,EAAQrF,OAChB/B,SAAUoH,EAAQ9F,+CAKR,IAAA+F,EAAA3F,KACV4F,EAAY5F,KAAK/B,oBAAoB,IACrCQ,EAAYuB,KAAKvB,UAAU,IAC3BoH,EAAW7F,KAAK6F,WAEpB5F,QAAQ6F,IAAI,CAAErH,EAAWmH,EAAWC,IACjC5D,KAAK,kBAAM0D,EAAKzE,mBAChBuD,MAAM,SAAAC,GAAG,OAAIR,QAAQ7E,MAAMqF,mDAwMS,IAArBxG,EAAqB6H,UAAAC,OAAA,QAAA3J,IAAA0J,UAAA,GAAAA,UAAA,GAAJ,GACnC,OAAO/H,EAAcC,oBAAoBC,GAChC+D,KAAKpE,GACLoE,KAAKlF,GACLkF,KAAKjC,KAAK4E,8DAGUmB,UAAAC,OAAA,QAAA3J,IAAA0J,UAAA,IAAAA,UAAA,GAE7B,OAAO/H,EAAcS,YACZwD,KAAKpE,GACLoE,KAAKlF,GACLkF,KAAKjC,KAAK6E,qDAInB,IAAMxC,EAAetF,EAAeiD,KAAKoB,MAAMhG,mBAC/C,OAAO4E,KAAK8E,gBAAgBzC,gDAGT9F,GAAU,IAAA0J,EACP1J,EAASH,OAAxBK,EADsBwJ,EACtBxJ,MADsBwJ,EACfzJ,KAGZwD,KAAK/B,oBAAoB,IAGzB+B,KAAKG,SAAS,CAAEmB,uBAAwB7E,EAAMyJ,KAAKC,2CA6BrD,IAAMC,EAAgB,CACpBC,YAAarG,KAAKoB,MAClBkF,cAAe,CACblD,oBAAqBpD,KAAKoD,oBAC1BlC,eAAgBlB,KAAKkB,eACrBsB,mBAAoBxC,KAAKwC,mBACzBK,UAAW7C,KAAK6C,UAChB0D,cAAevG,KAAKuG,cACpB3C,UAAW5D,KAAK4D,UAChBrD,WAAYP,KAAKO,WACjBuC,sBAAuB9C,KAAK8C,sBAC5BmB,oBAAqBjE,KAAKiE,oBAC1BU,iBAAkB3E,KAAK2E,mBAI3B,OACE6B,EAAAxK,EAAAyK,cAACjG,EAAckG,SAAf,CAAwBjK,MAAO2J,GAC5BpG,KAAKY,MAAM+F,iBApUelG,IAAMmG,2BCRpBC,cACnB,SAAAA,EAAYjG,GAAO,IAAAb,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAAb,KAAA6G,IACjB9G,EAAAc,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAgG,GAAA5F,KAAAjB,KAAMY,KA6BRkG,gBAAkB,SAACC,GACjBhH,EAAKI,SAAS,CACZ6G,aAAcD,KA9BhBhH,EAAKqB,MAAQ,CACX9C,SAAU,GACV2I,SAAU,GACVD,aAAc,IALCjH,sFAUjBC,KAAK8G,gBAAgB,4CAGPzD,GACd,OAAQA,EAAEC,OAAOpE,IACf,IAAK,iBACHc,KAAKG,SAAS,CACZ7B,SAAU+E,EAAEC,OAAO7G,QAErB,MACF,IAAK,iBACHuD,KAAKG,SAAS,CACZ8G,SAAU5D,EAAEC,OAAO7G,QAErB,MACF,QACIyH,QAAQ7E,MAAM,6EAUTgE,GAAG,IAAAsC,EAAA3F,KACdqD,EAAE6D,iBADY,IAENZ,EAAkBtG,KAAKmH,QAAvBb,cAFMnF,EAGiBnB,KAAKoB,MAA5B9C,EAHM6C,EAGN7C,SAAU2I,EAHJ9F,EAGI8F,SAEd3I,GAAa2I,EAKjBX,EAAc1C,UAAU,CACtBtF,SAAU0B,KAAKoB,MAAM9C,SAAS8I,cAC9BH,SAAUjH,KAAKoB,MAAM6F,WAEtBhF,KAAK,kBAAM0D,EAAK/E,MAAM6C,QAAQE,KAAK,aACnC1B,KAAK,kBAAM0D,EAAK/E,MAAMyG,eAAc,KACpC5C,MAAM,SAAAC,GACLiB,EAAKmB,gBAAgBpC,KAXrB1E,KAAK8G,gBAAgB,+EAehB,IAAAQ,EAAAtH,KACCgH,EAAiBhH,KAAKoB,MAAtB4F,aACR,OACER,EAAAxK,EAAAyK,cAAA,WACED,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,oBACbf,EAAAxK,EAAAyK,cAAA,8BACAD,EAAAxK,EAAAyK,cAAA,0BACAD,EAAAxK,EAAAyK,cAAA,6BAEDO,EACGR,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,iBAAiBP,GAChC,GAEJR,EAAAxK,EAAAyK,cAAA,QAAMc,UAAU,aAAaC,SAAU,SAACnE,GAAD,OAAOiE,EAAKG,aAAapE,KAC9DmD,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,oBAAoBG,QAAQ,kBAA7C,YACAlB,EAAAxK,EAAAyK,cAAA,SACEvH,GAAG,iBACHyI,KAAK,OACLC,SAAU,SAACvE,GAAD,OAAOiE,EAAKO,gBAAgBxE,IACtCyE,UAAQ,IAEVtB,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,oBAAoBG,QAAQ,kBAA7C,YACAlB,EAAAxK,EAAAyK,cAAA,SACEvH,GAAG,iBACHyI,KAAK,WACLC,SAAU,SAACvE,GAAD,OAAOiE,EAAKO,gBAAgBxE,IACtCyE,UAAQ,IACVtB,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,qBAAqBI,KAAK,SAASlL,MAAM,qBArF7BmK,aCDxB,SAASmB,IACtB,OACIvB,EAAAxK,EAAAyK,cAAA,OACEuB,MAAM,QACNC,OAAO,QACPC,MAAM,6BACNC,QAAQ,cACRC,oBAAoB,WACpBb,UAAU,cACVc,MAAO,CAACC,eAAgB,OAChBC,mBAAoB,UACpBC,eAAgB,KAChBC,WAAY,SAClBjC,EAAAxK,EAAAyK,cAAA,UACEiC,GAAG,KACHC,GAAG,KACHC,KAAK,OACLC,iBAAe,mBACfC,uBAAqB,mBACrBC,YAAU,oBACVC,2BAAyB,uBACzBC,OAAO,UACPC,eAAa,KACbC,EAAE,KACFC,mBAAiB,uCACjBf,MAAO,CAACE,mBAAoB,UAAWC,eAAgB,MACvDa,UAAU,yBACV7C,EAAAxK,EAAAyK,cAAA,oBACE6C,cAAc,YACd3B,KAAK,SACL4B,SAAS,SACTC,OAAO,oBACPC,SAAS,MACTC,IAAI,KACJC,MAAM,KACNC,YAAY,aACZvB,MAAO,CAACE,mBAAoB,UAAWC,eAAgB,UDyDrE3B,EAAUgD,YAAcrJ,MEzFHsJ,cAEnB,SAAAA,EAAYlJ,GAAO,IAAAb,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAAb,KAAA8J,IACjB/J,EAAAc,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAiJ,GAAA7I,KAAAjB,KAAMY,KAqERmJ,sBAAwB,SAAChD,GACvBhH,EAAKI,SAAS,CACZ6G,aAAcD,GACb,WACDhH,EAAKiK,cAAa,MAxEpBjK,EAAKqB,MAAQ,CACX9C,SAAU,GACV2I,SAAU,GACVgD,gBAAiB,GACjBjD,aAAc,GACdkD,WAAW,GAPInK,+EAWHsD,GACd,OAAQA,EAAEC,OAAOpE,IACf,IAAK,wBACHc,KAAKG,SAAS,CACZ7B,SAAU+E,EAAEC,OAAO7G,QAErB,MACF,IAAK,wBACHuD,KAAKG,SAAS,CACZ8G,SAAU5D,EAAEC,OAAO7G,QAErB,MACF,IAAK,gCACHuD,KAAKG,SAAS,CACZ8J,gBAAiB5G,EAAEC,OAAO7G,QAE5B,MACF,QACEyH,QAAQ7E,MAAM,sFAIPgE,GAAG,IAAAsC,EAAA3F,KACdqD,EAAE6D,iBADY,IAAA/F,EAGsBnB,KAAKoB,MAAnC6F,EAHQ9F,EAGR8F,SAAUgD,EAHF9I,EAGE8I,gBACbhD,IAAagD,EAMhBjK,KAAKG,SAAS,CACZgK,SAAS,GACR,WAED,IAAIC,EAAc,CAChB9L,SAAUqH,EAAKvE,MAAM9C,SAAS8I,cAC9BH,SAAUtB,EAAKvE,MAAM6F,UAGjBX,EAAkBX,EAAKwB,QAAvBb,eJxDL,SAAuB8D,GAC5B,OAAOpM,EAAce,YAAYqL,IIwD7B7D,CAAc6D,GACXnI,KAAKpE,GACLoE,KAAK7C,GACL6C,KAAK,SAAAoC,GAAA,IAAG/F,EAAH+F,EAAG/F,SAAH,OAAkBgI,EAAc1C,UAAU,CAAEtF,WAAU2I,eAC3DhF,KAAK,kBAAM0D,EAAK/E,MAAMyG,eAAc,KACpCpF,KAAK,kBAAM0D,EAAK/E,MAAM6C,QAAQE,KAAK,aACnC1B,KAAK,kBAAM0D,EAAKqE,cAAa,KAC7BvF,MAAMkB,EAAKoE,yBAtBd/J,KAAKG,SAAS,CACZ6G,aAAc,8DAyBPqD,GACXrK,KAAKG,SAAS,CACZ+J,UAAWG,qCAYN,IAAA/C,EAAAtH,KAAAsK,EAC6BtK,KAAKoB,MAAjC4F,EADDsD,EACCtD,aAAckD,EADfI,EACeJ,UAEtB,OACE1D,EAAAxK,EAAAyK,cAAAD,EAAAxK,EAAAuO,SAAA,KACE/D,EAAAxK,EAAAyK,cAAA,QACEc,UAAU,sBACVC,SAAU,SAACnE,GACTiE,EAAKG,aAAapE,KAEnB6G,EACC1D,EAAAxK,EAAAyK,cAACsB,EAAD,MACAvB,EAAAxK,EAAAyK,cAAAD,EAAAxK,EAAAuO,SAAA,KACCvD,EACGR,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,iBAAiBP,GAChC,GAEJR,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,6BAA6BG,QAAQ,kBAAtD,YACAlB,EAAAxK,EAAAyK,cAAA,SACEvH,GAAG,wBACHyI,KAAK,OACLC,SAAU,SAACvE,GAAD,OAAOiE,EAAKO,gBAAgBxE,IACtCyE,UAAQ,IAEVtB,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,6BAA6BG,QAAQ,kBAAtD,YACAlB,EAAAxK,EAAAyK,cAAA,SACEvH,GAAG,wBACHyI,KAAK,WACLC,SAAU,SAACvE,GAAD,OAAOiE,EAAKO,gBAAgBxE,IACtCyE,UAAQ,IAEVtB,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,6BAA6BG,QAAQ,0BAAtD,oBACAlB,EAAAxK,EAAAyK,cAAA,SACEvH,GAAG,gCACHyI,KAAK,WACLC,SAAU,SAACvE,GAAD,OAAOiE,EAAKO,gBAAgBxE,IACtCyE,UAAQ,KAGZtB,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,8BAA8BI,KAAK,SAASlL,MAAM,4BAvH9BmK,aA8H/CkD,EAAkBD,YAAcrJ,MChIXgK,cACnB,SAAAA,EAAY5J,GAAO,IAAAb,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAAb,KAAAwK,IACjBzK,EAAAc,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAA2J,GAAAvJ,KAAAjB,KAAMY,KAMR6J,uBAAyB,SAACJ,GACxBtK,EAAKI,SAAS,CACZuK,oBAAqBL,KAPvBtK,EAAKqB,MAAQ,CACXsJ,qBAAqB,GAHN3K,wEAaV,IAAA4F,EAAA3F,KACP,OACEwG,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,wBACbf,EAAAxK,EAAAyK,cAAA,UACEc,UAAS,gCAAAnJ,OAAkC4B,KAAKoB,MAAMsJ,oBAAsB,GAAK,aACjFC,QAAS,kBAAMhF,EAAK8E,wBAAuB,KAF7C,WAKAjE,EAAAxK,EAAAyK,cAAA,UACEc,UAAS,gCAAAnJ,OAAkC4B,KAAKoB,MAAMsJ,oBAAsB,YAAc,IAC1FC,QAAS,kBAAMhF,EAAK8E,wBAAuB,KAF7C,kBAKAjE,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,uCACZvH,KAAKoB,MAAMsJ,oBACVlE,EAAAxK,EAAAyK,cAACmE,EAAD/J,OAAAgK,OAAA,CAAmBJ,uBAAwBzK,KAAKyK,wBAA4BzK,KAAKY,QAEjF4F,EAAAxK,EAAAyK,cAACqE,EAADjK,OAAAgK,OAAA,GAAe7K,KAAKY,MAApB,CAA2ByG,cAAerH,KAAKY,MAAMyG,0BA/BjB5G,IAAMmG,WCAvC,SAASmE,EAASnK,GAE/B,OACE4F,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA3G,GAAoC,IAAjCgC,EAAiChC,EAAjCgC,YAAaC,EAAoBjC,EAApBiC,cACb,OACEE,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,aACZf,EAAAxK,EAAAyK,cAACwE,EAAA,EAAD,CACE1D,UAAU,6BACV2D,GAAE,SAAA9M,OAAWiI,EAAY/H,UACzBqM,QAAS,kBAAM/J,EAAMyG,eAAc,KAEnCb,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,wBAAd,YAIFf,EAAAxK,EAAAyK,cAACwE,EAAA,EAAD,CACE1D,UAAU,6BACV2D,GAAI,UACJP,QAAS,kBAAM/J,EAAMyG,eAAc,KAEnCb,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,wBAAd,oBAIFf,EAAAxK,EAAAyK,cAACwE,EAAA,EAAD,CACE1D,UAAU,6BACV2D,GAAI,IACJP,QAAS,WACPrE,EAAc/F,aACdK,EAAMyG,eAAc,KAGtBb,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,wBAAd,eAWhBwD,EAASlB,YAAcrJ,MC3CF2K,cAEnB,SAAAA,EAAYvK,GAAO,IAAAb,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAAb,KAAAmL,IACjBpL,EAAAc,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAsK,GAAAlK,KAAAjB,KAAMY,KAORyG,cAAgB,SAACgD,GACftK,EAAKI,SAAS,SAACoD,GACb,MAAO,CACLjD,WAAY+J,MAThBtK,EAAKqB,MAAQ,CACXd,YAAY,EACZF,gBAAgB,GAJDL,qFAgBGqL,GAGpB,OADkBA,EAAOC,OAAO,GAAGC,cACdF,EAAOG,MAAM,EAAGH,EAAOpF,yCAGrC,IAAAL,EAAA3F,KACP,OACEwG,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA3G,GAAqB,IAAlBgC,EAAkBhC,EAAlBgC,YACM/F,EAAeqF,EAAKvE,MAApBd,WACN,OACEkG,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,kBACbf,EAAAxK,EAAAyK,cAAA,UAAQc,UAAU,QAChBf,EAAAxK,EAAAyK,cAAA,UAAQc,UAAU,eAAeoD,QAAS,kBAAMhF,EAAK0B,eAAe/G,KAClEkG,EAAAxK,EAAAyK,cAAA,YAAQnG,EAAa,QAAU,SAEjCkG,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,kBACXlB,EAAYjG,eAAZ,WAAAhC,OAAwCuH,EAAK6F,sBAAsBnF,EAAY/H,WAAa,IAE5FgC,EACE+F,EAAYjG,eACVoG,EAAAxK,EAAAyK,cAACsE,EAADlK,OAAAgK,OAAA,GAAclF,EAAK/E,MAAnB,CAA0ByG,cAAe1B,EAAK0B,iBAC9Cb,EAAAxK,EAAAyK,cAACgF,EAAD5K,OAAAgK,OAAA,GAAwBlF,EAAK/E,MAA7B,CAAoCyG,cAAe1B,EAAK0B,iBAC1D,cA1CU5G,IAAMmG,oBCHzB,SAAS8E,IAEtB,IAFkCC,EAQMC,mBANpB,CAClB/J,MAAK,qHAELvG,OAAQ,YALwBuQ,EAAAhL,OAAAiL,EAAA,EAAAjL,CAAA8K,EAAA,GAQ3BtK,EAR2BwK,EAAA,GAAAA,EAAA,GAUlC,OACErF,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,wBACbf,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,wBAAd,UACAf,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,oBACbf,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,gBAAgBlG,EAAaQ,OAC5C2E,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,uBAAuBlG,EAAa/F,UCb5C,SAASyQ,EAAT1H,GAAkC,IAAXZ,EAAWY,EAAXZ,QACpC,OACE+C,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,0BACbf,EAAAxK,EAAAyK,cAACiF,EAAD,MACAlF,EAAAxK,EAAAyK,cAAA,QAAMc,UAAU,8BACdf,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,sBACbf,EAAAxK,EAAAyK,cAAA,iDACAD,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,sBACZf,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,2BACZf,EAAAxK,EAAAyK,cAAA,KAAGc,UAAU,sCACbf,EAAAxK,EAAAyK,cAAA,QAAMc,UAAU,2BAAhB,8DAEFf,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,2BACZf,EAAAxK,EAAAyK,cAAA,KAAGc,UAAU,0CACbf,EAAAxK,EAAAyK,cAAA,QAAMc,UAAU,2BAAhB,wDAKRf,EAAAxK,EAAAyK,cAAA,UAAQc,UAAU,yBAAyBoD,QAAS,kBAAMlH,EAAQE,KAAK,aAAvE,oBCpBeqI,6MACnB5K,MAAQ,CACN+I,SAAS,2EAIT,OACE3D,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA3G,GAAqB,IAAlBgC,EAAkBhC,EAAlBgC,YAGAhF,EAGEgF,EAHFhF,aACAC,EAEE+E,EAFF/E,uBACAC,EACE8E,EADF9E,qBAGI0K,EAA0B,CAC9BC,eAAgB,QAChBC,mBAAoB,gBACpBC,gBAAe,OAAAhO,OAASkD,EAAT,MAGX+K,EAAkB,CACtBC,WAAY/K,EAAoB,MAG5BgL,EAAoB,CACxBD,WAAY/K,EAAoB,QAGlC,OACEiF,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,gBAAec,MAAO4D,GAClC5K,EAAamL,eAAe,SAC3BhG,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,kBACbf,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,aAAac,MAAOgE,GAAkBhL,EAAaQ,OAClE2E,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,eAAec,MAAOkE,GAAoBlL,EAAa/F,SAExEkL,EAAAxK,EAAAyK,cAACsB,EAAD,gBArC0BtH,IAAMmG,2BCEjC,SAAS6F,IAEpB,OACEjG,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA3G,GAAoC,IAAjCgC,EAAiChC,EAAjCgC,YAAaC,EAAoBjC,EAApBiC,cAEb9E,EAGG6E,EAHH7E,eACAC,EAEG4E,EAFH5E,UACAC,EACG2E,EADH3E,UAIA0B,EACEkD,EADFlD,oBAKF,OACEoD,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,4BACbf,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,0BAAd,qBACAf,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,kBACbf,EAAAxK,EAAAyK,cAAA,SACEmB,SAAU,SAACvE,GAAD,OAAOD,EAAoBC,IACrCsE,KAAK,WACLzI,GAAG,wBACLsH,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,wBAAwBG,QAAQ,uBAC/ClB,EAAAxK,EAAAyK,cAAA,WACG/E,EACC8E,EAAAxK,EAAAyK,cAACiG,EAAA,EAAD,CAAiBC,KAAMC,IAAeC,KAbjC,OAeLrG,EAAAxK,EAAAyK,cAACiG,EAAA,EAAD,CAAiBC,KAAMG,IAAUD,KAf5B,QAiBTrG,EAAAxK,EAAAyK,cAAA,QAAMc,UAAU,+BAAhB,eAEFf,EAAAxK,EAAAyK,cAAA,SACEmB,SAAU,SAACvE,GAAD,OAAOD,EAAoBC,IACrCsE,KAAK,WACLzI,GAAG,wBACLsH,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,wBAAwBG,QAAQ,uBAC/ClB,EAAAxK,EAAAyK,cAAA,WACGhF,EACC+E,EAAAxK,EAAAyK,cAACiG,EAAA,EAAD,CAAiBC,KAAMC,IAAeC,KA1BjC,OA4BLrG,EAAAxK,EAAAyK,cAACiG,EAAA,EAAD,CAAiBC,KAAMG,IAAUD,KA5B5B,QA8BTrG,EAAAxK,EAAAyK,cAAA,QAAMc,UAAU,+BAAhB,eAEFf,EAAAxK,EAAAyK,cAAA,SACEmB,SAAU,SAACvE,GAAD,OAAOD,EAAoBC,IACrCsE,KAAK,WACLzI,GAAG,6BACLsH,EAAAxK,EAAAyK,cAAA,SAAOc,UAAU,wBAAwBG,QAAQ,4BAC/ClB,EAAAxK,EAAAyK,cAAA,WACGjF,EACCgF,EAAAxK,EAAAyK,cAACiG,EAAA,EAAD,CAAiBC,KAAMC,IAAeC,KAvCjC,OAyCLrG,EAAAxK,EAAAyK,cAACiG,EAAA,EAAD,CAAiBC,KAAMG,IAAUD,KAzC5B,QA2CTrG,EAAAxK,EAAAyK,cAAA,QAAMc,UAAU,+BAAhB,wBC3DH,SAASwF,IAEtB,SAASC,EAAQtK,GACf,OAAOA,EAAasD,OAAS,EAG/B,OACEQ,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA3G,GAAoC,IAAjCgC,EAAiChC,EAAjCgC,YAAaC,EAAoBjC,EAApBiC,cAGb3E,EAIE0E,EAJF1E,kBACAvB,EAGEiG,EAHFjG,eACAsC,EAEE2D,EAFF3D,aACArC,EACEgG,EADFhG,OAIAyC,EAIEwD,EAJFxD,sBACA5B,EAGEoF,EAHFpF,eACA2B,EAEEyD,EAFFzD,UACAL,EACE8D,EADF9D,mBAGF,OACEgE,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,uBACbf,EAAAxK,EAAAyK,cAAA,UAAQc,UAAU,qCAAqCoD,QAAS,kBAAMzJ,MAAtE,aACAsF,EAAAxK,EAAAyK,cAAA,UACEwG,UAAUD,EAAQtK,IAAwB,WAC1C6E,UAAS,iCAAAnJ,OAAmC4O,EAAQtK,GAAgB,GAAK,mBACzEiI,QAAS,kBAAMnI,MAHjB,QAMAgE,EAAAxK,EAAAyK,cAAA,UACEwG,UAAU7M,GAAyB,WACnCmH,UAAS,mDAAAnJ,OAELuD,EAAoB,eAAiB,GAFhC,sBAAAvD,OAGLgC,EAAiB,GAAK,mBAE1BuK,QAAS,kBAAM9H,EAAUxC,EAAQyC,KAPnC,OAUG1C,EACG,GACAoG,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,6BAAf,6BC5CH,SAAS2F,IACtB,OACE1G,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,aACbf,EAAAxK,EAAAyK,cAACgG,EAAD,MACAjG,EAAAxK,EAAAyK,cAAC0G,EAAD,MACA3G,EAAAxK,EAAAyK,cAACsG,EAAD,OCPS,SAASK,EAAkBxM,GACxC,OACE4F,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA3G,GAAuB,IAGpBJ,EAHoBI,EAApBiC,cAGArC,oBAGIoJ,EAAU,CACdf,WAAY1L,EAAMiB,MAAMyL,UAGpBpK,EAAa,CACjBoJ,WAAY1L,EAAMiB,MAAM0L,YAG1B,OACE/G,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,uBACZf,EAAAxK,EAAAyK,cAAA,WACED,EAAAxK,EAAAyK,cAAA,KAAG4B,MAAOgF,GAAYzM,EAAMiB,MAAMA,OAClC2E,EAAAxK,EAAAyK,cAAA,KAAG4B,MAAOnF,GAAatC,EAAMiB,MAAMvG,QACnCkL,EAAAxK,EAAAyK,cAAA,UACEc,UAAU,8BACVoD,QAAS,kBAAM1G,EAAoBrD,EAAMzB,gBAF3C,WAIFqH,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,0BAA0BiG,IAAI,GAAGC,IAAK7M,EAAMiB,MAAM6B,0BCzB9D,SAASgK,EAATrJ,GAAoC,IAAXZ,EAAWY,EAAXZ,QACtC,OACE+C,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA2C,GAAqB,IAAlBtH,EAAkBsH,EAAlBtH,YACF,OACEG,EAAAxK,EAAAyK,cAAAD,EAAAxK,EAAAuO,SAAA,KACE/D,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,0BAAd,aACAf,EAAAxK,EAAAyK,cAAA,MAAIc,UAAU,kBACVlB,EAAYvG,YAAY8N,IAAI,SAAA/L,GAAK,OACjC2E,EAAAxK,EAAAyK,cAAC2G,EAAD,CACEjQ,IAAK0E,EAAM3C,GACX2C,MAAOA,EACP4B,QAASA,EACTtE,aAAc0C,EAAM3C,eCdjB2O,cAEnB,SAAAA,EAAYjN,GAAO,IAAAb,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAAb,KAAA6N,IACjB9N,EAAAc,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAgN,GAAA5M,KAAAjB,KAAMY,KACD6C,QAAU7C,EAAM6C,QAFJ1D,mFAMjBC,KAAKY,MAAMkC,sBAAsB,yCAIjC,OACE0D,EAAAxK,EAAAyK,cAAA,OAAKc,UAAU,aACbf,EAAAxK,EAAAyK,cAACiH,EAAD,CAAejK,QAASzD,KAAKY,MAAM6C,kBAdEhD,IAAMmG,WCS/BkH,QACW,cAA7B1Q,OAAO2Q,SAASC,UAEe,UAA7B5Q,OAAO2Q,SAASC,UAEhB5Q,OAAO2Q,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACH3H,EAAAxK,EAAAyK,cAAC2H,EAAD,KACE5H,EAAAxK,EAAAyK,cCFO,SAAgB7F,GAC7B,OACE4F,EAAAxK,EAAAyK,cAACwE,EAAA,EAAD,KACEzE,EAAAxK,EAAAyK,cAAC4H,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWpD,IAC3B3E,EAAAxK,EAAAyK,cAAC4H,EAAA,EAAD,KACE7H,EAAAxK,EAAAyK,cAAC4H,EAAA,EAAD,CAAOC,KAAK,IAAIE,OAAK,EAACD,UAAWxC,IACjCvF,EAAAxK,EAAAyK,cAAC4H,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWrB,IACjC1G,EAAAxK,EAAAyK,cAACjG,EAAcwK,SAAf,KACG,SAAA3G,GAAoC,IAAjCgC,EAAiChC,EAAjCgC,YACMvD,EAD2BuB,EAApBiC,cACPxD,sBACAzC,EAAWgG,EAAXhG,OAER,OACEmG,EAAAxK,EAAAyK,cAAC4H,EAAA,EAAD,CACEC,KAAK,kBACLH,OAAQ,SAACvN,GAAD,OAAW4F,EAAAxK,EAAAyK,cAACgI,EAAD5N,OAAAgK,OAAA,GACbjK,EADa,CAEjBkC,sBAAuBA,EACvBzC,OAAQA,aDhBlB,OAELqO,SAASC,eAAe,SDqHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7M,KAAK,SAAA8M,GACjCA,EAAaC","file":"static/js/main.d8591f01.chunk.js","sourcesContent":["module.exports = {\n  PORT: process.env.PORT || 8080,\n  // other stuff\n  API_BASE_URL: process.env.REACT_APP_API_BASE_URL || \"http://localhost:8000/api\"\n};","const quoteFontPairings = [\n  {\n    body: 'Playfair Display, serif',\n    author: 'Source Sans Pro, sans-serif'\n  },\n  {\n    body:'Abril Fatface, cursive',\n    author:'Poppins, sans-serif' \n  },\n  {\n    body:'Ruda, sans-serif',\n    author:'Roboto Slab, serif' \n  },\n  {\n    body:'Cormorant Garamond, serif',\n    author:'Fira Sans, sans-serif' \n  },\n  {\n    body:'PT Sans, sans-serif',\n    author:'Playfair Display, serif' \n  }\n]\n\nexport default quoteFontPairings;\n\n// font-family: 'Source Sans Pro', sans-serif;\n// font-family: 'Playfair Display', serif;\n// font-family: 'Abril Fatface', cursive;\n// font-family: 'Poppins', sans-serif;\n// font-family: 'Ruda', sans-serif;\n// font-family: 'Roboto Slab', serif;\n// font-family: 'Cormorant Garamond', serif;\n// font-family: 'Fira Sans', sans-serif;\n// font-family: 'PT Sans', sans-serif;\n// font-family: 'Playfair Display', serif;","function *createIteratorObj(arr) {\n  for(let obj of arr) {\n    yield obj;\n  }\n}\n\nexport function createIterator(iterable) {\n  return createIteratorObj(iterable);\n}","const TokenServices = {\n  getTokenByKey(key) {\n    return window.localStorage.getItem(key);\n  },\n  setToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  updateToken(key, data) {\n    window.localStorage.setItem(key, data);\n  },\n  removeTokenByKey(key) {\n    window.localStorage.removeItem(key);\n  }\n}\n\nexport default TokenServices;","import { API_BASE_URL } from '../config';\nimport TokenServices from '../services/TokenServices';\n\nconst FetchServices = {\n  getBackgroundImages(numberOfImages) {\n    return fetch(`${API_BASE_URL}/backgroundImages/${numberOfImages}`);\n  },\n  getSavedQuotesByUsername(username) {\n    return fetch(`${API_BASE_URL}/savedQuotes/${username}`, {\n      headers: {\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      }\n    });\n  },\n  getQuotes() {\n    return fetch(`${API_BASE_URL}/quotes`);\n  },\n  postSaveQuote(data) {\n    return fetch(`${API_BASE_URL}/savedQuotes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify(data)\n    });\n  },\n  postNewUser(data) {\n    return fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    });\n  },\n  postUserLogin(data) {\n    return fetch(`${API_BASE_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n  },\n  deleteSavedQuoteById(id) {\n    return fetch(`${API_BASE_URL}/savedQuotes/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${TokenServices.getTokenByKey('motiv8-jwt')}`\n      },\n      body: JSON.stringify({\"savedQuoteId\": id})\n    });\n  },\n  convertResToJson(res) {\n    return res.json();\n  }\n}\n\nexport function convertResToJson(res) {\n    return res.json();\n}\n\nexport default FetchServices;","import TokenServices from '../services/TokenServices';\nimport FetchServices from '../services/FetchServices';\nimport jwt from 'jsonwebtoken';\n\nexport function createAccount(newUserInfo) {\n  return FetchServices.postNewUser(newUserInfo)\n}\n\nexport function checkIfAccountCreationError(json) {\n  if(json.error) {\n    throw json.error;\n  }\n  return json;\n}\n\nexport function setLoginToken(res) {\n  if(res.error) {\n    throw res.error;\n  }\n  return TokenServices.setToken('motiv8-jwt', res.authToken);\n}\n\nexport function fetchSavedQuotes() {\n  let decodedToken = jwt.decode(TokenServices.getTokenByKey('motiv8-jwt'));\n  return FetchServices.getSavedQuotesByUsername(decodedToken.sub);\n}\n\nexport function finalizeLogin(savedQuotes) {\n  let decodedToken = jwt.decode(TokenServices.getTokenByKey('motiv8-jwt'));\n  return new Promise((resolve) => {\n    this.setState({\n        userIsLoggedIn: true,\n        username: decodedToken.sub,\n        userId: decodedToken.userId,\n        savedQuotes:savedQuotes,\n        menuIsOpen: false\n      }, resolve);\n  })  \n}\n\nexport function logoutUser() {\n  TokenServices.removeTokenByKey('motiv8-jwt');\n  this.setState({\n    userIsLoggedIn: false,\n    userId: 0,\n    username: '',\n    savedQuotes: [],\n    menuIsOpen: false\n  });\n}\n\nconst UserServices = {\n  setLoginToken,\n  fetchSavedQuotes,\n  finalizeLogin,\n  logoutUser\n}\n\nexport default UserServices;\n","import React from 'react';\nimport quoteFontPairings from '../fonts/quoteFontPairings';\nimport { createIterator } from '../services/IteratorServices';\nimport TokenServices from '../services/TokenServices';\nimport FetchServices, { convertResToJson } from '../services/FetchServices';\nimport { setLoginToken, fetchSavedQuotes, finalizeLogin, logoutUser } from '../services/UserServices';\nimport jwt from 'jsonwebtoken';\nimport { API_BASE_URL } from '../config';\n\nconst GlobalContext = React.createContext();\n\nclass GlobalContextManager extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      quoteIterator: {},\n      backgroundUrlIterator: {},\n      fontIterator: {},\n      quoteFontPairings: [...quoteFontPairings],\n\n      currentQuote: {},\n      currentQuoteBgImageUrl: '',\n      currentQuoteFontPair: {},\n      currentQuoteSaved: false,\n\n      quoteHistory: [],\n\n      keepQuoteBackground: false,\n      keepQuoteFonts: false,\n      keepQuoteQuote: false,\n\n      userIsLoggedIn: false,\n      username: '',\n      userId: 0,\n      savedQuotes: [],\n    }\n  }\n\n  //APP METHODS\n  componentDidMount() {\n    this.initializeApp();\n    const localToken = jwt.decode(TokenServices.getTokenByKey('motiv8-jwt'), {complete: true});\n    \n    if (localToken) {\n      const { payload } = localToken;\n      this.setState({\n        userIsLoggedIn: true,\n        userId: payload.userId,\n        username: payload.sub\n      });\n    }\n  }\n\n  initializeApp() {\n    let getImages = this.getBackgroundImages(30);\n    let getQuotes = this.getQuotes(30);\n    let getFonts = this.getFonts();\n    \n    Promise.all([ getQuotes, getImages, getFonts ])\n      .then(() => this.randomizeQuote())\n      .catch(err => console.error(err));\n  }\n  //END APP METHODS\n\n  //QUOTE \n  randomizeQuote = () => {\n    const {\n      currentQuote,\n      currentQuoteBgImageUrl,\n      currentQuoteFontPair,\n      keepBackground,\n      keepFonts,\n      keepQuote,\n    } = this.state;\n\n    this.setState({\n      //resets save button\n      currentQuoteSaved: false\n    });\n\n    let currentQuoteConfig = {\n      quote: currentQuote,\n      quoteBgImageUrl: currentQuoteBgImageUrl,\n      quoteFontPair: currentQuoteFontPair,\n    };\n\n    this.pushToHistory(currentQuoteConfig)\n      .then(() => {\n        if(!keepBackground) {\n          this.iterateBackgroundUrl(this.backgroundUrlIterator);\n        }\n        if(!keepFonts) {\n          this.iterateFontPairing(this.fontIterator);\n        }\n        if(!keepQuote) {\n          this.iterateQuote(this.quoteIterator);\n        }\n      });\n  }\n  \n  undoRandomizeQuote = () => {\n    const prevQuote = this.state.quoteHistory.pop();\n    this.setCurrentQuote(prevQuote);\n  }\n\n  saveQuote = (userId, getUpdatedSavedQuotes) => {\n    if(userId === 0) {\n      return;\n    }\n    const data = {\n      backgroundImageUrl: this.state.currentQuoteBgImageUrl,\n      quoteId: this.state.currentQuote.id,\n      bodyFont: this.state.currentQuoteFontPair.body,\n      authorFont: this.state.currentQuoteFontPair.author,\n      userId: userId,\n    }\n    FetchServices.postSaveQuote(data)\n    .then(res => {\n      if(res.ok) {\n        getUpdatedSavedQuotes(userId);\n        this.setState({currentQuoteSaved: true })\n      }\n    });\n  }\n\n  //refactor out to 3 different toggle functions\n  handleCheckboxCheck = (e) => {\n    switch(e.target.id) {\n      case 'keep-quote-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepQuote: !currentState.keepQuote\n          }\n        });\n        break;\n      case 'keep-fonts-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepFonts: !currentState.keepFonts\n          }\n        });\n        break;\n      case 'keep-background-checkbox':\n        this.setState((currentState) => {\n          return {\n            keepBackground: !currentState.keepBackground\n          }\n        })\n        break;\n      default:\n    }\n  }\n\n  editFavoritesItem = (quote, history) => {\n    this.setState({\n      currentQuote: quote,\n      currentQuoteBgImageUrl: quote.background_image_url,\n      keepBackground: false,\n      keepFonts: false,\n      keepQuote: false\n    }, () => {\n      history.push('/quotes');\n    })\n  }\n  //END QUOTE METHODS\n\n  //USER METHODS\n  loginUser = (userInfo, ) => {\n    return FetchServices.postUserLogin(userInfo)\n            .then(convertResToJson)\n            .then(setLoginToken.bind(this))\n            .then(fetchSavedQuotes)\n            .then(convertResToJson)\n            .then(finalizeLogin.bind(this));\n  }\n\n  logoutUser = () => logoutUser.call(this);\n\n  getUpdatedSavedQuotes = (username) => {\n    FetchServices.getSavedQuotesByUsername(username)\n    .then(convertResToJson)\n    .then(this.setUpdatedSavedQuotes);\n  }\n\n  deleteFavoritesItem = (savedQuoteId) => {\n    FetchServices.deleteSavedQuoteById(savedQuoteId)\n    .then(res => {\n      console.log('delete res', res);\n      if(res.status === 204) {\n        this.setState(({ savedQuotes }) => {\n          let newSavedQuotes = savedQuotes.filter((savedQuote) => {\n            return !(savedQuote.id === savedQuoteId); //removes quote matching id\n          });\n          console.log('newSavedQuotes', newSavedQuotes);\n          return {\n            savedQuotes: newSavedQuotes\n          }\n        });\n      }\n    })\n    .catch(err => console.error(err));\n  }\n  //END USER METHODS\n\n  toggleMenuIsOpen = () => {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: !currentState.menuIsOpen\n      }\n    })\n  }\n  \n  //HELPER FUNCTIONS\n  setBackgroundUrlIterator = (iterator) => {\n    return new Promise((resolve) => {\n      this.backgroundUrlIterator = iterator;\n      resolve();\n    });\n  }\n\n  setQuoteIterator = (iterator) => {\n    return new Promise((resolve) => {\n      this.quoteIterator = iterator;\n      resolve();\n    });\n  }\n\n  setFontIterator = (iterator) => {\n    return new Promise((resolve) => {\n      this.fontIterator = iterator;\n      resolve(this.fontIterator);\n    });\n  }\n\n  setUpdatedSavedQuotes = (json) => {\n    return new Promise((resolve) => {\n      this.setState({ savedQuotes: json }, resolve);\n    });\n  }\n\n  setCurrentQuote = (obj) => {\n    this.setState({\n      currentQuote: obj.quote,\n      currentQuoteBgImageUrl: obj.quoteBgImageUrl,\n      currentQuoteFontPair: obj.quoteFontPair,\n    });\n  }\n\n  pushToHistory = (quoteConfig) => {\n    return new Promise((resolve) => {\n      this.setState((currentState) => {\n        let history = currentState.quoteHistory;\n        history.push(quoteConfig);\n        return {\n          quoteHistory: history \n        }\n      }, resolve) \n    });\n  }\n\n  getBackgroundImages(numberOfImages = 30) {\n    return FetchServices.getBackgroundImages(numberOfImages)\n            .then(convertResToJson)\n            .then(createIterator)\n            .then(this.setBackgroundUrlIterator);\n  }\n\n  getQuotes(numberOfQuotes = 30) {\n    //TODO make quotes route dynamic to accept numberOfQuotes param\n    return FetchServices.getQuotes()\n            .then(convertResToJson)\n            .then(createIterator)\n            .then(this.setQuoteIterator);\n  }\n\n  getFonts() {\n    const fontIterator = createIterator(this.state.quoteFontPairings);\n    return this.setFontIterator(fontIterator);\n  }\n  \n  iterateBackgroundUrl(iterator) {\n    const {value, done} = iterator.next();\n    if(done) {\n      //create new iterator when old one runs out\n      this.getBackgroundImages(30)\n    }\n    else {\n      this.setState({ currentQuoteBgImageUrl: value.urls.regular });\n    }\n  }\n  \n  iterateFontPairing = (iterator) => {\n    const {value, done} = iterator.next();\n    if(!done) {\n      this.setState({ currentQuoteFontPair: value });\n    }\n    else {\n      //if iterator done create new iterator then call the first value on it.\n      let newFontIterator = createIterator(this.state.quoteFontPairings);\n      this.setFontIterator(newFontIterator)\n            .then(this.iterateFontPairing);\n    }\n  }\n  \n  iterateQuote = (iterator) => {\n    const { value, done } = iterator.next();\n    if(!done) {\n      this.setState({currentQuote: value })\n    }\n    else {\n      this.getQuotes(30);\n    }\n  }\n\n  //END HELPER FUNCTIONS\n  render() {\n    const globalContext = {\n      GlobalState: this.state,\n      GlobalMethods: {\n        handleCheckboxCheck: this.handleCheckboxCheck,\n        randomizeQuote: this.randomizeQuote,\n        undoRandomizeQuote: this.undoRandomizeQuote,\n        saveQuote: this.saveQuote,\n        createAccount: this.createAccount,\n        loginUser: this.loginUser,\n        logoutUser: this.logoutUser,\n        getUpdatedSavedQuotes: this.getUpdatedSavedQuotes,\n        deleteFavoritesItem: this.deleteFavoritesItem,\n        toggleMenuIsOpen: this.toggleMenuIsOpen,\n      }\n    }\n  \n    return (\n      <GlobalContext.Provider value={globalContext}>\n        {this.props.children}\n      </GlobalContext.Provider>\n    );\n  }\n}\n\nexport { GlobalContext , GlobalContextManager };\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      errorMessage: '',\n    }\n  }\n\n  componentWillUnmount() {\n    this.setErrorMessage('');\n  }\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      default:\n          console.error(\"onChange id not found in login form\");\n    }\n  }\n\n  setErrorMessage = (message) => {\n    this.setState({\n      errorMessage: message\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const { GlobalMethods } = this.context;\n    const { username, password } = this.state;\n\n    if(!username || !password) {\n      this.setErrorMessage(\"Please fill enter a username and password.\");\n      return;\n    }\n\n    GlobalMethods.loginUser({\n      username: this.state.username.toLowerCase(),\n      password: this.state.password\n    })\n    .then(() => this.props.history.push('/quotes'))\n    .then(() => this.props.setMenuIsOpen(false))\n    .catch(err => {\n      this.setErrorMessage(err);\n    });\n  }\n\n  render() {\n    const { errorMessage } = this.state \n    return (\n      <div>\n        <div className=\"demo-credentials\">\n          <h5>Demo Credentials</h5>\n          <div>Login: Demo</div>\n          <div>Pass: Demo123</div>\n        </div>\n        {errorMessage\n          ? <div className=\"error-message\">{errorMessage}</div>\n          : ''\n        }\n        <form className=\"input-form\" onSubmit={(e) => this.handleSubmit(e)}>\n          <label className=\"input-form__label\" htmlFor=\"username-input\">Username</label>\n          <input \n            id=\"username-input\"\n            type=\"text\"\n            onChange={(e) => this.handleTextInput(e)}\n            required/>\n\n          <label className=\"input-form__label\" htmlFor=\"password-input\">Password</label>\n          <input \n            id=\"password-input\" \n            type=\"password\" \n            onChange={(e) => this.handleTextInput(e)}\n            required />\n          <input className=\"input-form__submit\" type=\"submit\" value=\"Sign In\"/>\n        </form>\n      </div>\n    )\n  }\n}\n\nLoginForm.contextType = GlobalContext;","import React from 'react'\n\nexport default function LoadingSpinner() {\n  return (\n      <svg \n        width=\"200px\" \n        height=\"200px\" \n        xmlns=\"http://www.w3.org/2000/svg\" \n        viewBox=\"0 0 100 100\" \n        preserveAspectRatio=\"xMidYMid\" \n        className=\"lds-rolling\" \n        style={{shapeRendering: 'auto',\n                animationPlayState: 'running', \n                animationDelay: '0s', \n                background: 'none'}}>\n          <circle \n            cx=\"50\" \n            cy=\"50\" \n            fill=\"none\" \n            ng-attr-stroke=\"{{config.color}}\" \n            ng-attr-stroke-width=\"{{config.width}}\" \n            ng-attr-r=\"{{config.radius}}\" \n            ng-attr-stroke-dasharray=\"{{config.dasharray}}\" \n            stroke=\"#348ac7\" \n            stroke-width=\"10\" \n            r=\"35\" \n            stroke-dasharray=\"164.93361431346415 56.97787143782138\" \n            style={{animationPlayState: 'running', animationDelay: '0s'}} \n            transform=\"rotate(245.472 50 50)\">\n            <animateTransform \n              attributeName=\"transform\" \n              type=\"rotate\" \n              calcMode=\"linear\" \n              values=\"0 50 50;360 50 50\" \n              keyTimes=\"0;1\" \n              dur=\"1s\"\n              begin=\"0s\" \n              repeatCount=\"indefinite\" \n              style={{animationPlayState: 'running', animationDelay: '0s'}}>\n            </animateTransform>\n          </circle>\n          </svg>\n  )\n}\n","import React, { Component } from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport LoadingSpinner from '../../components/Loading/LoadingSpinner';\nimport { createAccount, checkIfAccountCreationError } from '../../services/UserServices';\nimport { convertResToJson } from '../../services/FetchServices';\n\nexport default class CreateAccountForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      passwordConfirm: '',\n      errorMessage: '',\n      isLoading: false,\n    }\n  }\n\n  handleTextInput(e) {\n    switch (e.target.id) {\n      case 'create-username-input':\n        this.setState({\n          username: e.target.value\n        })\n        break;\n      case 'create-password-input':\n        this.setState({\n          password: e.target.value\n        })\n        break;\n      case 'create-password-confirm-input':\n        this.setState({\n          passwordConfirm: e.target.value\n        })\n        break;\n      default:\n        console.error(\"onChange id not found in create account form\");\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    //check if password inputs match.\n    let { password, passwordConfirm } = this.state\n    if(password !== passwordConfirm) {\n      this.setState({\n        errorMessage: \"Passwords Must Match\"\n      });\n      return;\n    }\n    this.setState({\n      loading: true,\n    }, () => {\n      //Create Account\n      let newUserInfo = {\n        username: this.state.username.toLowerCase(),\n        password: this.state.password,\n      }\n\n      let { GlobalMethods } = this.context;\n      createAccount(newUserInfo)\n        .then(convertResToJson)\n        .then(checkIfAccountCreationError)\n        .then(({ username }) => GlobalMethods.loginUser({ username, password }))\n        .then(() => this.props.setMenuIsOpen(false))\n        .then(() => this.props.history.push('/quotes'))\n        .then(() => this.setIsLoading(false))\n        .catch(this.setCreateAccountError);\n    });\n  }\n\n  setIsLoading(bool) {\n    this.setState({\n      isLoading: bool\n    });\n  }\n\n  setCreateAccountError = (message) => {\n    this.setState({\n      errorMessage: message,\n    }, () => {\n      this.setIsLoading(false);\n    });\n  }\n\n  render() {\n    const { errorMessage, isLoading } = this.state;\n\n    return (\n      <>\n        <form \n          className=\"create-account-form\" \n          onSubmit={(e) => {\n            this.handleSubmit(e);\n          }}>\n          {isLoading\n          ? <LoadingSpinner />\n          : <>\n            {errorMessage\n              ? <div className=\"error-message\">{errorMessage}</div>\n              : ''\n            }\n            <label className=\"create-account-form__label\" htmlFor=\"username-input\">Username</label>\n            <input \n              id=\"create-username-input\"\n              type=\"text\"\n              onChange={(e) => this.handleTextInput(e)}\n              required/>\n\n            <label className=\"create-account-form__label\" htmlFor=\"password-input\">Password</label>\n            <input \n              id=\"create-password-input\" \n              type=\"password\" \n              onChange={(e) => this.handleTextInput(e)}\n              required />\n\n            <label className=\"create-account-form__label\" htmlFor=\"password-confirm-input\">Confirm Password</label>\n            <input \n              id=\"create-password-confirm-input\" \n              type=\"password\" \n              onChange={(e) => this.handleTextInput(e)}\n              required/>\n            </>\n          }\n          <input className=\"create-account-form__submit\" type=\"submit\" value=\"Create Account\"/>\n        </form>\n      </>\n    )\n  };\n}\n\nCreateAccountForm.contextType = GlobalContext;\n","import React from 'react'\nimport LoginForm from './LoginForm';\nimport CreateAccountForm from './CreateAccountForm';\n\nexport default class AccountAccessForms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inCreateAccountMode: false\n    }\n  }\n\n  setInCreateAccountMode = (bool) => {\n    this.setState({\n      inCreateAccountMode: bool\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"account-access-forms\">\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? '' : 'highlight'}`} \n          onClick={() => this.setInCreateAccountMode(false)}>\n            Sign In\n        </button>\n        <button \n          className={`account-access-forms__button ${this.state.inCreateAccountMode ? 'highlight' : ''}`} \n          onClick={() => this.setInCreateAccountMode(true)}>\n            Create Account\n        </button>\n        <div className=\"account-access-forms__selected-form\">\n          {this.state.inCreateAccountMode ? \n            <CreateAccountForm setInCreateAccountMode={this.setInCreateAccountMode} {...this.props}/>\n            :\n            <LoginForm {...this.props} setMenuIsOpen={this.props.setMenuIsOpen}/>}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default function UserMenu(props) {\n\n  return (\n    <GlobalContext.Consumer>\n      {({ GlobalState, GlobalMethods }) => {\n          return (\n            <ul className=\"user-menu\">\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={`/user/${GlobalState.username}`} \n                onClick={() => props.setMenuIsOpen(false)}\n              >\n                <li className=\"user-menu__list-item\">\n                  Profile\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/quotes'} \n                onClick={() => props.setMenuIsOpen(false)}\n              >\n                <li className=\"user-menu__list-item\">\n                  Quote Generator\n                </li>\n              </NavLink>\n              <NavLink \n                className=\"user-menu__list-item__link\" \n                to={'/'} \n                onClick={() => {\n                  GlobalMethods.logoutUser();\n                  props.setMenuIsOpen(false);\n                }}\n              >\n                <li className=\"user-menu__list-item\">\n                  Log Out\n                </li>\n              </NavLink>\n            </ul>\n          )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n\nUserMenu.contextType = GlobalContext;\n","import React from 'react';\nimport AccountAccessForms from './AccountAccessForms';\nimport UserMenu from './UserMenu';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default class Menu extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      menuIsOpen: false,\n      userIsLoggedIn: true\n    }\n  }\n\n  setMenuIsOpen = (bool) => {\n    this.setState((currentState) => {\n      return {\n        menuIsOpen: bool\n      }\n    })\n  }\n\n  capitalizeFirstLetter(string) {\n    if(!typeof string === 'string') throw new Error('argument must be a string');\n    let firstLetter = string.charAt(0).toUpperCase();\n    return firstLetter + string.slice(1, string.length);\n  }\n  \n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ GlobalState }) => {\n          const { menuIsOpen } = this.state;\n            return (\n              <div className=\"menu-container\">\n                <header className=\"menu\">\n                  <button className=\"menu__button\" onClick={() => this.setMenuIsOpen(!menuIsOpen)}>\n                    <span>{ menuIsOpen ? 'Close' : 'Menu' }</span>\n                  </button>\n                  <div className=\"menu__greeting\">\n                    { GlobalState.userIsLoggedIn ? `Welcome ${this.capitalizeFirstLetter(GlobalState.username)}`: ''}\n                  </div>\n                    { menuIsOpen \n                      ? GlobalState.userIsLoggedIn \n                        ? <UserMenu {...this.props} setMenuIsOpen={this.setMenuIsOpen}/> \n                        : <AccountAccessForms {...this.props} setMenuIsOpen={this.setMenuIsOpen}/>\n                      : ''\n                    }\n                </header>\n              </div>\n            )\n          }\n        }\n      </GlobalContext.Consumer>\n    )\n  }    \n}\n","import React, {useState} from 'react'\n\nexport default function HeroImage() {\n\n  let splashQuotes = [{\n    quote: `“Do not fear the winds of adversity. Remember, a kite \n    rises against the wind rather than with it.”`,\n    author: 'Unknown'\n  }]\n\n  const [currentQuote, setCurrentQuote] = useState(splashQuotes[0]);\n  \n  return (\n    <div className=\"landing-page__splash\">\n      <h1 className=\"landing-page__header\">Motiv8</h1>  \n      <div className=\"splash-animation\">\n        <div className=\"splash-quote\">{currentQuote.quote}</div>\n        <div className=\"splash-quote-author\">{currentQuote.author}</div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport HeroImage from './HeroImage'\n\n\nexport default function LandingPage({ history }) {\n  return (\n    <div className=\"landing-page-container\">\n      <HeroImage />\n      <main className=\"landing-page__main-content\">\n        <div className=\"landing-page__copy\">\n          <h3>Motiv8 is a random quote generator.</h3>\n          <ul className=\"landing-page__list\">\n            <li className=\"landing-page__list-item\">\n              <i className=\"fas fa-palette landing-page__icon\"></i>\n              <span className=\"landing-page__list-copy\">Create unique quote, font, and background image pairings.</span>\n            </li>\n            <li className=\"landing-page__list-item\">\n              <i className=\"fas fa-user-circle landing-page__icon\"></i>\n              <span className=\"landing-page__list-copy\">Create an account and save your favorite combos.</span>\n            </li>\n          </ul> \n        </div>\n      </main>\n      <button className=\"btn get-started-button\" onClick={() => history.push('/quotes')}>Get Started</button>\n\n    </div>\n  )\n}\n","import React from 'react';\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport LoadingSpinner from '../Loading/LoadingSpinner';\nexport default class QuoteDisplay extends React.Component {\n  state = {\n    loading: false,\n  }\n\n  render() {\n    return (\n      <GlobalContext.Consumer>\n        {({ GlobalState }) => {\n\n          const {\n            currentQuote,\n            currentQuoteBgImageUrl,\n            currentQuoteFontPair,\n          } = GlobalState;\n\n          const dynamicBackgroundStyles = {\n            backgroundSize: 'cover',\n            backgroundPosition: 'center center',\n            backgroundImage: `url(${currentQuoteBgImageUrl})`,\n          }\n\n          const dynamicBodyFont = {\n            fontFamily: currentQuoteFontPair['body']\n          }\n      \n          const dynamicAuthorFont = {\n            fontFamily: currentQuoteFontPair['author']\n          }\n\n          return (\n            <div className=\"quote-display\"style={dynamicBackgroundStyles}>\n              {currentQuote.hasOwnProperty('quote')\n              ? <div className=\"quote-backdrop\">\n                  <div className=\"quote-body\" style={dynamicBodyFont}>{currentQuote.quote}</div>\n                  <div className=\"quote-author\" style={dynamicAuthorFont}>{currentQuote.author}</div>\n                </div>\n              : <LoadingSpinner />\n              }\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  }\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSquare, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\n\nexport default function QuoteControls() {\n\n    return (\n      <GlobalContext.Consumer>\n        {({ GlobalState, GlobalMethods }) => {\n          const { \n            keepBackground,\n            keepFonts,\n            keepQuote,\n          }  = GlobalState;\n\n          const {\n            handleCheckboxCheck,\n          } = GlobalMethods;\n\n          const iconSize = 'lg';\n          \n          return (\n            <div className=\"quote-controls-container\">\n              <h5 className=\"quote-controls-heading\">Randomize Options</h5>\n              <div className=\"quote-controls\">\n                <input\n                  onChange={(e) => handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-quote-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-quote-checkbox\">\n                  <div>\n                    {keepQuote ? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Quote</span>\n                </label>\n                <input\n                  onChange={(e) => handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-fonts-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-fonts-checkbox\">\n                  <div>\n                    {keepFonts? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/>\n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Fonts</span>\n                </label>\n                <input\n                  onChange={(e) => handleCheckboxCheck(e)}\n                  type=\"checkbox\"\n                  id=\"keep-background-checkbox\" />\n                <label className=\"quote-controls__label\" htmlFor=\"keep-background-checkbox\">\n                  <div>\n                    {keepBackground? \n                      <FontAwesomeIcon icon={faCheckSquare} size={iconSize}/> \n                      : \n                      <FontAwesomeIcon icon={faSquare} size={iconSize}/>}\n                  </div>\n                  <span className=\"quote-controls__label__text\">Keep Background</span>\n                </label>\n              </div>\n            </div>\n          )\n        }}\n      </GlobalContext.Consumer>\n    )\n  \n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\n\nexport default function QuoteNav() {\n\n  function isEmpty(quoteHistory) {\n    return quoteHistory.length > 1;\n  }\n\n  return (\n    <GlobalContext.Consumer>\n      {({ GlobalState, GlobalMethods }) => {\n\n        const {\n          currentQuoteSaved,\n          userIsLoggedIn,\n          quoteHistory,\n          userId\n        } = GlobalState;\n\n        const {\n          getUpdatedSavedQuotes,\n          randomizeQuote,\n          saveQuote,\n          undoRandomizeQuote,\n        } = GlobalMethods;\n        \n        return (\n          <div className=\"quote-nav-container\">\n            <button className=\"quote-nav__button randomize-button\" onClick={() => randomizeQuote()}>Randomize</button>\n            <button\n              disabled={isEmpty(quoteHistory) ? false : 'disabled'}\n              className={`quote-nav__button undo-button ${isEmpty(quoteHistory) ? '' : 'button-disabled'}`} \n              onClick={() => undoRandomizeQuote()}>\n                Undo\n            </button>\n            <button \n              disabled={userIsLoggedIn ? false : 'disabled'}\n              className={\n                `quote-nav__button save-button \n                ${currentQuoteSaved ? 'save-success' : ''}\n                ${userIsLoggedIn ? '' : 'button-disabled'}`\n              } \n              onClick={() => saveQuote(userId, getUpdatedSavedQuotes)}\n              >\n                Save\n              {userIsLoggedIn\n                ? ''\n                : <div className=\"save-button__instructions\">Log in to save quotes</div>\n              }\n            </button>\n          </div>\n        )\n      }}\n    </GlobalContext.Consumer>  \n  )\n}\n","import React from 'react'\nimport QuoteDisplay from './QuoteDisplay';\nimport QuoteControls from './QuoteControls';\nimport QuoteNav from './QuoteNav';\n\nexport default function QuoteEditorPage() {\n  return (\n    <div className=\"container\">\n      <QuoteControls />\n      <QuoteDisplay />\n      <QuoteNav />\n    </div>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\n\nexport default function FavoritesListItem(props) {\n  return (\n    <GlobalContext.Consumer>\n      {({ GlobalMethods }) => {\n\n        const {\n          deleteFavoritesItem\n        } = GlobalMethods;\n\n        const quoteFont={\n          fontFamily: props.quote.bodyfont\n        }\n\n        const authorFont = {\n          fontFamily: props.quote.authorfont,\n        }\n\n        return (\n          <li className=\"favorites-list-item\">\n            <div>\n              <p style={quoteFont}>{props.quote.quote}</p>\n              <p style={authorFont}>{props.quote.author}</p>\n              <button \n                className=\"favorites-list-item__button\" \n                onClick={() => deleteFavoritesItem(props.savedQuoteId)}>Delete</button>\n            </div>\n            <img className=\"favorites-list-item-img\" alt='' src={props.quote.background_image_url}></img>\n          </li>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport { GlobalContext } from '../../contexts/GlobalContextManager';\nimport FavoritesListItem from './FavoritesListItem';\n\nexport default function FavoritesList({ history }) {\n  return (\n    <GlobalContext.Consumer>\n      {({ GlobalState }) => {\n        return (\n          <>\n            <h3 className=\"favorites-list-heading\">Favorites</h3>\n            <ul className=\"favorites-list\">\n              { GlobalState.savedQuotes.map(quote => \n                <FavoritesListItem \n                  key={quote.id}\n                  quote={quote}\n                  history={history}\n                  savedQuoteId={quote.id}/>) }\n            </ul>\n          </>\n        )\n      }}\n    </GlobalContext.Consumer>\n  )\n}\n","import React from 'react'\nimport FavoritesList from './FavoritesList.js';\n\nexport default class UserProfilePage extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.history = props.history\n  }\n\n  componentDidMount() {\n    this.props.getUpdatedSavedQuotes('Demo');\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <FavoritesList history={this.props.history}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { GlobalContextManager } from './contexts/GlobalContextManager';\nimport Router from './router/Router';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n      <GlobalContextManager>\n        <Router />\n      </GlobalContextManager>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Menu from '../components/Header/Menu';\nimport LandingPage from '../components/LandingPage/LandingPage';\nimport QuoteEditorPage from '../components/QuoteEditorPage/QuoteEditorPage';\nimport UserProfilePage from '../components/UserProfilePage/UserProfilePage';\nimport { GlobalContext } from '../contexts/GlobalContextManager';\n\nexport default function Router(props) {\n  return (\n    <BrowserRouter>\n      <Route path=\"/\" component={Menu} />\n      <Switch>\n        <Route path=\"/\" exact component={LandingPage} />\n        <Route path=\"/quotes\" component={QuoteEditorPage} />\n        <GlobalContext.Consumer>\n          {({ GlobalState, GlobalMethods }) => {\n            const { getUpdatedSavedQuotes } = GlobalMethods;\n            const { userId } = GlobalState;\n\n            return (\n              <Route \n                path=\"/user/:username\" \n                render={(props) => <UserProfilePage\n                  {...props}\n                  getUpdatedSavedQuotes={getUpdatedSavedQuotes}\n                  userId={userId}/>} \n                />\n            )\n          }}\n        </GlobalContext.Consumer>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n"],"sourceRoot":""}